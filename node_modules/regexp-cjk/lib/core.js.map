{"version":3,"file":"core.js","sourceRoot":"","sources":["core.ts"],"names":[],"mappings":";;;AAAA,iCAA+E;AAE/E,6DAM6B;AAQK,mGAVjC,wCAAkB,OAUiC;AAA3C,wGATR,6CAAuB,OASQ;AAPhC,+CAAyD;AAEzD,iDAAmF;AACnF,2CAAqD;AACrD,2DAA8D;AAC9D,qCAAoD;AAMvC,QAAA,WAAW,GAAG,MAAM,CAAC,GAAG,CAAC,mBAAmB,CAAC,CAAC;AAmG3D,SAAgB,WAAW,CAAC,GAAG,EAAE,KAAK,GAAG,IAAI,EAAE,UAAkC,EAAE,EAAE,GAAG,IAAI;IAE3F,MAAM,IAAI,GAAG,IAAA,gCAAiB,EAAC,GAAG,EAAE,KAAK,EAAE,OAAO,EAAE,GAAG,IAAI,CAAC,CAAC;IAE7D,IAAI,MAAc,CAAC;IACnB,IAAI,QAAiB,CAAC;IAEtB,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,GAAG,IAAI,CAAC,CAAC;IAE3B,OAAO,GAAG,IAAA,yBAAU,EAAC,OAAO,CAAC,CAAC;IAE9B,CAAC,EAAE,MAAM,EAAE,QAAQ,EAAE,KAAK,EAAE,GAAG,IAAA,kCAAsB,EAAC,IAAI,CAAC,CAAC,CAAC;IAE7D,GAAG,GAAG,MAAM,CAAC;IAEb,IAAI,OAAO,CAAC,MAAM,EAClB,CAAC;QACA,IAAI,OAAO,GAAG,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,OAAO,EAAE,EAAE;YAElD,IAAI,CAAC,OAAO,CAAC,WAAW,EACxB,CAAC;gBACA,OAAO,CAAC,CAAA;YACT,CAAC;YAED,OAAO,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;QAC/B,CAAC,EAAE;YACF,GAAG;YACH,KAAK;YACL,OAAO;YACP,IAAI;YACJ,QAAQ;SACR,CAAC,CAAC;QAEH,CAAC,EAAE,GAAG,EAAE,OAAO,EAAE,KAAK,EAAE,IAAI,EAAE,QAAQ,EAAE,GAAG,OAAO,CAAC,CAAC;IACrD,CAAC;IAED,IAAI,CAAC,CAAC,OAAO,CAAC,SAAS,IAAI,CAAC,OAAO,CAAC,iBAAiB,IAAI,OAAO,CAAC,EAAE,CAAC,EACpE,CAAC;QACA,IAAI,EAAE,GAAG,wCAAkB,CAAC,MAAM,CAAC,GAAG,EAAE,KAAK,IAAI,EAAE,CAAC,CAAC;QAErD,MAAM,SAAS,GAAG,OAAO,CAAC,OAAO,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC,6BAAsB,CAAC,CAAC,CAAC,oBAAW,CAAC,CAAC;QAElG,IAAI,CAAC,OAAO,CAAC,SAAS,EACtB,CAAC;YACA,EAAE,CAAC,EAAE,kDAAkC,UAAU,GAAG;gBAEnD,IAAA,kBAAS,EAAC,GAAG,CAAC,CAAC;gBAEf,IAAI,GAAG,GAAG,IAAA,oBAAa,EAAC,GAAG,CAAC,GAAG,EAAG,OAAoB,CAAC,IAAI,EAAE,SAAS,EAAE,OAAmB,CAAC,CAAC;gBAE7F,IAAI,GAAG,CAAC,GAAG,KAAK,GAAG,EACnB,CAAC;oBACA,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC;oBACd,EAAE,CAAC,IAAI,gDAAiC,GAAG,CAAC,CAAC;gBAC9C,CAAC;YACF,CAAC,CAAC,CAAC;QACJ,CAAC;QAED,IAAI,CAAC,OAAO,CAAC,iBAAiB,EAC9B,CAAC;YACA,EAAE,CAAC,EAAE,0DAAsC,UAAU,GAAG,EAAE,GAAG,IAAI;gBAEhE,IAAI,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC;gBACpB,IAAI,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC;gBAEpB,IAAI,GAAG,GAAG,IAAA,yBAAW,EAAC,CAAC,EAAE,CAAC,EAAE;oBAC3B,kBAAkB,EAAE,IAAI;iBACxB,CAAC,CAAC;gBACH,IAAI,GAAG,EACP,CAAC;oBACA,IAAK,OAAoB,CAAC,qBAAqB,EAC/C,CAAC;wBACA,GAAG,GAAG,IAAA,qBAAc,EAAC,GAAG,EAAG,OAAoB,CAAC,IAAI,EAAE,SAAS,EAAE,OAAmB,CAAC,CAAC;oBACvF,CAAC;oBAED,IAAA,kBAAS,EAAC,GAAG,CAAC,CAAC;oBAEf,IAAI,GAAG,CAAC,GAAG,KAAK,GAAG,EACnB,CAAC;wBACA,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC;wBAEd,EAAE,CAAC,IAAI,gDAAiC,GAAG,CAAC,CAAC;oBAC9C,CAAC;gBACF,CAAC;YACF,CAAC,CAAC,CAAC;QACJ,CAAC;QAED,uBAAuB,CAAC,EAAE,EAAE,OAAO,CAAC,CAAC;QAErC,EAAE,CAAC,MAAM,EAAE,CAAC;QAEZ,GAAG,GAAG,EAAE,CAAC,SAAS,CAAC,CAAC,CAAC,OAAO,CAAC,YAAY;eACrC,CAAC,OAAO,CAAC,aAAa;eACtB,OAAO,CAAC,SAAS,EAClB,OAAO,CAAC,CAAC;QACZ,KAAK,GAAG,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC;IACrC,CAAC;IAED,IAAI,OAAO,CAAC,MAAM,EAClB,CAAC;QACA,IAAI,OAAO,GAAG,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,OAAO,EAAE,EAAE;YAElD,IAAI,CAAC,OAAO,CAAC,UAAU,EACvB,CAAC;gBACA,OAAO,CAAC,CAAA;YACT,CAAC;YAED,OAAO,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;QAC9B,CAAC,EAAE;YACF,GAAG;YACH,KAAK;YACL,OAAO;YACP,IAAI;YACJ,QAAQ;SACR,CAAC,CAAC;QAEH,CAAC,EAAE,GAAG,EAAE,OAAO,EAAE,KAAK,EAAE,IAAI,EAAE,QAAQ,EAAE,GAAG,OAAO,CAAC,CAAC;IACrD,CAAC;IAED,OAAO;QACN,MAAM,EAAE,GAAG;QACX,KAAK,EAAE,KAAK,IAAI,EAAE;QAClB,OAAO,EAAE,OAA0B;KACnC,CAAA;AACF,CAAC;AA5HD,kCA4HC;AAED,SAAgB,uBAAuB,CAAC,EAAsB,EAAE,OAAsB;IAErF,MAAM,MAAM,GAAG,IAAA,yBAAU,EAAC,OAAO,CAAC,CAAC,EAAE,CAAC;IAEtC,IAAI,MAAM,EACV,CAAC;QACA,MAAM;aACJ,OAAO,CAAC,CAAC,IAAI,EAAE,EAAE;YAEjB,MAAM;iBACJ,IAAI,CAAC,IAAI,CAAC;gBACX,aAAa;iBACZ,OAAO,CAAC,UAAU,KAA8B;gBAEhD,EAAE,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,CAAQ,CAAC,CAAA;YACjC,CAAC,CAAC,CACF;QACF,CAAC,CAAC,CACF;IACF,CAAC;IAED,OAAO,EAAE,CAAC;AACX,CAAC;AAtBD,0DAsBC;AAED,kBAAe,WAAW,CAAA","sourcesContent":["import { _word_zh_core, _word_zh_core2, zhTableAutoGreedyTable } from './conv';\nimport { IAstToStringOptions } from 'regexp-parser-literal';\nimport {\n\tINodeInput,\n\tIParserEventEmitterListener,\n\tIParserEventEmitterListenerMap,\n\tParserEventEmitter,\n\tParserEventEmitterEvent,\n} from 'regexp-parser-event';\nimport { matchRange as regexpRange } from 'regexp-range';\nimport { IOptions as IOptionsZhTable } from '@lazy-cjk/zh-table-list';\nimport { fixOptions, getSettingOptions, IGetSettingOptions } from './mergeOptions';\nimport { getRegExpSourcePattern } from './getSource';\nimport { auto as zhTableAuto } from '@lazy-cjk/zh-table-list';\nimport { astNotChanged, astOldRaw } from './plugin';\n\nexport { ParserEventEmitterEvent, ParserEventEmitter, INodeInput, IParserEventEmitterListener, IAstToStringOptions }\n\nexport { IOptionsZhTable }\n\nexport const SymDefaults = Symbol.for('zhRegExp.defaults');\n\nexport type IOptionsCore = {\n\tskip?: string,\n\tdisableZh?: boolean,\n\t/**\n\t * disableLocalRange only work when disableZh is true\n\t */\n\tdisableLocalRange?: boolean,\n\tallowLocalRangeAutoZh?: boolean,\n\t/**\n\t * 強制複寫 flags 設定\n\t * 但當使用於 zhRegExp.use 內時 則會自動被轉換為 defaultFlags\n\t */\n\tflags?: string,\n\t/**\n\t * 當沒有設定 flags 時的預設值\n\t */\n\tdefaultFlags?: string,\n\n\t/**\n\t * allow str is /a/g\n\t * @deprecated\n\t */\n\tparseRegularExpressionString?: boolean,\n\n\t/**\n\t * 讓 文字比對 更加寬鬆\n\t */\n\tgreedyTable?: boolean | number,\n\tunsafe?: boolean,\n\n\t/**\n\t * allow set `CjkConv.zhTable.auto`\n\t */\n\tzhTable?(char: string, options?: IOptionsZhTable): string[],\n\n\t/**\n\t * 用來解決插件需求\n\t */\n\tonCore?: IOptionsOnCore[],\n\n} & IAstToStringOptions;\n\nexport interface IOptionsOnCore\n{\n\t/**\n\t * 執行於分析參數後 執行 核心處理前\n\t * 回傳的物件會取代參數\n\t */\n\tbeforeStart?(opts: IGetSettingOptions<string> & {\n\t\thasFlags: boolean,\n\t}): IGetSettingOptions & {\n\t\thasFlags: boolean,\n\t};\n\n\tafterStart?(opts: IGetSettingOptions<string> & {\n\t\thasFlags: boolean,\n\t}): IGetSettingOptions & {\n\t\thasFlags: boolean,\n\t};\n}\n\nexport type IOptions<T extends INodeInput = INodeInput> = IOptionsCore & {\n\ton?: IOptionsOn<T> | IOptionsOn<T>[],\n}\n\nexport type IOptionsRuntime<T extends INodeInput = INodeInput> = IOptionsCore & {\n\ton?: IOptionsOn<T>[],\n}\n\nexport type IOptionsInput<T extends INodeInput = INodeInput> = IOptions<T> | IOptionsRuntime<T>\n\nexport interface ICoreHandlerReturn<T extends INodeInput = INodeInput>\n{\n\tsource: string,\n\tflags: string,\n\toptions: IOptionsRuntime<T>,\n}\n\n/*\nexport type IOptionsOn<T extends INodeInput = INodeInput> = {\n\t[k in ParserEventEmitterEvent]?: IParserEventEmitterListener<T, ParserEventEmitterEvent>;\n}\n */\n\nexport interface IOptionsOn<T extends INodeInput = INodeInput> extends IParserEventEmitterListenerMap<T>\n{\n\t//\n}\n\nexport type IRegExpUserInput = string | RegExp;\n\nexport function coreHandler(str: IRegExpUserInput,\n\tflags?: string,\n\toptions?: IOptionsInput | string,\n\t...argv\n): ICoreHandlerReturn\nexport function coreHandler(str: IRegExpUserInput, options?: IOptionsInput, ...argv): ICoreHandlerReturn\nexport function coreHandler(str, flags = null, options: IOptionsInput | string = {}, ...argv): ICoreHandlerReturn\n{\n\tconst opts = getSettingOptions(str, flags, options, ...argv);\n\n\tlet source: string;\n\tlet hasFlags: boolean;\n\n\t({ options, argv } = opts);\n\n\toptions = fixOptions(options);\n\n\t({ source, hasFlags, flags } = getRegExpSourcePattern(opts));\n\n\tstr = source;\n\n\tif (options.onCore)\n\t{\n\t\tlet optsNew = options.onCore.reduce((a, setting) => {\n\n\t\t\tif (!setting.beforeStart)\n\t\t\t{\n\t\t\t\treturn a\n\t\t\t}\n\n\t\t\treturn setting.beforeStart(a);\n\t\t}, {\n\t\t\tstr,\n\t\t\tflags,\n\t\t\toptions,\n\t\t\targv,\n\t\t\thasFlags,\n\t\t});\n\n\t\t({ str, options, flags, argv, hasFlags } = optsNew);\n\t}\n\n\tif ((!options.disableZh || !options.disableLocalRange || options.on))\n\t{\n\t\tlet ev = ParserEventEmitter.create(str, flags || '');\n\n\t\tconst zhTableFn = options.zhTable || (options.greedyTable ? zhTableAutoGreedyTable : zhTableAuto);\n\n\t\tif (!options.disableZh)\n\t\t{\n\t\t\tev.on(ParserEventEmitterEvent.default, function (ast)\n\t\t\t{\n\t\t\t\tastOldRaw(ast);\n\n\t\t\t\tlet raw = _word_zh_core(ast.raw, (options as IOptions).skip, zhTableFn, options as IOptions);\n\n\t\t\t\tif (ast.raw !== raw)\n\t\t\t\t{\n\t\t\t\t\tast.raw = raw;\n\t\t\t\t\tev.emit(ParserEventEmitterEvent.change, ast);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tif (!options.disableLocalRange)\n\t\t{\n\t\t\tev.on(ParserEventEmitterEvent.class_range, function (ast, ...argv)\n\t\t\t{\n\t\t\t\tlet s = ast.min.raw;\n\t\t\t\tlet e = ast.max.raw;\n\n\t\t\t\tlet ret = regexpRange(s, e, {\n\t\t\t\t\tcreateRegExpString: true,\n\t\t\t\t});\n\t\t\t\tif (ret)\n\t\t\t\t{\n\t\t\t\t\tif ((options as IOptions).allowLocalRangeAutoZh)\n\t\t\t\t\t{\n\t\t\t\t\t\tret = _word_zh_core2(ret, (options as IOptions).skip, zhTableFn, options as IOptions);\n\t\t\t\t\t}\n\n\t\t\t\t\tastOldRaw(ast);\n\n\t\t\t\t\tif (ast.raw !== ret)\n\t\t\t\t\t{\n\t\t\t\t\t\tast.raw = ret;\n\n\t\t\t\t\t\tev.emit(ParserEventEmitterEvent.change, ast);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tsetupParserEventEmitter(ev, options);\n\n\t\tev.resume();\n\n\t\tstr = ev.getSource(!!options.debugChanged\n\t\t\t|| !options.noUniqueClass\n\t\t\t|| options.sortClass\n\t\t\t, options);\n\t\tflags = hasFlags ? flags : ev.flags;\n\t}\n\n\tif (options.onCore)\n\t{\n\t\tlet optsNew = options.onCore.reduce((a, setting) => {\n\n\t\t\tif (!setting.afterStart)\n\t\t\t{\n\t\t\t\treturn a\n\t\t\t}\n\n\t\t\treturn setting.afterStart(a);\n\t\t}, {\n\t\t\tstr,\n\t\t\tflags,\n\t\t\toptions,\n\t\t\targv,\n\t\t\thasFlags,\n\t\t});\n\n\t\t({ str, options, flags, argv, hasFlags } = optsNew);\n\t}\n\n\treturn {\n\t\tsource: str,\n\t\tflags: flags || '',\n\t\toptions: options as IOptionsRuntime,\n\t}\n}\n\nexport function setupParserEventEmitter(ev: ParserEventEmitter, options: IOptionsInput)\n{\n\tconst onList = fixOptions(options).on;\n\n\tif (onList)\n\t{\n\t\tonList\n\t\t\t.forEach((conf) =>\n\t\t\t{\n\t\t\t\tObject\n\t\t\t\t\t.keys(conf)\n\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t.forEach(function (event: ParserEventEmitterEvent)\n\t\t\t\t\t{\n\t\t\t\t\t\tev.on(event, conf[event] as any)\n\t\t\t\t\t})\n\t\t\t\t;\n\t\t\t})\n\t\t;\n\t}\n\n\treturn ev;\n}\n\nexport default coreHandler\n"]}