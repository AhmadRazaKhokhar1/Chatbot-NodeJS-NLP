{"version":3,"file":"mergeOptions.js","sourceRoot":"","sources":["mergeOptions.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Created by user on 2019/6/15.\n */\n\nimport { mergeWith, isArray } from 'lodash';\nimport { IOptions, IOptionsInput, IOptionsRuntime, IRegExpUserInput, SymDefaults } from './core';\nimport { array_unique_overwrite } from 'array-hyper-unique';\nimport { INodeInput } from 'regexp-parser-event';\n\nexport function customizer<T extends any[], U extends any[]>(objValue: T, srcValue: U)\n{\n\tif (isArray(objValue))\n\t{\n\t\treturn objValue.concat(srcValue) as [...T, ...U];\n\t}\n}\n\nexport interface IGetSettingOptions<S extends IRegExpUserInput = IRegExpUserInput>\n{\n\tstr: S;\n\tflags: string;\n\toptions: IOptionsInput;\n\targv: any[];\n}\n\nexport function getSettingOptions<S extends IRegExpUserInput = IRegExpUserInput>(str: S, flags: IOptionsInput | string = null, options: IOptionsInput | string = {}, ...argv): IGetSettingOptions<S>\n{\n\tif (flags !== null && typeof flags == 'object')\n\t{\n\t\toptions = Object.assign({}, flags) as IOptions;\n\t\tflags = (options.flags || null) as string;\n\t}\n\n\tif (typeof options == 'string')\n\t{\n\t\toptions = {\n\t\t\tskip: options,\n\t\t} as IOptions;\n\t}\n\n\tif (typeof options.flags == 'string')\n\t{\n\t\tflags = options.flags;\n\t}\n\n\treturn {\n\t\tstr,\n\t\tflags: flags as string,\n\t\toptions,\n\t\targv,\n\t}\n}\n\n/**\n * for `zhRegExp.use` only\n */\nexport function mergeOptions2<T extends INodeInput = INodeInput>(base: IOptionsInput<T> = {} as IOptionsInput<T>,\n\t...opts: IOptionsInput<T>[]\n): IOptionsRuntime<T>\n{\n\tlet ret = mergeOptions(base, ...opts);\n\n\tif (typeof ret.flags === 'string')\n\t{\n\t\tret.defaultFlags = ret.flags;\n\t\tdelete ret.flags;\n\t}\n\n\treturn ret;\n}\n\nexport function mergeOptions<T extends INodeInput = INodeInput>(base: IOptionsInput<T> = {} as IOptionsInput<T>,\n\t...opts: IOptionsInput<T>[]\n): IOptionsRuntime<T>\n{\n\tlet arr = [base || {}]\n\t\t.concat(opts)\n\t\t.filter(o => o)\n\t;\n\n\tif (arr.length > 1)\n\t{\n\t\t// @ts-ignore\n\t\tbase = mergeWith(...(arr.map(o =>\n\t\t{\n\t\t\treturn fixOptions(o);\n\t\t\t// @ts-ignore\n\t\t})), customizer);\n\t}\n\n\treturn fixOptions(base);\n}\n\n/*\nexport function MergeDefaultOptions(target: typeof zhRegExp): typeof zhRegExp\n{\n\tconst zhRegExpNew = class zhRegExp extends target\n\t{\n\t\tconstructor(...args: [any, ...any[]])\n\t\t{\n\t\t\tlet { str, flags, options, argv } = getSettingOptions(...args);\n\n\t\t\toptions = mergeOptions({}, zhRegExpNew[SymDefaults], options);\n\n\t\t\tsuper(str, flags, options, ...argv)\n\t\t}\n\t};\n\n\treturn zhRegExpNew\n}\n */\n\nexport function fixOptions<T extends INodeInput = INodeInput>(options?: IOptionsInput<T>, removeEmptyOn?: boolean): IOptionsRuntime<T>\n{\n\tif (options.on)\n\t{\n\t\tif (Array.isArray(options.on))\n\t\t{\n\t\t\tarray_unique_overwrite(options.on);\n\t\t}\n\t\telse\n\t\t{\n\t\t\toptions.on = [options.on];\n\t\t}\n\n\t\toptions.on = options.on.filter(v => v);\n\n\t\tif (removeEmptyOn && !options.on.length)\n\t\t{\n\t\t\tdelete options.on;\n\t\t}\n\t}\n\n\tif (removeEmptyOn && options.onCore)\n\t{\n\t\tif (!options.onCore.length)\n\t\t{\n\t\t\tdelete options.onCore;\n\t\t}\n\t}\n\n\t// @ts-ignore\n\treturn options\n}\n\nexport default mergeOptions\n"]}