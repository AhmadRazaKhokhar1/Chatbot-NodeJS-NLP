{"version":3,"file":"getSource.js","sourceRoot":"","sources":["getSource.ts"],"names":[],"mappings":";;;AAEA,SAAgB,4BAA4B,CAAC,GAAW;IAEvD,MAAM,CAAC,GAAG,4BAA4B,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACjD,IAAI,CAAC,EACL,CAAC;QACA,MAAM,CAAC,KAAK,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC;QAE3B,OAAO;YACN,MAAM,EAAE,OAAO,CAAC,KAAK,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;YACzC,KAAK,EAAE,OAAO,CAAC,KAAK,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;YACxC,KAAK;YACL,KAAK,EAAE,GAAG;SACV,CAAC;IACH,CAAC;IAED,OAAO,IAAI,CAAC;AACb,CAAC;AAhBD,oEAgBC;AAED,SAAgB,sBAAsB,CAAC,IAAwB;IAE9D,MAAM,EAAE,GAAG,EAAE,OAAO,EAAE,GAAG,IAAI,CAAC;IAC9B,MAAM,EAAE,YAAY,EAAE,GAAG,OAAO,CAAC;IAEjC,MAAM,QAAQ,GAAG,OAAO,IAAI,CAAC,KAAK,IAAI,QAAQ,CAAC;IAE/C,IAAI,MAAc,CAAC;IACnB,IAAI,KAAa,CAAC;IAElB,IAAI,GAAG,YAAY,MAAM,EACzB,CAAC;QACA,CAAC,EAAE,MAAM,EAAE,KAAK,EAAE,GAAG,GAAG,CAAC,CAAC;IAC3B,CAAC;SACI,IAAI,OAAO,GAAG,KAAK,QAAQ,EAChC,CAAC;QACA,IAAI,GAAG,GAAG,IAAI,CAAC;QAEf,IAAI,OAAO,CAAC,4BAA4B,EACxC,CAAC;YACA,IAAI,CAAC,GAAG,4BAA4B,CAAC,GAAG,CAAC,CAAC;YAE1C,IAAI,CAAC,EACL,CAAC;gBACA,MAAM,GAAG,CAAC,CAAC,MAAM,CAAC;gBAClB,KAAK,GAAG,CAAC,CAAC,KAAK,CAAC;gBAEhB,GAAG,GAAG,KAAK,CAAC;YACb,CAAC;QACF,CAAC;QAED,IAAI,GAAG,EACP,CAAC;YACA,MAAM,GAAG,GAAG,CAAC;QACd,CAAC;IACF,CAAC;SAED,CAAC;QACA,MAAM,IAAI,SAAS,CAAC,iDAAiD,GAAG,YAAY,OAAO,GAAG,EAAE,CAAC,CAAA;IAClG,CAAC;IAED,IAAI,OAAO,MAAM,KAAK,QAAQ,EAC9B,CAAC;QACA,MAAM,IAAI,SAAS,CAAC,uCAAuC,MAAM,YAAY,OAAO,MAAM,EAAE,CAAC,CAAA;IAC9F,CAAC;IAED,KAAK,GAAG,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC;IAEtC,IAAI,YAAY,IAAI,CAAC,KAAK,IAAI,IAAI,IAAI,KAAK,KAAK,EAAE,CAAC,EACnD,CAAC;QACA,KAAK,GAAG,YAAY,CAAC;IACtB,CAAC;IAED,OAAO;QACN,MAAM;QACN,KAAK;QACL,QAAQ;KACR,CAAA;AACF,CAAC;AA1DD,wDA0DC;AAED,kBAAe,sBAAsB,CAAA","sourcesContent":["import { IGetSettingOptions } from './mergeOptions';\n\nexport function parseRegularExpressionString(str: string)\n{\n\tconst m = /^([\\/#$%])(.+?)\\1([a-z]*)$/.exec(str);\n\tif (m)\n\t{\n\t\tconst [slash, d, r, f] = m;\n\n\t\treturn {\n\t\t\tsource: typeof r !== 'undefined' ? r : '',\n\t\t\tflags: typeof f !== 'undefined' ? f : '',\n\t\t\tslash,\n\t\t\tinput: str,\n\t\t};\n\t}\n\n\treturn null;\n}\n\nexport function getRegExpSourcePattern(opts: IGetSettingOptions)\n{\n\tconst { str, options } = opts;\n\tconst { defaultFlags } = options;\n\n\tconst hasFlags = typeof opts.flags == 'string';\n\n\tlet source: string;\n\tlet flags: string;\n\n\tif (str instanceof RegExp)\n\t{\n\t\t({ source, flags } = str);\n\t}\n\telse if (typeof str === 'string')\n\t{\n\t\tlet _do = true;\n\n\t\tif (options.parseRegularExpressionString)\n\t\t{\n\t\t\tlet m = parseRegularExpressionString(str);\n\n\t\t\tif (m)\n\t\t\t{\n\t\t\t\tsource = m.source;\n\t\t\t\tflags = m.flags;\n\n\t\t\t\t_do = false;\n\t\t\t}\n\t\t}\n\n\t\tif (_do)\n\t\t{\n\t\t\tsource = str;\n\t\t}\n\t}\n\telse\n\t{\n\t\tthrow new TypeError(`expected source is string or RegExp, but got '${str}', type: ${typeof str}`)\n\t}\n\n\tif (typeof source !== 'string')\n\t{\n\t\tthrow new TypeError(`expected source is string, but got '${source}', type: ${typeof source}`)\n\t}\n\n\tflags = hasFlags ? opts.flags : flags;\n\n\tif (defaultFlags && (flags == null || flags === ''))\n\t{\n\t\tflags = defaultFlags;\n\t}\n\n\treturn {\n\t\tsource,\n\t\tflags,\n\t\thasFlags,\n\t}\n}\n\nexport default getRegExpSourcePattern\n"]}