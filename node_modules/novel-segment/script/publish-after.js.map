{"version":3,"file":"publish-after.js","sourceRoot":"","sources":["publish-after.ts"],"names":[],"mappings":";AAAA;;GAEG;;;AAEH,mDAA6B;AAC7B,+EAA8C;AAC9C,aAAa;AACb,qEAA+C;AAE/C,qCAAqC;AACrC,kCAAmC;AAGnC,CAAC,KAAK,IAAI,EAAE;IAEX,IAAI,UAA6B,CAAC;IAClC,aAAa;IACb,UAAU,GAAG,gEAAa,mBAAmB,GAAC,CAAC;IAE/C,IAAI,OAAe,CAAC;IAEpB,aAAa;IACb,OAAO,GAAG,MAAM,0DAAO,WAAW,IAAE,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;IACtD,aAAa;IACb,OAAO,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC;IAE7B,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,wBAAa,CAAC,YAAY,CAAC,EAClE,CAAC;QACA,OAAO,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;QAC9B,OAAO;IACR,CAAC;IAED,IAAI,OAAO,GAAG;QACb,GAAG,EAAE,wBAAa,CAAC,YAAY;QAC/B,KAAK,EAAE,SAAS;KAChB,CAAC;IAEF,IAAI,GAAG,GAAG,eAAe,WAAW,CAAC,OAAO,EAAE,CAAC;IAE/C,GAAG,IAAI,qBAAqB,KAAK,CAAC,QAAQ,CAAC,eAAe,CAAC,kBAAkB,KAAK,CAAC,QAAQ,CAAC,cAAc,CAAC,cAAc,KAAK,CAAC,QAAQ,CAAC,UAAU,CAAC,gBAAgB,KAAK,CAAC,QAAQ,CAAC,YAAY,CAAC,EAAE,CAAC;IAElM,MAAM,UAAU,CAAC,KAAK,EAAE;QACvB,QAAQ;QACR,IAAI;QACJ,IAAI;QACJ,GAAG;KACH,EAAE,OAAO,CAAC,CAAC;IAEZ,MAAM,IAAI,OAAO,CAAC,UAAU,IAAI;QAE/B,UAAU,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;IACvB,CAAC,CAAC,CAAC;IAEH,MAAM,UAAU,CAAC,KAAK,EAAE;QACvB,KAAK;QACL,IAAI;QACJ,WAAW,CAAC,OAAO;QACnB,IAAI;QACJ,GAAG;KACH,EAAE,OAAO,CAAC,CAAC;AAEb,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC","sourcesContent":["/**\n * Created by user on 2018/7/24/024.\n */\n\nimport * as path from 'path';\nimport ProjectConfig from '../project.config';\n// @ts-ignore\nimport * as PackageJson from '../package.json';\nimport CrossSpawn = require('cross-spawn-extra');\n/// <reference types=\"cross-spawn\" />\nimport index = require('../index');\nimport { sync } from 'git-root2/core';\n\n(async () =>\n{\n\tlet crossSpawn: typeof CrossSpawn;\n\t// @ts-ignore\n\tcrossSpawn = await import('cross-spawn-extra');\n\n\tlet gitroot: string;\n\n\t// @ts-ignore\n\tgitroot = await import('git-root2').then(m => m.sync);\n\t// @ts-ignore\n\tgitroot = gitroot(__dirname);\n\n\tif (!gitroot || path.relative(gitroot, ProjectConfig.project_root))\n\t{\n\t\tconsole.warn(`no git exists`);\n\t\treturn;\n\t}\n\n\tlet options = {\n\t\tcwd: ProjectConfig.project_root,\n\t\tstdio: 'inherit',\n\t};\n\n\tlet msg = `npm publish ${PackageJson.version}`;\n\n\tmsg += `\\n\\nnovel-segment@${index.versions['novel-segment']}, segment-dict@${index.versions['segment-dict']}, cjk-conv@${index.versions['cjk-conv']}, regexp-cjk@${index.versions['regexp-cjk']}`;\n\n\tawait crossSpawn('git', [\n\t\t'commit',\n\t\t'-a',\n\t\t'-m',\n\t\tmsg,\n\t], options);\n\n\tawait new Promise(function (done)\n\t{\n\t\tsetTimeout(done, 500);\n\t});\n\n\tawait crossSpawn('git', [\n\t\t'tag',\n\t\t'-a',\n\t\tPackageJson.version,\n\t\t'-m',\n\t\tmsg,\n\t], options);\n\n})().catch(e => console.error(e));\n"]}