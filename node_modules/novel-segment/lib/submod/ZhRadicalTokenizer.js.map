{"version":3,"file":"ZhRadicalTokenizer.js","sourceRoot":"","sources":["ZhRadicalTokenizer.ts"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;AAEb,gCAAkE;AAGlE;;;;GAIG;AACH,MAAa,kBAAmB,SAAQ,yBAAmB;IAA3D;;QAGU,SAAI,GAAG,oBAAoB,CAAC;IAsDtC,CAAC;IAjDmB,MAAM,CAAC,GAAG,IAAI;QAEhC,KAAK,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC,CAAC;IACvB,CAAC;IAED,KAAK,CAAC,KAAc;QAEnB,OAAO,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC;IACrD,CAAC;IAED,cAAc,CAAC,IAAY,EAAE,GAAY;QAExC,IAAI,GAAG,GAAY,EAAE,CAAC;QACtB,IAAI,IAAI,GAAG,IAAI,CAAC;QAEhB,IAAI,EAAE,GAAG,iBAAiB,CAAC;QAE3B,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,EAClB,CAAC;YACA,OAAO,IAAI,CAAC;QACb,CAAC;QAED,IAAI;aACF,KAAK,CAAC,oBAAoB,CAAC;aAC3B,OAAO,CAAC,UAAU,CAAC,EAAE,CAAC;YAEtB,IAAI,CAAC,KAAK,EAAE,EACZ,CAAC;gBACA,IAAI,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,EACd,CAAC;oBACA,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC;wBACxB,CAAC;qBACD,EAAE;wBACF,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,IAAI;qBACjB,EAAE,IAAI,CAAC,CAAC,CAAC;gBACX,CAAC;qBAED,CAAC;oBACA,GAAG,CAAC,IAAI,CAAC;wBACR,CAAC;qBACD,CAAC,CAAC;gBACJ,CAAC;YACF,CAAC;QACF,CAAC,CAAC,CACF;QAED,OAAO,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC;IAChC,CAAC;CAED;AAzDD,gDAyDC;AAEY,QAAA,IAAI,GAAG,kBAAkB,CAAC,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAA4C,CAAC;AAEnG,QAAA,IAAI,GAAG,kBAAkB,CAAC,IAAI,CAAC;AAE5C,kBAAe,kBAAkB,CAAC","sourcesContent":["'use strict';\n\nimport { ISubTokenizerCreate, SubSModuleTokenizer } from '../mod';\nimport { IDICT, IDICT2, IWord } from '../Segment';\n\n/**\n * 此模組目前無任何用處與效果\n *\n * @todo 部首\n */\nexport class ZhRadicalTokenizer extends SubSModuleTokenizer\n{\n\n\toverride name = 'ZhRadicalTokenizer';\n\n\tprotected override _TABLE: IDICT<IWord>;\n\tprotected _TABLE2: IDICT2<IWord>;\n\n\tprotected override _cache(...argv)\n\t{\n\t\tsuper._cache(...argv);\n\t}\n\n\tsplit(words: IWord[]): IWord[]\n\t{\n\t\treturn this._splitUnset(words, this.splitZhRadical);\n\t}\n\n\tsplitZhRadical(text: string, cur?: number): IWord[]\n\t{\n\t\tlet ret: IWord[] = [];\n\t\tlet self = this;\n\n\t\tlet _r = /[\\u4136\\u4137]/u;\n\n\t\tif (!_r.test(text))\n\t\t{\n\t\t\treturn null;\n\t\t}\n\n\t\ttext\n\t\t\t.split(/([\\u4136\\u4137]+)/u)\n\t\t\t.forEach(function (w, i)\n\t\t\t{\n\t\t\t\tif (w !== '')\n\t\t\t\t{\n\t\t\t\t\tif (_r.test(w))\n\t\t\t\t\t{\n\t\t\t\t\t\tret.push(self.debugToken({\n\t\t\t\t\t\t\tw,\n\t\t\t\t\t\t}, {\n\t\t\t\t\t\t\t[self.name]: true,\n\t\t\t\t\t\t}, true));\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tret.push({\n\t\t\t\t\t\t\tw,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t;\n\n\t\treturn ret.length ? ret : null;\n\t}\n\n}\n\nexport const init = ZhRadicalTokenizer.init.bind(ZhRadicalTokenizer) as ISubTokenizerCreate<ZhRadicalTokenizer>;\n\nexport const type = ZhRadicalTokenizer.type;\n\nexport default ZhRadicalTokenizer;\n"]}