{"version":3,"file":"URLTokenizer.js","sourceRoot":"","sources":["URLTokenizer.ts"],"names":[],"mappings":";;;AAEA;;;;GAIG;AAEH;;KAEK;AACQ,QAAA,IAAI,GAAG,WAAW,CAAA;AAI/B;;;;GAIG;AACH,SAAgB,IAAI,CAAC,QAAiB;IAErC,eAAO,GAAG,QAAQ,CAAC;AACpB,CAAC;AAHD,oBAGC;AAED;;;;;GAKG;AACH,SAAgB,KAAK,CAAC,KAAc;IAEnC,MAAM,MAAM,GAAG,eAAO,CAAC,MAAM,CAAC;IAC9B,MAAM,GAAG,GAAY,EAAE,CAAC;IAExB,KAAK,IAAI,IAAI,IAAI,KAAK,EACtB,CAAC;QACA,IAAI,IAAI,CAAC,CAAC,GAAG,CAAC,EACd,CAAC;YACA,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACf,SAAS;QACV,CAAC;QACD,cAAc;QACd,MAAM,OAAO,GAAG,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACjC,IAAI,OAAO,CAAC,MAAM,GAAG,CAAC,EACtB,CAAC;YACA,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACf,SAAS;QACV,CAAC;QACD,SAAS;QACT,IAAI,KAAK,GAAG,CAAC,CAAC;QACd,KAAK,IAAI,GAAG,IAAI,OAAO,EACvB,CAAC;YACA,IAAI,GAAG,CAAC,CAAC,GAAG,KAAK,EACjB,CAAC;gBACA,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,EAAE,CAAC,CAAC;YACtD,CAAC;YACD,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,MAAM,CAAC,GAAG,EAAE,CAAC,CAAC;YACtC,KAAK,GAAG,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,MAAM,CAAC;QAC9B,CAAC;QACD,MAAM,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QAC5C,IAAI,OAAO,CAAC,CAAC,GAAG,OAAO,CAAC,CAAC,CAAC,MAAM,GAAG,IAAI,CAAC,CAAC,CAAC,MAAM,EAChD,CAAC;YACA,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,GAAG,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;QAC9D,CAAC;IACF,CAAC;IACD,cAAc;IACd,OAAO,GAAG,CAAC;AACZ,CAAC;AAtCD,sBAsCC;AAED;;GAEG;AACH,MAAM,QAAQ,GAAG,CAAC,SAAS,EAAE,UAAU,EAAE,QAAQ,EAAE,SAAS,EAAE,WAAW,CAAC,CAAC;AAE3E;;GAEG;AACH,IAAI,gBAAgB,GAAG,GAAG,CAAC;AAE3B,KAAK,IAAI,CAAC,IAAI,QAAQ,EACtB,CAAC;IACA,IAAI,QAAQ,CAAC,CAAC,CAAC,CAAC,MAAM,GAAG,gBAAgB,EACzC,CAAC;QACA,gBAAgB,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC;IACvC,CAAC;AACF,CAAC;AAED;;GAEG;AACH,MAAM,OAAO,GAAG;IACfvB,OAAO,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC;IAElB,OAAO,OAAO,CAAA;AACf,CAAC,EAAE,EAA6B,CAAC,CAAC;AAElC;;;;;;GAMG;AACH,SAAgB,QAAQ,CAAC,IAAY,EAAE,GAAY;IAElD,IAAI,KAAK,CAAC,GAAG,CAAC;QAAE,GAAG,GAAG,CAAC,CAAC;IACxB,MAAM,GAAG,GAAG,EAAE,CAAC;IACf,IAAI,CAAC,GAAW,IAAI,CAAC;IACrB,OAAO,GAAG,GAAG,IAAI,CAAC,MAAM,EACxB,CAAC;QACA,wBAAwB;QACxB,IAAI,CAAC,KAAK,IAAI,IAAI,GAAG,GAAG,IAAI,CAAC,MAAM,GAAG,gBAAgB,EACtD,CAAC;YACA,KAAK,IAAI,IAAI,IAAI,QAAQ,EACzB,CAAC;gBACA,IAAI,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,IAAI,CAAC,MAAM,CAAC,KAAK,IAAI,EAC1C,CAAC;oBACA,CAAC,GAAG,GAAG,CAAC;oBACR,GAAG,IAAI,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC;oBACvB,MAAM;gBACP,CAAC;YACF,CAAC;QACF,CAAC;aACI,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,OAAO,CAAC,EACrD,CAAC;YACA,+BAA+B;YAC/B,GAAG,CAAC,IAAI,CAAC;gBACR,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE,GAAG,GAAG,CAAC,CAAC;gBAC1B,CAAC,EAAE,CAAC;aACJ,CAAC,CAAC;YACH,CAAC,GAAG,IAAI,CAAC;QACV,CAAC;QACD,GAAG,EAAE,CAAC;IACP,CAAC;IACD,SAAS;IACT,IAAI,CAAC,KAAK,IAAI,EACd,CAAC;QACA,GAAG,CAAC,IAAI,CAAC;YACR,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE,GAAG,GAAG,CAAC,CAAC;YAC1B,CAAC,EAAE,CAAC;SACJ,CAAC,CAAC;IACJ,CAAC;IAED,OAAO,GAAG,CAAC;AACZ,CAAC;AAzCD,4BAyCC;AAED,+EAA+E","sourcesContent":["import Segment, { IWord } from '../Segment';\n\n/**\n * URL识别模块\n *\n * @author 老雷<leizongmin@gmail.com>\n */\n\n/**\n * 模块类型\n * */\nexport const type = 'tokenizer'\n\nexport let segment: Segment;\n\n/**\n * 模块初始化\n *\n * @param {Segment} segment 分词接口\n */\nexport function init(_segment: Segment)\n{\n\tsegment = _segment;\n}\n\n/**\n * 对未识别的单词进行分词\n *\n * @param {array} words 单词数组\n * @return {array}\n */\nexport function split(words: IWord[]): IWord[]\n{\n\tconst POSTAG = segment.POSTAG;\n\tconst ret: IWord[] = [];\n\n\tfor (let word of words)\n\t{\n\t\tif (word.p > 0)\n\t\t{\n\t\t\tret.push(word);\n\t\t\tcontinue;\n\t\t}\n\t\t// 仅对未识别的词进行匹配\n\t\tconst urlinfo = matchURL(word.w);\n\t\tif (urlinfo.length < 1)\n\t\t{\n\t\t\tret.push(word);\n\t\t\tcontinue;\n\t\t}\n\t\t// 分离出URL\n\t\tlet lastc = 0;\n\t\tfor (let url of urlinfo)\n\t\t{\n\t\t\tif (url.c > lastc)\n\t\t\t{\n\t\t\t\tret.push({ w: word.w.substr(lastc, url.c - lastc) });\n\t\t\t}\n\t\t\tret.push({ w: url.w, p: POSTAG.URL });\n\t\t\tlastc = url.c + url.w.length;\n\t\t}\n\t\tconst lasturl = urlinfo[urlinfo.length - 1];\n\t\tif (lasturl.c + lasturl.w.length < word.w.length)\n\t\t{\n\t\t\tret.push({ w: word.w.substr(lasturl.c + lasturl.w.length) });\n\t\t}\n\t}\n\t// debug(ret);\n\treturn ret;\n}\n\n/**\n * 协议URL头\n */\nconst PROTOTAL = ['http://', 'https://', 'ftp://', 'news://', 'telnet://'];\n\n/**\n * 协议头最小长度\n */\nlet MIN_PROTOTAL_LEN = 100;\n\nfor (let i in PROTOTAL)\n{\n\tif (PROTOTAL[i].length < MIN_PROTOTAL_LEN)\n\t{\n\t\tMIN_PROTOTAL_LEN = PROTOTAL[i].length;\n\t}\n}\n\n/**\n * 允许出现在URL中的字符\n */\nconst URLCHAR = [\n\t'a',\n\t'b',\n\t'c',\n\t'd',\n\t'e',\n\t'f',\n\t'g',\n\t'h',\n\t'i',\n\t'j',\n\t'k',\n\t'l',\n\t'm',\n\t'n',\n\t'o',\n\t'p',\n\t'q',\n\t'r',\n\t's',\n\t't',\n\t'u',\n\t'v',\n\t'w',\n\t'x',\n\t'y',\n\t'z',\n\t'A',\n\t'B',\n\t'C',\n\t'D',\n\t'E',\n\t'F',\n\t'G',\n\t'H',\n\t'I',\n\t'J',\n\t'K',\n\t'L',\n\t'M',\n\t'N',\n\t'O',\n\t'P',\n\t'Q',\n\t'R',\n\t'S',\n\t'T',\n\t'U',\n\t'V',\n\t'W',\n\t'X',\n\t'Y',\n\t'Z',\n\t'0',\n\t'1',\n\t'2',\n\t'3',\n\t'4',\n\t'5',\n\t'6',\n\t'7',\n\t'8',\n\t'9',\n\t'!',\n\t'#',\n\t'$',\n\t'%',\n\t'&',\n\t'‘',\n\t'(',\n\t')',\n\t'*',\n\t'+',\n\t',',\n\t'-',\n\t'.',\n\t'/',\n\t':',\n\t';',\n\t'=',\n\t'?',\n\t'@',\n\t'[',\n\t'\\\\',\n\t']',\n\t'^',\n\t'_',\n\t'`',\n\t'|',\n\t'~',\n].reduce((URLCHAR, c) => {\n\n\tURLCHAR[c] = true;\n\n\treturn URLCHAR\n}, {} as Record<string, boolean>);\n\n/**\n * 匹配包含的网址，返回相关信息\n *\n * @param {string} text 文本\n * @param {int} cur 开始位置\n * @return {array}  返回格式   {w: '网址', c: 开始位置}\n */\nexport function matchURL(text: string, cur?: number)\n{\n\tif (isNaN(cur)) cur = 0;\n\tconst ret = [];\n\tlet s: number = null;\n\twhile (cur < text.length)\n\t{\n\t\t// 判断是否为 http:// 之类的文本开头\n\t\tif (s === null && cur < text.length - MIN_PROTOTAL_LEN)\n\t\t{\n\t\t\tfor (let prot of PROTOTAL)\n\t\t\t{\n\t\t\t\tif (text.substr(cur, prot.length) === prot)\n\t\t\t\t{\n\t\t\t\t\ts = cur;\n\t\t\t\t\tcur += prot.length - 1;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if (s !== null && !(text.charAt(cur) in URLCHAR))\n\t\t{\n\t\t\t// 如果以http://之类开头，遇到了非URL字符，则结束\n\t\t\tret.push({\n\t\t\t\tw: text.substr(s, cur - s),\n\t\t\t\tc: s,\n\t\t\t});\n\t\t\ts = null;\n\t\t}\n\t\tcur++;\n\t}\n\t// 检查剩余部分\n\tif (s !== null)\n\t{\n\t\tret.push({\n\t\t\tw: text.substr(s, cur - s),\n\t\t\tc: s,\n\t\t});\n\t}\n\n\treturn ret;\n}\n\n// debug(matchURL('http://www.baidu.com哈啊http://哇fdgggghttp://baidu.com/ss/'));\n"]}