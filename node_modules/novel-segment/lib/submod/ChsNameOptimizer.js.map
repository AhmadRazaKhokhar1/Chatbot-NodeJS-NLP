{"version":3,"file":"ChsNameOptimizer.js","sourceRoot":"","sources":["ChsNameOptimizer.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * 人名优化模块\n *\n * @author 老雷<leizongmin@gmail.com>\n * @version 0.1\n */\n\n'use strict';\n\nimport { SubSModuleOptimizer } from '../mod';\nimport {\n\tDOUBLE_NAME_1,\n\tDOUBLE_NAME_2,\n\tFAMILY_NAME_1,\n\tFAMILY_NAME_2,\n\tSINGLE_NAME,\n\tSINGLE_NAME_NO_REPEAT,\n} from '../mod/CHS_NAMES';\nimport { IDICT, IWord } from '../Segment';\nimport { EnumDictDatabase } from '@novel-segment/types';\n\n/**\n * @todo 支援 XX氏\n */\nexport class ChsNameOptimizer extends SubSModuleOptimizer\n{\n\tprotected override _TABLE: IDICT<IWord>;\n\n\toverride name = 'ChsNameOptimizer';\n\n\toverride _cache()\n\t{\n\t\tsuper._cache();\n\n\t\tthis._TABLE = this.segment.getDict('TABLE');\n\n\t\tthis._BLACKLIST = this.segment.getDict(EnumDictDatabase.BLACKLIST_FOR_OPTIMIZER) || {};\n\t}\n\n\tisBlackList(nw: string)\n\t{\n\t\treturn nw in this._BLACKLIST\n\t}\n\n\tisMergeable2(...words: string[])\n\t{\n\t\tlet nw = words.join('');\n\n\t\tif (!this.isBlackList(nw))\n\t\t{\n\t\t\treturn true;\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tisMergeable(word: IWord, nextword: IWord)\n\t{\n\t\tif (word && nextword)\n\t\t{\n\t\t\tlet nw = word.w + nextword.w;\n\n\t\t\t/**\n\t\t\t * 不合併存在於 BLACKLIST 內的字詞\n\t\t\t */\n\t\t\tif (!this.isBlackList(nw))\n\t\t\t{\n\t\t\t\treturn true;\n\n\t\t\t\t/*\n\t\t\t\treturn {\n\t\t\t\t\tword,\n\t\t\t\t\tnextword,\n\t\t\t\t\tnw,\n\t\t\t\t\tbool: true,\n\t\t\t\t}\n\t\t\t\t*/\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * 只有新詞屬於人名或未知詞時才會合併\n\t */\n\tvalidUnknownNewWord<W extends string | string[]>(ws: W, cb?: (nw: string, ew: IWord, ws: W) => IWord | boolean | void)\n\t{\n\t\tlet nw = typeof ws === 'string' ? ws : (ws as string[]).join('');\n\t\tlet ew = this._TABLE[nw];\n\n\t\tif (!ew?.p || ew.p & this._POSTAG.A_NR)\n\t\t{\n\t\t\tlet ret = cb?.(nw, ew, ws) ?? true\n\n\t\t\tif (ret)\n\t\t\t{\n\t\t\t\treturn typeof ret === 'object' ? ret : (ew ?? true)\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * 姓\n\t */\n\tisFamilyName(w: string)\n\t{\n\t\treturn w in FAMILY_NAME_1 || w in FAMILY_NAME_2\n\t}\n\n\t/**\n\t * 双字姓名\n\t */\n\tisDoubleName(w1: string, w2: string)\n\t{\n\t\treturn w1 in DOUBLE_NAME_1 && w2 in DOUBLE_NAME_2\n\t}\n\n\tisSingleNameRepeat(w1: string, w2: string)\n\t{\n\t\treturn this.isSingleNameNoRepeat(w1) && this.isSingleName(w1) && w2 === w1\n\t}\n\n\t/**\n\t * 单字姓名\n\t */\n\tisSingleName(w1: string)\n\t{\n\t\treturn w1 in SINGLE_NAME\n\t}\n\n\t/**\n\t * 单字姓名 不重覆\n\t */\n\tisSingleNameNoRepeat(w1: string)\n\t{\n\t\treturn w1 in SINGLE_NAME_NO_REPEAT\n\t}\n\n\tisFirstName(w1: string, w2: string)\n\t{\n\t\treturn this.isSingleNameRepeat(w1, w2)\n\t\t\t|| this.isDoubleName(w1, w2)\n\t}\n\n\t/**\n\t * 对可能是人名的单词进行优化\n\t *\n\t * @param {array} words 单词数组\n\t * @return {array}\n\t */\n\toverride doOptimize(words: IWord[]): IWord[]\n\t{\n\t\t//debug(words);\n\t\tconst POSTAG = this._POSTAG;\n\t\tlet i = 0;\n\n\t\t/* 第一遍扫描 */\n\t\twhile (i < words.length)\n\t\t{\n\t\t\tlet word = words[i];\n\t\t\tlet nextword = words[i + 1];\n\n\t\t\tif (this.isMergeable(word, nextword) && this.validUnknownNewWord(word.w + nextword.w))\n\t\t\t{\n\t\t\t\tlet nw = word.w + nextword.w;\n\n\t\t\t\tlet nextword2 = words[i + 2];\n\n\t\t\t\tif (nextword2?.w?.length <= 2 && word.w !== '于' && !(nextword2.p & this._POSTAG.D_P) && this.isFamilyName(word.w) && this.isFirstName(nextword.w, nextword2.w) && !this.isBlackList(nw + nextword2.w))\n\t\t\t\t{\n\n\t\t\t\t\tthis.sliceToken(words, i, 3, {\n\t\t\t\t\t\tw: nw + nextword2.w,\n\t\t\t\t\t\tp: POSTAG.A_NR,\n\t\t\t\t\t\tm: [word, nextword, nextword2],\n\t\t\t\t\t}, undefined, {\n\t\t\t\t\t\t[this.name]: 7,\n\t\t\t\t\t});\n\n\t\t\t\t\ti += 2;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t//debug(nextword);\n\t\t\t\t// 如果为  \"小|老\" + 姓\n\t\t\t\tif (\n\t\t\t\t\t(word.w === '小' || word.w === '老')\n\t\t\t\t\t&& this.isFamilyName(nextword.w)\n\t\t\t\t)\n\t\t\t\t{\n\t\t\t\t\t/*\n\t\t\t\t\twords.splice(i, 2, {\n\t\t\t\t\t\tw: word.w + nextword.w,\n\t\t\t\t\t\tp: POSTAG.A_NR,\n\t\t\t\t\t\tm: [word, nextword],\n\t\t\t\t\t});\n\t\t\t\t\t*/\n\n\t\t\t\t\tthis.sliceToken(words, i, 2, {\n\t\t\t\t\t\tw: nw,\n\t\t\t\t\t\tp: POSTAG.A_NR,\n\t\t\t\t\t\tm: [word, nextword],\n\t\t\t\t\t}, undefined, {\n\t\t\t\t\t\t[this.name]: 1,\n\t\t\t\t\t});\n\n\t\t\t\t\ti++;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// 如果是 姓 + 名（2字以内）\n\t\t\t\tif (this.isFamilyName(word.w)\n\t\t\t\t\t&& ((nextword.p & POSTAG.A_NR) > 0 && nextword.w.length <= 2))\n\t\t\t\t{\n\t\t\t\t\t/*\n\t\t\t\t\twords.splice(i, 2, {\n\t\t\t\t\t\tw: word.w + nextword.w,\n\t\t\t\t\t\tp: POSTAG.A_NR,\n\t\t\t\t\t\tm: [word, nextword],\n\t\t\t\t\t});\n\t\t\t\t\t*/\n\n\t\t\t\t\tthis.sliceToken(words, i, 2, {\n\t\t\t\t\t\tw: nw,\n\t\t\t\t\t\tp: POSTAG.A_NR,\n\t\t\t\t\t\tm: [word, nextword],\n\t\t\t\t\t}, undefined, {\n\t\t\t\t\t\t[this.name]: 2,\n\t\t\t\t\t});\n\n\t\t\t\t\ti++;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// 如果相邻两个均为单字且至少有一个字是未识别的，则尝试判断其是否为人名\n\t\t\t\tif (!word.p || !nextword.p)\n\t\t\t\t{\n\t\t\t\t\tif (this.isFirstName(word.w, nextword.w))\n\t\t\t\t\t{\n\t\t\t\t\t\t/*\n\t\t\t\t\t\twords.splice(i, 2, {\n\t\t\t\t\t\t\tw: word.w + nextword.w,\n\t\t\t\t\t\t\tp: POSTAG.A_NR,\n\t\t\t\t\t\t\tm: [word, nextword],\n\t\t\t\t\t\t});\n\t\t\t\t\t\t*/\n\n\t\t\t\t\t\tthis.sliceToken(words, i, 2, {\n\t\t\t\t\t\t\tw: nw,\n\t\t\t\t\t\t\tp: POSTAG.A_NR,\n\t\t\t\t\t\t\tm: [word, nextword],\n\t\t\t\t\t\t}, undefined, {\n\t\t\t\t\t\t\t[this.name]: 3,\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\t// 如果上一个单词可能是一个姓，则合并\n\t\t\t\t\t\tlet preword = words[i - 1];\n\t\t\t\t\t\tif (preword?.w?.length\n\t\t\t\t\t\t\t&& this.isFamilyName(preword.w)\n\t\t\t\t\t\t\t&& this.isMergeable2(preword.w, word.w, nextword.w)\n\t\t\t\t\t\t)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlet nw = preword.w + word.w + nextword.w;\n\n\t\t\t\t\t\t\t/*\n\t\t\t\t\t\t\twords.splice(i - 1, 2, {\n\t\t\t\t\t\t\t\tw: preword.w + word.w + nextword.w,\n\t\t\t\t\t\t\t\tp: POSTAG.A_NR,\n\t\t\t\t\t\t\t\tm: [preword, word, nextword],\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t*/\n\n\t\t\t\t\t\t\tthis.sliceToken(words, i - 1, 2, {\n\t\t\t\t\t\t\t\tw: nw,\n\t\t\t\t\t\t\t\tp: POSTAG.A_NR,\n\t\t\t\t\t\t\t\tm: [preword, word, nextword],\n\t\t\t\t\t\t\t}, undefined, {\n\t\t\t\t\t\t\t\t[this.name]: 4,\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ti++;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// 如果为 无歧义的姓 + 名（2字以内） 且其中一个未未识别词\n\t\t\t\tif (this.isFamilyName(word.w)\n\t\t\t\t\t&& (!word.p || !nextword.p)\n\n\t\t\t\t\t/**\n\t\t\t\t\t * 防止將標點符號當作名字的BUG\n\t\t\t\t\t */\n\t\t\t\t\t&& !(word.p & POSTAG.D_W || nextword.p & POSTAG.D_W)\n\t\t\t\t)\n\t\t\t\t{\n\t\t\t\t\t//debug(word, nextword);\n\t\t\t\t\t/*\n\t\t\t\t\twords.splice(i, 2, {\n\t\t\t\t\t\tw: word.w + nextword.w,\n\t\t\t\t\t\tp: POSTAG.A_NR,\n\t\t\t\t\t\tm: [word, nextword],\n\t\t\t\t\t});\n\t\t\t\t\t*/\n\n\t\t\t\t\tthis.sliceToken(words, i, 2, {\n\t\t\t\t\t\tw: nw,\n\t\t\t\t\t\tp: POSTAG.A_NR,\n\t\t\t\t\t\tm: [word, nextword],\n\t\t\t\t\t}, undefined, {\n\t\t\t\t\t\t[this.name]: 5,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// 移到下一个单词\n\t\t\ti++;\n\t\t}\n\n\t\t/* 第二遍扫描 */\n\t\ti = 0;\n\t\twhile (i < words.length)\n\t\t{\n\t\t\tlet word = words[i];\n\t\t\tlet nextword = words[i + 1];\n\t\t\tif (this.isMergeable(word, nextword))\n\t\t\t{\n\t\t\t\t// 如果为 姓 + 单字名\n\t\t\t\tif (this.isFamilyName(word.w) && this.isSingleName(nextword.w))\n\t\t\t\t{\n\t\t\t\t\t/*\n\t\t\t\t\twords.splice(i, 2, {\n\t\t\t\t\t\tw: word.w + nextword.w,\n\t\t\t\t\t\tp: POSTAG.A_NR,\n\t\t\t\t\t\tm: [word, nextword],\n\t\t\t\t\t});\n\t\t\t\t\t*/\n\n\t\t\t\t\tlet nw = word.w + nextword.w;\n\t\t\t\t\tlet ew = this._TABLE[nw];\n\n\t\t\t\t\t/**\n\t\t\t\t\t * 更改為只有新詞屬於人名或未知詞時才會合併\n\t\t\t\t\t */\n\t\t\t\t\tif (!ew?.p || ew.p & POSTAG.A_NR)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.sliceToken(words, i, 2, {\n\t\t\t\t\t\t\tw: nw,\n\t\t\t\t\t\t\tp: POSTAG.A_NR,\n\t\t\t\t\t\t\tm: [word, nextword],\n\t\t\t\t\t\t}, undefined, {\n\t\t\t\t\t\t\t[this.name]: 6,\n\t\t\t\t\t\t\texists_word: ew,\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\ti++;\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// 移到下一个单词\n\t\t\ti++;\n\t\t}\n\n\t\treturn words;\n\t}\n}\n\nexport const init = ChsNameOptimizer.init.bind(ChsNameOptimizer) as typeof ChsNameOptimizer.init;\n\nexport const type = ChsNameOptimizer.type;\n\nexport default ChsNameOptimizer;\n\n"]}