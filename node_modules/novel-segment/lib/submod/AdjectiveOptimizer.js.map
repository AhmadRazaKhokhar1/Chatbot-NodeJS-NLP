{"version":3,"file":"AdjectiveOptimizer.js","sourceRoot":"","sources":["AdjectiveOptimizer.ts"],"names":[],"mappings":"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","sourcesContent":["import { SubSModuleOptimizer } from '../mod';\n\nimport { COLOR_ALL, COLOR_HAIR } from '../mod/COLORS';\nimport { IWordDebug } from '../util';\n\n/**\n * 把一些错认为名词的词标注为形容词，或者对名词作定语的情况\n */\nexport class AdjectiveOptimizer extends SubSModuleOptimizer\n{\n\toverride name = 'AdjectiveOptimizer';\n\n\toverride doOptimize(words: IWordDebug[]): IWordDebug[]\n\t{\n\t\tconst POSTAG = this._POSTAG;\n\t\tlet index = 0;\n\t\twhile (index < words.length)\n\t\t{\n\t\t\tconst word = words[index];\n\t\t\tconst nextword = words[index + 1];\n\t\t\tif (nextword)\n\t\t\t{\n\t\t\t\t// 对于<颜色>+<的>，直接判断颜色是形容词（字典里颜色都是名词）\n\t\t\t\tif (nextword.p & POSTAG.D_U && COLOR_ALL[word.w])\n\t\t\t\t{\n\t\t\t\t\tword.op = word.op || word.p;\n\t\t\t\t\tword.p |= POSTAG.D_A;\n\n\t\t\t\t\tthis.debugToken(word, {\n\t\t\t\t\t\t[this.name]: true,\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\t// 如果是连续的两个名词，前一个是颜色，那这个颜色也是形容词\n\t\t\t\tif (word.p & POSTAG.D_N && this.isNominal(nextword.p) && COLOR_ALL[word.w])\n\t\t\t\t{\n\t\t\t\t\tword.op = word.op || word.p;\n\t\t\t\t\tword.p |= POSTAG.D_A;\n\t\t\t\t\tword.p |= POSTAG.D_N;\n\n\t\t\t\t\tthis.debugToken(word, {\n\t\t\t\t\t\t[this.name]: true,\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tif ((word.w === '純' || word.w === '纯') && COLOR_HAIR[nextword.w])\n\t\t\t\t{\n\t\t\t\t\tword.op = word.op || word.p;\n\t\t\t\t\tword.p |= POSTAG.D_A;\n\n\t\t\t\t\tthis.debugToken(word, {\n\t\t\t\t\t\t[this.name]: true,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t\t// 移到下一个单词\n\t\t\tindex += 1;\n\t\t}\n\t\treturn words;\n\t}\n\n\tisNominal(pos: number | number[]): boolean\n\t{\n\t\t/*\n\t\tif (Array.isArray(pos))\n\t\t{\n\t\t\treturn this.isNominal(pos[0]);\n\t\t}\n\t\t*/\n\n\t\tconst POSTAG = this._POSTAG;\n\t\treturn (\n\t\t\tpos === POSTAG.D_N ||\n\t\t\tpos === POSTAG.A_NT ||\n\t\t\tpos === POSTAG.A_NX ||\n\t\t\tpos === POSTAG.A_NZ ||\n\t\t\tpos === POSTAG.A_NR ||\n\t\t\tpos === POSTAG.A_NS ||\n\t\t\tpos === POSTAG.URL\n\t\t);\n\t}\n}\n\nexport const init = AdjectiveOptimizer.init.bind(AdjectiveOptimizer) as typeof AdjectiveOptimizer.init;\n\nexport const type = AdjectiveOptimizer.type;\n\nexport default AdjectiveOptimizer\n"]}