{"version":3,"file":"indexOf.js","sourceRoot":"","sources":["indexOf.ts"],"names":[],"mappings":";;;AAEA;;;;;;;GAOG;AACH,SAAgB,OAAO,CAAC,KAAc,EAAE,CAAkB,EAAE,GAAY,EAAE,GAAG,IAAI;IAEhF,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC;IAC3B,IAAI,CAAC,GAAG,OAAO,CAAC,KAAK,QAAQ,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;IAE1C,OAAO,GAAG,GAAG,KAAK,CAAC,MAAM,EACzB,CAAC;QACA,IAAI,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;YAAE,OAAO,GAAG,CAAC;QACpC,GAAG,EAAE,CAAC;IACP,CAAC;IAED,OAAO,CAAC,CAAC,CAAC;AACX,CAAC;AAZD,0BAYC","sourcesContent":["import { IWord } from '@novel-segment/types';\n\n/**\n * 在单词数组中查找某一个单词或词性所在的位置\n *\n * @param {Array} words 单词数组\n * @param {Number|String} s 要查找的单词或词性\n * @param {Number} cur 开始位置\n * @return {Number} 找不到，返回-1\n */\nexport function indexOf(words: IWord[], s: string | number, cur?: number, ...argv)\n{\n\tcur = isNaN(cur) ? 0 : cur;\n\tlet f = typeof s === 'string' ? 'w' : 'p';\n\n\twhile (cur < words.length)\n\t{\n\t\tif (words[cur][f] === s) return cur;\n\t\tcur++;\n\t}\n\n\treturn -1;\n}\n"]}