{"version":3,"file":"Optimizer.js","sourceRoot":"","sources":["Optimizer.ts"],"names":[],"mappings":"AAAA;;;;GAIG;AACH,YAAY,CAAC;;;;AAEb,qDAA2C;AAE3C,+BAAyD;AAalD,IAAM,mBAAmB,GAAzB,MAAM,mBAAoB,SAAQ,gBAAU;IAA5C;;QAGmB,SAAI,GAAG,WAAW,CAAC;IAmB7C,CAAC;IAjBO,UAAU,CAAC,KAAc,EAAE,GAAG,IAAI;QAExC,MAAM,IAAI,KAAK,EAAE,CAAC;IACnB,CAAC;IAEe,IAAI,CAAC,OAAgB,EAAE,GAAG,IAAI;QAE7C,KAAK,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC,CAAC;QAE7B,OAAO,IAAI,CAAC;IACb,CAAC;IAEM,MAAM,CAAU,IAAI,CAAsD,OAAgB,EAAE,GAAG,IAAI;QAEzG,aAAa;QACb,OAAO,KAAK,CAAC,IAAI,CAAI,OAAO,EAAE,GAAG,IAAI,CAAC,CAAC;IACxC,CAAC;;AArBW,kDAAmB;AAEC,wBAAI,GAAG,WAAW,AAAd,CAAe;8BAFvC,mBAAmB;IAF/B,0BAAQ;IACT,aAAa;GACA,mBAAmB,CAsB/B;AAED;;GAEG;AACH,MAAa,SAAU,SAAQ,aAAO;IAAtC;;QAEU,SAAI,GAAG,WAAW,CAAC;IAa7B,CAAC;IAXA;;;;;;OAMG;IACH,UAAU,CAAC,KAAc,EAAE,IAAqB,EAAE,GAAG,IAAI;QAExD,OAAO,IAAI,CAAC,SAAS,CAAC,YAAY,EAAE,KAAK,EAAE,IAAI,EAAE,GAAG,IAAI,CAAC,CAAC;IAC3D,CAAC;CACD;AAfD,8BAeC;AAED,kBAAe,SAAS,CAAC","sourcesContent":["/**\n * 优化模块管理器\n *\n * @author 老雷<leizongmin@gmail.com>\n */\n'use strict';\n\nimport { autobind } from 'core-decorators';\nimport { IWord, Segment } from '../Segment';\nimport { ISubSModule, SModule, SubSModule } from './mod';\n\nexport type ISubOptimizer = ISubSModule & {\n\ttype: 'optimizer',\n\tdoOptimize(words: IWord[], ...argv): IWord[],\n}\n\nexport type ISubOptimizerCreate<T extends SubSModuleOptimizer, R extends SubSModuleOptimizer = SubSModuleOptimizer> = {\n\t(segment: Segment, ...argv): T & R,\n};\n\n@autobind\n// @ts-ignore\nexport class SubSModuleOptimizer extends SubSModule implements ISubOptimizer\n{\n\tpublic static override readonly type = 'optimizer';\n\tpublic override readonly type = 'optimizer';\n\n\tpublic doOptimize(words: IWord[], ...argv): IWord[]\n\t{\n\t\tthrow new Error();\n\t}\n\n\tpublic override init(segment: Segment, ...argv)\n\t{\n\t\tsuper.init(segment, ...argv);\n\n\t\treturn this;\n\t}\n\n\tpublic static override init<T extends SubSModuleOptimizer = SubSModuleOptimizer>(segment: Segment, ...argv): T\n\t{\n\t\t// @ts-ignore\n\t\treturn super.init<T>(segment, ...argv);\n\t}\n}\n\n/**\n * 分词模块管理器\n */\nexport class Optimizer extends SModule\n{\n\toverride type = 'optimizer';\n\n\t/**\n\t * 对一段文本进行分词\n\t *\n\t * @param {array} words 单词数组\n\t * @param {array} modules 分词模块数组\n\t * @return {array}\n\t */\n\tdoOptimize(words: IWord[], mods: ISubOptimizer[], ...argv): IWord[]\n\t{\n\t\treturn this._doMethod('doOptimize', words, mods, ...argv);\n\t}\n}\n\nexport default Optimizer;\n"]}