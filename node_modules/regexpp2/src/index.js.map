{"version":3,"file":"index.js","sourceRoot":"","sources":["index.ts"],"names":[],"mappings":";;;;AAAA,mDAA4B;AAOnB,kBAAG;AANZ,qCAAuC;AAMzB,6FANL,qBAAY,OAMK;AAL1B,2CAA6C;AAKjB,gGALnB,2BAAe,OAKmB;AAJ3C,2CAA2C;AAE3C,kDAAuB;AAIvB;;;;;GAKG;AACH,SAAgB,kBAAkB,CAC9B,MAAuB,EACvB,OAA8B;IAE9B,OAAO,IAAI,qBAAY,CAAC,OAAO,CAAC,CAAC,YAAY,CAAC,CAAC,MAAM,YAAY,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,CAAA;AAC1G,CAAC;AALD,gDAKC;AAED;;;;GAIG;AACH,SAAgB,qBAAqB,CACjC,MAAc,EACd,OAAiC;IAEjC,OAAO,IAAI,2BAAe,CAAC,OAAO,CAAC,CAAC,eAAe,CAAC,MAAM,CAAC,CAAA;AAC/D,CAAC;AALD,sDAKC;AAED;;;;;;;GAOG;AAEH,kBAAe,OAAmC,CAAC","sourcesContent":["import * as AST from \"./ast\"\nimport { RegExpParser } from \"./parser\"\nimport { RegExpValidator } from \"./validator\"\n//import { RegExpVisitor } from \"./visitor\"\n\nexport * from \"./const\"\n\nexport { AST, RegExpParser, RegExpValidator }\n\n/**\n * Parse a given regular expression literal then make AST object.\n * @param source The source code to parse.\n * @param options The options to parse.\n * @returns The AST of the regular expression.\n */\nexport function parseRegExpLiteral(\n    source: string | RegExp,\n    options?: RegExpParser.Options,\n): AST.RegExpLiteral {\n    return new RegExpParser(options).parseLiteral((source instanceof RegExp) ? source.toString() : source)\n}\n\n/**\n * Validate a given regular expression literal.\n * @param source The source code to validate.\n * @param options The options to validate.\n */\nexport function validateRegExpLiteral(\n    source: string,\n    options?: RegExpValidator.Options,\n): void {\n    return new RegExpValidator(options).validateLiteral(source)\n}\n\n/*\nexport function visitRegExpAST(\n    node: AST.Node,\n    handlers: RegExpVisitor.Handlers,\n): void {\n    new RegExpVisitor(handlers).visit(node)\n}\n */\n\nexport default exports as typeof import('./index');\n"]}