{"version":3,"file":"ast.js","sourceRoot":"","sources":["ast.ts"],"names":[],"mappings":";;AA2YA,kBAAe,OAAiC,CAAC","sourcesContent":["/**\n * The type which includes all nodes.\n */\nimport {\n    EnumKindAssertion,\n    EnumKindCharacterSet,\n    EnumKindEdgeAssertion,\n    EnumKindEscapeCharacterSet,\n    EnumTypeNode,\n} from './const';\n\nexport type Node = BranchNode | LeafNode\n\n/**\n * The type which includes all branch nodes.\n */\nexport type BranchNode =\n    | RegExpLiteral\n    | Pattern\n    | Disjunction\n    | Group\n    | CapturingGroup\n    | Quantifier\n    | CharacterClass\n    | LookaroundAssertion\n    | CharacterClassRange\n\n/**\n * The type which includes all leaf nodes.\n */\nexport type LeafNode =\n    | BoundaryAssertion\n    | CharacterSet\n    | Character\n    | Backreference\n    | Flags\n\n/**\n * The type which includes all atom nodes.\n */\nexport type Element =\n    | Disjunction\n    | Group\n    | CapturingGroup\n    | Quantifier\n    | CharacterClass\n    | Assertion\n    | CharacterSet\n    | Character\n    | Backreference\n\n/**\n * The type which includes all character class atom nodes.\n */\nexport type CharacterClassElement =\n    | EscapeCharacterSet\n    | UnicodePropertyCharacterSet\n    | Character\n    | CharacterClassRange\n\n/**\n * The type which includes all atom nodes that Alternative node can have as children.\n */\nexport type AlternativeElement =\n    | Group\n    | CapturingGroup\n    | Quantifier\n    | CharacterClass\n    | Assertion\n    | CharacterSet\n    | Character\n    | Backreference\n\n/**\n * The type which includes all atom nodes that Quantifier node can have as children.\n */\nexport type QuantifiableElement =\n    | Group\n    | CapturingGroup\n    | CharacterClass\n    | LookaheadAssertion\n    | CharacterSet\n    | Character\n    | Backreference\n\n/**\n * The type which defines common properties for all node types.\n */\nexport interface NodeBase {\n    /** The node type. */\n    type: Node[\"type\"]\n    /** The parent node. */\n    parent: Node[\"parent\"]\n    /** The 0-based index that this node starts. */\n    start: number\n    /** The 0-based index that this node ends. */\n    end: number\n    /** The raw text of this node. */\n    raw: string\n}\n\n/**\n * The root node.\n */\nexport interface RegExpLiteral extends NodeBase {\n    type: EnumTypeNode.RegExpLiteral\n    parent: null\n    pattern: Pattern\n    flags: Flags\n}\n\n/**\n * The pattern.\n */\nexport interface Pattern extends NodeBase {\n    type: EnumTypeNode.Pattern\n    parent: RegExpLiteral | null\n    elements: Element[]\n}\n\n/**\n * The disjunction.\n * E.g. `a|b`\n */\nexport interface Disjunction extends NodeBase {\n    type: EnumTypeNode.Disjunction\n    parent: Pattern | Group | CapturingGroup | LookaroundAssertion\n    alternatives: AlternativeElement[][]\n}\n\n/**\n * The uncapturing group.\n * E.g. `(?:ab)`\n */\nexport interface Group extends NodeBase {\n    type: EnumTypeNode.Group\n    parent:\n        | Pattern\n        | Disjunction\n        | Group\n        | CapturingGroup\n        | Quantifier\n        | LookaroundAssertion\n    elements: Element[]\n}\n\n/**\n * The capturing group.\n * E.g. `(ab)`, `(?<name>ab)`\n */\nexport interface CapturingGroup extends NodeBase {\n    type: EnumTypeNode.CapturingGroup\n    parent:\n        | Pattern\n        | Disjunction\n        | Group\n        | CapturingGroup\n        | Quantifier\n        | LookaroundAssertion\n    name: string | null\n    elements: Element[]\n    references: Backreference[]\n}\n\n/**\n * The lookaround assertion.\n */\nexport type LookaroundAssertion = LookaheadAssertion | LookbehindAssertion\n\n/**\n * The lookahead assertion.\n * E.g. `(?=ab)`, `(?!ab)`\n */\nexport interface LookaheadAssertion extends NodeBase {\n    type: EnumTypeNode.LookaheadAssertion\n    parent:\n        | Pattern\n        | Disjunction\n        | Group\n        | CapturingGroup\n        | Quantifier\n        | LookaroundAssertion\n    kind: EnumKindAssertion.LookaheadAssertion\n    negate: boolean\n    elements: Element[]\n}\n\n/**\n * The lookbehind assertion.\n * E.g. `(?<=ab)`, `(?<!ab)`\n */\nexport interface LookbehindAssertion extends NodeBase {\n    type: EnumTypeNode.LookbehindAssertion\n    parent: Pattern | Disjunction | Group | CapturingGroup | LookaroundAssertion\n    kind: EnumKindAssertion.LookbehindAssertion\n    negate: boolean\n    elements: Element[]\n}\n\n/**\n * The quantifier.\n * E.g. `a?`, `a*`, `a+`, `a{1,2}`, `a??`, `a*?`, `a+?`, `a{1,2}?`\n */\nexport interface Quantifier extends NodeBase {\n    type: EnumTypeNode.Quantifier\n    parent: Pattern | Disjunction | Group | CapturingGroup | LookaroundAssertion\n    min: number\n    max: number // can be Number.POSITIVE_INFINITY\n    greedy: boolean\n    element: QuantifiableElement\n}\n\n/**\n * The character class.\n * E.g. `[ab]`, `[^ab]`\n */\nexport interface CharacterClass extends NodeBase {\n    type: EnumTypeNode.CharacterClass\n    parent:\n        | Pattern\n        | Disjunction\n        | Group\n        | CapturingGroup\n        | Quantifier\n        | LookaroundAssertion\n    negate: boolean\n    elements: CharacterClassElement[]\n}\n\n/**\n * The character class.\n * E.g. `[a-b]`\n */\nexport interface CharacterClassRange extends NodeBase {\n    type: EnumTypeNode.CharacterClassRange\n    parent: CharacterClass\n    min: Character\n    max: Character\n}\n\n/**\n * The assertion.\n */\nexport type Assertion = BoundaryAssertion | LookaroundAssertion\n\n/**\n * The boundary assertion.\n */\nexport type BoundaryAssertion = EdgeAssertion | WordBoundaryAssertion\n\n/**\n * The edge boundary assertion.\n * E.g. `^`, `$`\n */\nexport interface EdgeAssertion extends NodeBase {\n    type: EnumTypeNode.EdgeAssertion\n    parent:\n        | Pattern\n        | Disjunction\n        | Group\n        | CapturingGroup\n        | Quantifier\n        | LookaroundAssertion\n    kind: EnumKindEdgeAssertion\n}\n\n/**\n * The word bondary assertion.\n * E.g. `\\b`, `\\B`\n */\nexport interface WordBoundaryAssertion extends NodeBase {\n    type: EnumTypeNode.WordBoundaryAssertion\n    parent:\n        | Pattern\n        | Disjunction\n        | Group\n        | CapturingGroup\n        | Quantifier\n        | LookaroundAssertion\n    kind: EnumKindAssertion.WordBoundaryAssertion\n    negate: boolean\n}\n\n/**\n * The character set.\n */\nexport type CharacterSet =\n    | AnyCharacterSet\n    | EscapeCharacterSet\n    | UnicodePropertyCharacterSet\n\n/**\n * The dot.\n * E.g. `.`\n */\nexport interface AnyCharacterSet extends NodeBase {\n    type: EnumTypeNode.AnyCharacterSet\n    parent:\n        | Pattern\n        | Disjunction\n        | Group\n        | CapturingGroup\n        | Quantifier\n        | LookaroundAssertion\n    kind: EnumKindCharacterSet.AnyCharacterSet\n}\n\n/**\n * The character class escape.\n * E.g. `\\d`, `\\s`, `\\w`, `\\D`, `\\S`, `\\W`\n */\nexport interface EscapeCharacterSet extends NodeBase {\n    type: EnumTypeNode.EscapeCharacterSet\n    parent:\n        | Pattern\n        | Disjunction\n        | Group\n        | CapturingGroup\n        | Quantifier\n        | CharacterClass\n        | LookaroundAssertion\n    kind: EnumKindEscapeCharacterSet\n    negate: boolean\n}\n\n/**\n * The unicode property escape.\n * E.g. `\\p{ASCII}`, `\\P{ASCII}`, `\\p{Script=Hiragana}`\n */\nexport interface UnicodePropertyCharacterSet extends NodeBase {\n    type: EnumTypeNode.UnicodePropertyCharacterSet\n    parent:\n        | Pattern\n        | Disjunction\n        | Group\n        | CapturingGroup\n        | Quantifier\n        | CharacterClass\n        | LookaroundAssertion\n    kind: EnumKindCharacterSet.UnicodePropertyCharacterSet\n    key: string\n    value: string | null\n    negate: boolean\n}\n\n/**\n * The character.\n * This includes escape sequences which mean a character.\n * E.g. `a`, `あ`, `✿`, `\\x65`, `\\u0065`, `\\u{65}`, `\\/`\n */\nexport interface Character extends NodeBase {\n    type: EnumTypeNode.Character\n    parent:\n        | Pattern\n        | Disjunction\n        | Group\n        | CapturingGroup\n        | Quantifier\n        | CharacterClass\n        | LookaroundAssertion\n        | CharacterClassRange\n    value: number // a code point.\n}\n\n/**\n * The backreference.\n * E.g. `\\1`, `\\k<name>`\n */\nexport interface Backreference extends NodeBase {\n    type: EnumTypeNode.Backreference\n    parent:\n        | Pattern\n        | Disjunction\n        | Group\n        | CapturingGroup\n        | Quantifier\n        | LookaroundAssertion\n    ref: number | string\n    resolved: CapturingGroup\n}\n\n/**\n * The flags.\n */\nexport interface Flags extends NodeBase {\n    type: EnumTypeNode.Flags\n    parent: RegExpLiteral | null\n    dotAll: boolean\n    global: boolean\n    ignoreCase: boolean\n    multiline: boolean\n    sticky: boolean\n    unicode: boolean\n}\n\nexport default exports as typeof import('./ast');\n"]}