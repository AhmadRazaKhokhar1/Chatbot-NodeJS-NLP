{"version":3,"file":"const.js","sourceRoot":"","sources":["const.ts"],"names":[],"mappings":";AAAA;;GAEG;;;AAEH,IAAkB,YA2HjB;AA3HD,WAAkB,YAAY;IAG7B;;OAEG;IACH,+CAA+B,CAAA;IAE/B;;OAEG;IACH,mCAAmB,CAAA;IAEnB;;;OAGG;IACH,2CAA2B,CAAA;IAC3B;;;OAGG;IAEH,+BAAe,CAAA;IAEf;;;OAGG;IACH,iDAAiC,CAAA;IAEjC;;OAEG;IACH,iDAAiC,CAAA;IAEjC;;;OAGG;IACH,gDAAgC,CAAA;IAChC;;;OAGG;IACH,iDAAiC,CAAA;IAEjC;;;OAGG;IACH,yCAAyB,CAAA;IACzB;;;OAGG;IACH,iDAAiC,CAAA;IACjC;;;OAGG;IACH,2DAA2C,CAAA;IAE3C;;OAEG;IACH,uCAAuB,CAAA;IAEvB;;OAEG;IACH,+CAA+B,CAAA;IAE/B;;;OAGG;IACH,2CAA2B,CAAA;IAC3B;;;OAGG;IACH,mDAAmC,CAAA;IAEnC;;OAEG;IACH,6CAA6B,CAAA;IAE7B;;;OAGG;IACH,gDAAgC,CAAA;IAChC;;;OAGG;IACH,mDAAmC,CAAA;IACnC;;;OAGG;IACH,4DAA4C,CAAA;IAE5C;;;;OAIG;IACH,uCAAuB,CAAA;IAEvB;;;OAGG;IACH,+CAA+B,CAAA;IAE/B;;OAEG;IACH,+BAAe,CAAA;AAEhB,CAAC,EA3HiB,YAAY,4BAAZ,YAAY,QA2H7B;AAKD,IAAkB,iBASjB;AATD,WAAkB,iBAAiB;IAElC,qDAAgC,CAAA;IAChC,uDAAkC,CAAA;IAElC,kDAA6B,CAAA;IAC7B,8CAAyB,CAAA;IAEzB,mDAA8B,CAAA;AAC/B,CAAC,EATiB,iBAAiB,iCAAjB,iBAAiB,QASlC;AAID,IAAkB,oBASjB;AATD,WAAkB,oBAAoB;IAErC,+CAAuB,CAAA;IAEvB,0DAAkC,CAAA;IAClC,0DAAkC,CAAA;IAClC,wDAAgC,CAAA;IAEhC,gEAAwC,CAAA;AACzC,CAAC,EATiB,oBAAoB,oCAApB,oBAAoB,QASrC;AAED,IAAkB,eAOjB;AAPD,WAAkB,eAAe;IAEhC,iDAAM,CAAA;IACN,0DAAY,CAAA;IACZ,0DAAY,CAAA;IACZ,0DAAY,CAAA;IACZ,0DAAY,CAAA;AACb,CAAC,EAPiB,eAAe,+BAAf,eAAe,QAOhC;AAED,IAAkB,SAIjB;AAJD,WAAkB,SAAS;IAE1B,0CAA6B,CAAA;IAC7B,8CAAiC,CAAA;AAClC,CAAC,EAJiB,SAAS,yBAAT,SAAS,QAI1B;AAED,kBAAe,OAAmC,CAAC","sourcesContent":["/**\n * Created by user on 2019/5/9.\n */\n\nexport const enum EnumTypeNode\n{\n\n\t/**\n\t * The root node.\n\t */\n\tRegExpLiteral = \"RegExpLiteral\",\n\n\t/**\n\t * The pattern.\n\t */\n\tPattern = \"Pattern\",\n\n\t/**\n\t * The disjunction.\n\t * E.g. `a|b`\n\t */\n\tDisjunction = \"Disjunction\",\n\t/**\n\t * The uncapturing group.\n\t * E.g. `(?:ab)`\n\t */\n\n\tGroup = \"Group\",\n\n\t/**\n\t * The capturing group.\n\t * E.g. `(ab)`, `(?<name>ab)`\n\t */\n\tCapturingGroup = \"CapturingGroup\",\n\n\t/**\n\t * The lookaround assertion.\n\t */\n\tLookaroundAssertion = \"Assertion\",\n\n\t/**\n\t * The lookahead assertion.\n\t * E.g. `(?=ab)`, `(?!ab)`\n\t */\n\tLookaheadAssertion = \"Assertion\",\n\t/**\n\t * The lookbehind assertion.\n\t * E.g. `(?<=ab)`, `(?<!ab)`\n\t */\n\tLookbehindAssertion = \"Assertion\",\n\n\t/**\n\t * The quantifier.\n\t * E.g. `a?`, `a*`, `a+`, `a{1,2}`, `a??`, `a*?`, `a+?`, `a{1,2}?`\n\t */\n\tQuantifier = \"Quantifier\",\n\t/**\n\t * The character class.\n\t * E.g. `[ab]`, `[^ab]`\n\t */\n\tCharacterClass = \"CharacterClass\",\n\t/**\n\t * The character class.\n\t * E.g. `[a-b]`\n\t */\n\tCharacterClassRange = \"CharacterClassRange\",\n\n\t/**\n\t * The assertion.\n\t */\n\tAssertion = \"Assertion\",\n\n\t/**\n\t * The boundary assertion.\n\t */\n\tBoundaryAssertion = \"Assertion\",\n\n\t/**\n\t * The edge boundary assertion.\n\t * E.g. `^`, `$`\n\t */\n\tEdgeAssertion = \"Assertion\",\n\t/**\n\t * The word bondary assertion.\n\t * E.g. `\\b`, `\\B`\n\t */\n\tWordBoundaryAssertion = \"Assertion\",\n\n\t/**\n\t * The character set.\n\t */\n\tCharacterSet = \"CharacterSet\",\n\n\t/**\n\t * The dot.\n\t * E.g. `.`\n\t */\n\tAnyCharacterSet = \"CharacterSet\",\n\t/**\n\t * The character class escape.\n\t * E.g. `\\d`, `\\s`, `\\w`, `\\D`, `\\S`, `\\W`\n\t */\n\tEscapeCharacterSet = \"CharacterSet\",\n\t/**\n\t * The unicode property escape.\n\t * E.g. `\\p{ASCII}`, `\\P{ASCII}`, `\\p{Script=Hiragana}`\n\t */\n\tUnicodePropertyCharacterSet = \"CharacterSet\",\n\n\t/**\n\t * The character.\n\t * This includes escape sequences which mean a character.\n\t * E.g. `a`, `あ`, `✿`, `\\x65`, `\\u0065`, `\\u{65}`, `\\/`\n\t */\n\tCharacter = \"Character\",\n\n\t/**\n\t * The backreference.\n\t * E.g. `\\1`, `\\k<name>`\n\t */\n\tBackreference = \"Backreference\",\n\n\t/**\n\t * The flags.\n\t */\n\tFlags = \"Flags\",\n\n}\n\nexport type EnumKindLookAssertion = EnumKindAssertion.LookaheadAssertion | EnumKindAssertion.LookbehindAssertion;\nexport type EnumKindEdgeAssertion = EnumKindAssertion.EdgeAssertion_Start | EnumKindAssertion.EdgeAssertion_End;\n\nexport const enum EnumKindAssertion\n{\n\tLookaheadAssertion = \"lookahead\",\n\tLookbehindAssertion = \"lookbehind\",\n\n\tEdgeAssertion_Start = \"start\",\n\tEdgeAssertion_End = \"end\",\n\n\tWordBoundaryAssertion = \"word\"\n}\n\nexport type EnumKindEscapeCharacterSet = EnumKindCharacterSet.EscapeCharacterSet_Digit | EnumKindCharacterSet.EscapeCharacterSet_Space | EnumKindCharacterSet.EscapeCharacterSet_Word;\n\nexport const enum EnumKindCharacterSet\n{\n\tAnyCharacterSet = \"any\",\n\n\tEscapeCharacterSet_Digit = \"digit\",\n\tEscapeCharacterSet_Space = \"space\",\n\tEscapeCharacterSet_Word = \"word\",\n\n\tUnicodePropertyCharacterSet = \"property\",\n}\n\nexport const enum EnumEcmaVersion\n{\n\tv5 = 5,\n\tv2015 = 2015,\n\tv2016 = 2016,\n\tv2017 = 2017,\n\tv2018 = 2018,\n}\n\nexport const enum EnumError\n{\n\tUnknownError = \"UnknownError\",\n\tAssertionError = \"AssertionError\",\n}\n\nexport default exports as typeof import('./const');\n"]}