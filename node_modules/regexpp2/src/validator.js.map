{"version":3,"file":"validator.js","sourceRoot":"","sources":["validator.ts"],"names":[],"mappings":"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","sourcesContent":["import { Reader } from \"./reader\"\nimport { RegExpSyntaxError } from \"./regexp-syntax-error\"\nimport {\n    Asterisk,\n    Backspace,\n    CarriageReturn,\n    CharacterTabulation,\n    CircumflexAccent,\n    Colon,\n    Comma,\n    DigitNine,\n    DigitOne,\n    digitToInt,\n    DigitZero,\n    DollarSign,\n    EqualsSign,\n    ExclamationMark,\n    FormFeed,\n    FullStop,\n    GreaterThanSign,\n    HyphenMinus,\n    isDecimalDigit,\n    isHexDigit,\n    isIdContinue,\n    isIdStart,\n    isLatinLetter,\n    isLineTerminator,\n    isOctalDigit,\n    isValidUnicode,\n    LatinCapitalLetterB,\n    LatinCapitalLetterD,\n    LatinCapitalLetterP,\n    LatinCapitalLetterS,\n    LatinCapitalLetterW,\n    LatinSmallLetterB,\n    LatinSmallLetterC,\n    LatinSmallLetterD,\n    LatinSmallLetterF,\n    LatinSmallLetterG,\n    LatinSmallLetterI,\n    LatinSmallLetterK,\n    LatinSmallLetterM,\n    LatinSmallLetterN,\n    LatinSmallLetterP,\n    LatinSmallLetterR,\n    LatinSmallLetterS,\n    LatinSmallLetterT,\n    LatinSmallLetterU,\n    LatinSmallLetterV,\n    LatinSmallLetterW,\n    LatinSmallLetterX,\n    LatinSmallLetterY,\n    LeftCurlyBracket,\n    LeftParenthesis,\n    LeftSquareBracket,\n    LessThanSign,\n    LineFeed,\n    LineTabulation,\n    LowLine,\n    PlusSign,\n    PropertyData,\n    QuestionMark,\n    ReverseSolidus,\n    RightCurlyBracket,\n    RightParenthesis,\n    RightSquareBracket,\n    Solidus,\n    VerticalLine,\n    ZeroWidthJoiner,\n    ZeroWidthNonJoiner,\n} from \"./unicode\"\n\nfunction isSyntaxCharacter(cp: number): boolean {\n    return (\n        cp === CircumflexAccent ||\n        cp === DollarSign ||\n        cp === ReverseSolidus ||\n        cp === FullStop ||\n        cp === Asterisk ||\n        cp === PlusSign ||\n        cp === QuestionMark ||\n        cp === LeftParenthesis ||\n        cp === RightParenthesis ||\n        cp === LeftSquareBracket ||\n        cp === RightSquareBracket ||\n        cp === LeftCurlyBracket ||\n        cp === RightCurlyBracket ||\n        cp === VerticalLine\n    )\n}\n\nfunction isRegExpIdentifierStart(cp: number): boolean {\n    return isIdStart(cp) || cp === DollarSign || cp === LowLine\n}\n\nfunction isRegExpIdentifierPart(cp: number): boolean {\n    return (\n        isIdContinue(cp) ||\n        cp === DollarSign ||\n        cp === LowLine ||\n        cp === ZeroWidthNonJoiner ||\n        cp === ZeroWidthJoiner\n    )\n}\n\nfunction isUnicodePropertyNameCharacter(cp: number): boolean {\n    return isLatinLetter(cp) || cp === LowLine\n}\n\nfunction isUnicodePropertyValueCharacter(cp: number): boolean {\n    return isUnicodePropertyNameCharacter(cp) || isDecimalDigit(cp)\n}\n\nfunction isValidUnicodeProperty(name: string, value: string): boolean {\n    //eslint-disable-next-line no-prototype-builtins\n    return PropertyData.hasOwnProperty(name) && PropertyData[name].has(value)\n}\n\nfunction isValidUnicodePropertyName(name: string): boolean {\n    return PropertyData.$LONE.has(name)\n}\n\nexport namespace RegExpValidator {\n    /**\n     * The options for RegExpValidator construction.\n     */\n    export interface Options {\n        /**\n         * The flag to disable Annex B syntax. Default is `false`.\n         */\n        strict?: boolean\n\n        /**\n         * ECMAScript version. Default is `2018`.\n         * - `2015` added `u` and `y` flags.\n         * - `2018` added `s` flag, Named Capturing Group, Lookbehind Assertion,\n         *   and Unicode Property Escape.\n         */\n        ecmaVersion?: 5 | 2015 | 2016 | 2017 | 2018\n\n        disableChkCharacterClassRange?: boolean\n\n        /**\n         * A function that is called when the validator entered a RegExp literal.\n         * @param start The 0-based index of the first character.\n         */\n        onLiteralEnter?(start: number): void\n\n        /**\n         * A function that is called when the validator left a RegExp literal.\n         * @param start The 0-based index of the first character.\n         * @param end The next 0-based index of the last character.\n         */\n        onLiteralLeave?(start: number, end: number): void\n\n        /**\n         * A function that is called when the validator found flags.\n         * @param start The 0-based index of the first character.\n         * @param end The next 0-based index of the last character.\n         * @param global `g` flag.\n         * @param ignoreCase `i` flag.\n         * @param multiline `m` flag.\n         * @param unicode `u` flag.\n         * @param sticky `y` flag.\n         * @param dotAll `s` flag.\n         */\n        onFlags?(\n            start: number,\n            end: number,\n            global: boolean,\n            ignoreCase: boolean,\n            multiline: boolean,\n            unicode: boolean,\n            sticky: boolean,\n            dotAll: boolean,\n        ): void\n\n        /**\n         * A function that is called when the validator entered a pattern.\n         * @param start The 0-based index of the first character.\n         */\n        onPatternEnter?(start: number): void\n\n        /**\n         * A function that is called when the validator left a pattern.\n         * @param start The 0-based index of the first character.\n         * @param end The next 0-based index of the last character.\n         */\n        onPatternLeave?(start: number, end: number): void\n\n        /**\n         * A function that is called when the validator entered a disjunction.\n         * @param start The 0-based index of the first character.\n         */\n        onDisjunctionEnter?(start: number): void\n\n        /**\n         * A function that is called when the validator left a disjunction.\n         * @param start The 0-based index of the first character.\n         * @param end The next 0-based index of the last character.\n         */\n        onDisjunctionLeave?(start: number, end: number): void\n\n        /**\n         * A function that is called when the validator entered an alternative.\n         * @param start The 0-based index of the first character.\n         * @param index The 0-based index of alternatives in a disjunction.\n         */\n        onAlternativeEnter?(start: number, index: number): void\n\n        /**\n         * A function that is called when the validator left an alternative.\n         * @param start The 0-based index of the first character.\n         * @param end The next 0-based index of the last character.\n         * @param index The 0-based index of alternatives in a disjunction.\n         */\n        onAlternativeLeave?(start: number, end: number, index: number): void\n\n        /**\n         * A function that is called when the validator entered an uncapturing group.\n         * @param start The 0-based index of the first character.\n         */\n        onGroupEnter?(start: number): void\n\n        /**\n         * A function that is called when the validator left an uncapturing group.\n         * @param start The 0-based index of the first character.\n         * @param end The next 0-based index of the last character.\n         */\n        onGroupLeave?(start: number, end: number): void\n\n        /**\n         * A function that is called when the validator entered a capturing group.\n         * @param start The 0-based index of the first character.\n         * @param name The group name.\n         */\n        onCapturingGroupEnter?(start: number, name: string | null): void\n\n        /**\n         * A function that is called when the validator left a capturing group.\n         * @param start The 0-based index of the first character.\n         * @param end The next 0-based index of the last character.\n         * @param name The group name.\n         */\n        onCapturingGroupLeave?(\n            start: number,\n            end: number,\n            name: string | null,\n        ): void\n\n        /**\n         * A function that is called when the validator found a quantifier.\n         * @param start The 0-based index of the first character.\n         * @param end The next 0-based index of the last character.\n         * @param min The minimum number of repeating.\n         * @param max The maximum number of repeating.\n         * @param greedy The flag to choose the longest matching.\n         */\n        onQuantifier?(\n            start: number,\n            end: number,\n            min: number,\n            max: number,\n            greedy: boolean,\n        ): void\n\n        /**\n         * A function that is called when the validator entered a lookahead/lookbehind assertion.\n         * @param start The 0-based index of the first character.\n         * @param kind The kind of the assertion.\n         * @param negate The flag which represents that the assertion is negative.\n         */\n        onLookaroundAssertionEnter?(\n            start: number,\n            kind: \"lookahead\" | \"lookbehind\",\n            negate: boolean,\n        ): void\n\n        /**\n         * A function that is called when the validator left a lookahead/lookbehind assertion.\n         * @param start The 0-based index of the first character.\n         * @param end The next 0-based index of the last character.\n         * @param kind The kind of the assertion.\n         * @param negate The flag which represents that the assertion is negative.\n         */\n        onLookaroundAssertionLeave?(\n            start: number,\n            end: number,\n            kind: \"lookahead\" | \"lookbehind\",\n            negate: boolean,\n        ): void\n\n        /**\n         * A function that is called when the validator found an edge boundary assertion.\n         * @param start The 0-based index of the first character.\n         * @param end The next 0-based index of the last character.\n         * @param kind The kind of the assertion.\n         */\n        onEdgeAssertion?(\n            start: number,\n            end: number,\n            kind: \"start\" | \"end\",\n        ): void\n\n        /**\n         * A function that is called when the validator found a word boundary assertion.\n         * @param start The 0-based index of the first character.\n         * @param end The next 0-based index of the last character.\n         * @param kind The kind of the assertion.\n         * @param negate The flag which represents that the assertion is negative.\n         */\n        onWordBoundaryAssertion?(\n            start: number,\n            end: number,\n            kind: \"word\",\n            negate: boolean,\n        ): void\n\n        /**\n         * A function that is called when the validator found a dot.\n         * @param start The 0-based index of the first character.\n         * @param end The next 0-based index of the last character.\n         * @param kind The kind of the character set.\n         */\n        onAnyCharacterSet?(start: number, end: number, kind: \"any\"): void\n\n        /**\n         * A function that is called when the validator found a character set escape.\n         * @param start The 0-based index of the first character.\n         * @param end The next 0-based index of the last character.\n         * @param kind The kind of the character set.\n         * @param negate The flag which represents that the character set is negative.\n         */\n        onEscapeCharacterSet?(\n            start: number,\n            end: number,\n            kind: \"digit\" | \"space\" | \"word\",\n            negate: boolean,\n        ): void\n\n        /**\n         * A function that is called when the validator found a Unicode proerty escape.\n         * @param start The 0-based index of the first character.\n         * @param end The next 0-based index of the last character.\n         * @param kind The kind of the character set.\n         * @param key The property name.\n         * @param value The property value.\n         * @param negate The flag which represents that the character set is negative.\n         */\n        onUnicodePropertyCharacterSet?(\n            start: number,\n            end: number,\n            kind: \"property\",\n            key: string,\n            value: string | null,\n            negate: boolean,\n        ): void\n\n        /**\n         * A function that is called when the validator found a character.\n         * @param start The 0-based index of the first character.\n         * @param end The next 0-based index of the last character.\n         * @param value The code point of the character.\n         */\n        onCharacter?(start: number, end: number, value: number): void\n\n        /**\n         * A function that is called when the validator found a backreference.\n         * @param start The 0-based index of the first character.\n         * @param end The next 0-based index of the last character.\n         * @param ref The key of the referred capturing group.\n         */\n        onBackreference?(start: number, end: number, ref: number | string): void\n\n        /**\n         * A function that is called when the validator entered a character class.\n         * @param start The 0-based index of the first character.\n         * @param negate The flag which represents that the character class is negative.\n         */\n        onCharacterClassEnter?(start: number, negate: boolean): void\n\n        /**\n         * A function that is called when the validator left a character class.\n         * @param start The 0-based index of the first character.\n         * @param end The next 0-based index of the last character.\n         * @param negate The flag which represents that the character class is negative.\n         */\n        onCharacterClassLeave?(\n            start: number,\n            end: number,\n            negate: boolean,\n        ): void\n\n        /**\n         * A function that is called when the validator found a character class range.\n         * @param start The 0-based index of the first character.\n         * @param end The next 0-based index of the last character.\n         * @param min The minimum code point of the range.\n         * @param max The maximum code point of the range.\n         */\n        onCharacterClassRange?(\n            start: number,\n            end: number,\n            min: number,\n            max: number,\n        ): void\n    }\n}\n\n/**\n * The regular expression validator.\n */\nexport class RegExpValidator {\n    private readonly _options: RegExpValidator.Options\n    private readonly _reader = new Reader()\n    private _uFlag = false\n    private _nFlag = false\n    private _lastIntValue = 0\n    private _lastMinValue = 0\n    private _lastMaxValue = 0\n    private _lastStrValue = \"\"\n    private _lastKeyValue = \"\"\n    private _lastValValue = \"\"\n    private _lastAssertionIsQuantifiable = false\n    private _numCapturingParens = 0\n    private _groupNames = new Set<string>()\n    private _backreferenceNames = new Set<string>()\n\n    /**\n     * Initialize this validator.\n     * @param options The options of validator.\n     */\n    public constructor(options?: RegExpValidator.Options) {\n        this._options = options || {}\n    }\n\n    /**\n     * Validate a regular expression literal. E.g. \"/abc/g\"\n     * @param source The source code to validate.\n     * @param start The start index in the source code.\n     * @param end The end index in the source code.\n     */\n    public validateLiteral(\n        source: string,\n        start = 0,\n        end: number = source.length,\n    ): void {\n        this._uFlag = this._nFlag = false\n        this.reset(source, start, end)\n\n        this.onLiteralEnter(start)\n        if (this.eat(Solidus) && this.eatRegExpBody() && this.eat(Solidus)) {\n            const flagStart = this.index\n            const uFlag = source.indexOf(\"u\", flagStart) !== -1\n            this.validateFlags(source, flagStart, end)\n            this.validatePattern(source, start + 1, flagStart - 1, uFlag)\n        } else if (start >= end) {\n            this.raise(\"Empty\")\n        } else {\n            const c = String.fromCodePoint(this.currentCodePoint)\n            this.raise(`Unexpected character '${c}'`)\n        }\n        this.onLiteralLeave(start, end)\n    }\n\n    /**\n     * Validate a regular expression flags. E.g. \"gim\"\n     * @param source The source code to validate.\n     * @param start The start index in the source code.\n     * @param end The end index in the source code.\n     */\n    public validateFlags(\n        source: string,\n        start = 0,\n        end: number = source.length,\n    ): void {\n        const existingFlags = new Set<number>()\n        let global = false\n        let ignoreCase = false\n        let multiline = false\n        let sticky = false\n        let unicode = false\n        let dotAll = false\n        for (let i = start; i < end; ++i) {\n            const flag = source.charCodeAt(i)\n\n            if (existingFlags.has(flag)) {\n                this.raise(`Duplicated flag '${source[i]}'`)\n            }\n            existingFlags.add(flag)\n\n            if (flag === LatinSmallLetterG) {\n                global = true\n            } else if (flag === LatinSmallLetterI) {\n                ignoreCase = true\n            } else if (flag === LatinSmallLetterM) {\n                multiline = true\n            } else if (flag === LatinSmallLetterU && this.ecmaVersion >= 2015) {\n                unicode = true\n            } else if (flag === LatinSmallLetterY && this.ecmaVersion >= 2015) {\n                sticky = true\n            } else if (flag === LatinSmallLetterS && this.ecmaVersion >= 2018) {\n                dotAll = true\n            } else {\n                this.raise(`Invalid flag '${source[i]}'`)\n            }\n        }\n        this.onFlags(\n            start,\n            end,\n            global,\n            ignoreCase,\n            multiline,\n            unicode,\n            sticky,\n            dotAll,\n        )\n    }\n\n    /**\n     * Validate a regular expression pattern. E.g. \"abc\"\n     * @param source The source code to validate.\n     * @param start The start index in the source code.\n     * @param end The end index in the source code.\n     * @param uFlag The flag to set unicode mode.\n     */\n    public validatePattern(\n        source: string,\n        start = 0,\n        end: number = source.length,\n        uFlag = false,\n    ): void {\n        this._uFlag = uFlag && this.ecmaVersion >= 2015\n        this._nFlag = uFlag && this.ecmaVersion >= 2018\n        this.reset(source, start, end)\n        this.pattern()\n\n        if (\n            !this._nFlag &&\n            this.ecmaVersion >= 2018 &&\n            this._groupNames.size > 0\n        ) {\n            this._nFlag = true\n            this.rewind(start)\n            this.pattern()\n        }\n    }\n\n    // #region Delegate for Options\n\n    private get strict() {\n        return Boolean(this._options.strict || this._uFlag)\n    }\n\n    private get ecmaVersion() {\n        return this._options.ecmaVersion || 2018\n    }\n\n    private onLiteralEnter(start: number): void {\n        if (this._options.onLiteralEnter) {\n            this._options.onLiteralEnter(start)\n        }\n    }\n\n    private onLiteralLeave(start: number, end: number): void {\n        if (this._options.onLiteralLeave) {\n            this._options.onLiteralLeave(start, end)\n        }\n    }\n\n    private onFlags(\n        start: number,\n        end: number,\n        global: boolean,\n        ignoreCase: boolean,\n        multiline: boolean,\n        unicode: boolean,\n        sticky: boolean,\n        dotAll: boolean,\n    ): void {\n        if (this._options.onFlags) {\n            this._options.onFlags(\n                start,\n                end,\n                global,\n                ignoreCase,\n                multiline,\n                unicode,\n                sticky,\n                dotAll,\n            )\n        }\n    }\n\n    private onPatternEnter(start: number): void {\n        if (this._options.onPatternEnter) {\n            this._options.onPatternEnter(start)\n        }\n    }\n\n    private onPatternLeave(start: number, end: number): void {\n        if (this._options.onPatternLeave) {\n            this._options.onPatternLeave(start, end)\n        }\n    }\n\n    private onDisjunctionEnter(start: number): void {\n        if (this._options.onDisjunctionEnter) {\n            this._options.onDisjunctionEnter(start)\n        }\n    }\n\n    private onDisjunctionLeave(start: number, end: number): void {\n        if (this._options.onDisjunctionLeave) {\n            this._options.onDisjunctionLeave(start, end)\n        }\n    }\n\n    private onAlternativeEnter(start: number, index: number): void {\n        if (this._options.onAlternativeEnter) {\n            this._options.onAlternativeEnter(start, index)\n        }\n    }\n\n    private onAlternativeLeave(\n        start: number,\n        end: number,\n        index: number,\n    ): void {\n        if (this._options.onAlternativeLeave) {\n            this._options.onAlternativeLeave(start, end, index)\n        }\n    }\n\n    private onGroupEnter(start: number): void {\n        if (this._options.onGroupEnter) {\n            this._options.onGroupEnter(start)\n        }\n    }\n\n    private onGroupLeave(start: number, end: number): void {\n        if (this._options.onGroupLeave) {\n            this._options.onGroupLeave(start, end)\n        }\n    }\n\n    private onCapturingGroupEnter(start: number, name: string | null): void {\n        if (this._options.onCapturingGroupEnter) {\n            this._options.onCapturingGroupEnter(start, name)\n        }\n    }\n\n    private onCapturingGroupLeave(\n        start: number,\n        end: number,\n        name: string | null,\n    ): void {\n        if (this._options.onCapturingGroupLeave) {\n            this._options.onCapturingGroupLeave(start, end, name)\n        }\n    }\n\n    private onQuantifier(\n        start: number,\n        end: number,\n        min: number,\n        max: number,\n        greedy: boolean,\n    ): void {\n        if (this._options.onQuantifier) {\n            this._options.onQuantifier(start, end, min, max, greedy)\n        }\n    }\n\n    private onLookaroundAssertionEnter(\n        start: number,\n        kind: \"lookahead\" | \"lookbehind\",\n        negate: boolean,\n    ): void {\n        if (this._options.onLookaroundAssertionEnter) {\n            this._options.onLookaroundAssertionEnter(start, kind, negate)\n        }\n    }\n\n    private onLookaroundAssertionLeave(\n        start: number,\n        end: number,\n        kind: \"lookahead\" | \"lookbehind\",\n        negate: boolean,\n    ): void {\n        if (this._options.onLookaroundAssertionLeave) {\n            this._options.onLookaroundAssertionLeave(start, end, kind, negate)\n        }\n    }\n\n    private onEdgeAssertion(\n        start: number,\n        end: number,\n        kind: \"start\" | \"end\",\n    ): void {\n        if (this._options.onEdgeAssertion) {\n            this._options.onEdgeAssertion(start, end, kind)\n        }\n    }\n\n    private onWordBoundaryAssertion(\n        start: number,\n        end: number,\n        kind: \"word\",\n        negate: boolean,\n    ): void {\n        if (this._options.onWordBoundaryAssertion) {\n            this._options.onWordBoundaryAssertion(start, end, kind, negate)\n        }\n    }\n\n    private onAnyCharacterSet(start: number, end: number, kind: \"any\"): void {\n        if (this._options.onAnyCharacterSet) {\n            this._options.onAnyCharacterSet(start, end, kind)\n        }\n    }\n\n    private onEscapeCharacterSet(\n        start: number,\n        end: number,\n        kind: \"digit\" | \"space\" | \"word\",\n        negate: boolean,\n    ): void {\n        if (this._options.onEscapeCharacterSet) {\n            this._options.onEscapeCharacterSet(start, end, kind, negate)\n        }\n    }\n\n    private onUnicodePropertyCharacterSet(\n        start: number,\n        end: number,\n        kind: \"property\",\n        key: string,\n        value: string | null,\n        negate: boolean,\n    ): void {\n        if (this._options.onUnicodePropertyCharacterSet) {\n            this._options.onUnicodePropertyCharacterSet(\n                start,\n                end,\n                kind,\n                key,\n                value,\n                negate,\n            )\n        }\n    }\n\n    private onCharacter(start: number, end: number, value: number): void {\n        if (this._options.onCharacter) {\n            this._options.onCharacter(start, end, value)\n        }\n    }\n\n    private onBackreference(\n        start: number,\n        end: number,\n        ref: number | string,\n    ): void {\n        if (this._options.onBackreference) {\n            this._options.onBackreference(start, end, ref)\n        }\n    }\n\n    private onCharacterClassEnter(start: number, negate: boolean): void {\n        if (this._options.onCharacterClassEnter) {\n            this._options.onCharacterClassEnter(start, negate)\n        }\n    }\n\n    private onCharacterClassLeave(\n        start: number,\n        end: number,\n        negate: boolean,\n    ): void {\n        if (this._options.onCharacterClassLeave) {\n            this._options.onCharacterClassLeave(start, end, negate)\n        }\n    }\n\n    private onCharacterClassRange(\n        start: number,\n        end: number,\n        min: number,\n        max: number,\n    ): void {\n        if (this._options.onCharacterClassRange) {\n            this._options.onCharacterClassRange(start, end, min, max)\n        }\n    }\n\n    // #endregion\n\n    // #region Delegate for Reader\n\n    private get source(): string {\n        return this._reader.source\n    }\n\n    private get index(): number {\n        return this._reader.index\n    }\n\n    private get currentCodePoint(): number {\n        return this._reader.currentCodePoint\n    }\n\n    private get nextCodePoint(): number {\n        return this._reader.nextCodePoint\n    }\n\n    private get nextCodePoint2(): number {\n        return this._reader.nextCodePoint2\n    }\n\n    private get nextCodePoint3(): number {\n        return this._reader.nextCodePoint3\n    }\n\n    private reset(source: string, start: number, end: number): void {\n        this._reader.reset(source, start, end, this._uFlag)\n    }\n\n    private rewind(index: number): void {\n        this._reader.rewind(index)\n    }\n\n    private advance(): void {\n        this._reader.advance()\n    }\n\n    private eat(cp: number): boolean {\n        return this._reader.eat(cp)\n    }\n\n    private eat2(cp1: number, cp2: number): boolean {\n        return this._reader.eat2(cp1, cp2)\n    }\n\n    private eat3(cp1: number, cp2: number, cp3: number): boolean {\n        return this._reader.eat3(cp1, cp2, cp3)\n    }\n\n    // #endregion\n\n    private raise(message: string): never {\n        throw new RegExpSyntaxError(\n            this.source,\n            this._uFlag,\n            this.index,\n            message,\n        )\n    }\n\n    // https://www.ecma-international.org/ecma-262/8.0/#prod-RegularExpressionBody\n    private eatRegExpBody(): boolean {\n        const start = this.index\n        let inClass = false\n        let escaped = false\n\n        for (;;) {\n            const cp = this.currentCodePoint\n            if (cp === -1 || isLineTerminator(cp)) {\n                const kind = inClass ? \"character class\" : \"regular expression\"\n                this.raise(`Unterminated ${kind}`)\n            }\n            if (escaped) {\n                escaped = false\n            } else if (cp === ReverseSolidus) {\n                escaped = true\n            } else if (cp === LeftSquareBracket) {\n                inClass = true\n            } else if (cp === RightSquareBracket) {\n                inClass = false\n            } else if (\n                (cp === Solidus && !inClass) ||\n                (cp === Asterisk && this.index === start)\n            ) {\n                break\n            }\n            this.advance()\n        }\n\n        return this.index !== start\n    }\n\n    // https://www.ecma-international.org/ecma-262/8.0/#prod-Pattern\n    private pattern(): void {\n        const start = this.index\n        this._numCapturingParens = this.countCapturingParens()\n        this._groupNames.clear()\n        this._backreferenceNames.clear()\n\n        this.onPatternEnter(start)\n        this.disjunction()\n\n        const cp = this.currentCodePoint\n        if (this.currentCodePoint !== -1) {\n            if (cp === RightParenthesis) {\n                this.raise(\"Unmatched ')'\")\n            }\n            if (cp === ReverseSolidus) {\n                this.raise(\"\\\\ at end of pattern\")\n            }\n            if (cp === RightSquareBracket || cp === RightCurlyBracket) {\n                this.raise(\"Lone quantifier brackets\")\n            }\n            const c = String.fromCodePoint(cp)\n            this.raise(`Unexpected character '${c}'`)\n        }\n        for (const name of this._backreferenceNames) {\n            if (!this._groupNames.has(name)) {\n                this.raise(\"Invalid named capture referenced\")\n            }\n        }\n        this.onPatternLeave(start, this.index)\n    }\n\n    private countCapturingParens(): number {\n        const start = this.index\n        let inClass = false\n        let escaped = false\n        let count = 0\n        let cp = 0\n\n        while ((cp = this.currentCodePoint) !== -1) {\n            if (escaped) {\n                escaped = false\n            } else if (cp === ReverseSolidus) {\n                escaped = true\n            } else if (cp === LeftSquareBracket) {\n                inClass = true\n            } else if (cp === RightSquareBracket) {\n                inClass = false\n            } else if (\n                cp === LeftParenthesis &&\n                !inClass &&\n                (this.nextCodePoint !== QuestionMark ||\n                    (this.nextCodePoint2 === LessThanSign &&\n                        this.nextCodePoint3 !== EqualsSign &&\n                        this.nextCodePoint3 !== ExclamationMark))\n            ) {\n                count += 1\n            }\n            this.advance()\n        }\n\n        this.rewind(start)\n        return count\n    }\n\n    // https://www.ecma-international.org/ecma-262/8.0/#prod-Disjunction\n    private disjunction(): void {\n        const start = this.index\n        let i = 0\n\n        this.onDisjunctionEnter(start)\n        this.alternative(i++)\n        while (this.eat(VerticalLine)) {\n            this.alternative(i++)\n        }\n\n        if (this.eatQuantifier(true)) {\n            this.raise(\"Nothing to repeat\")\n        }\n        if (this.eat(LeftCurlyBracket)) {\n            this.raise(\"Lone quantifier brackets\")\n        }\n        this.onDisjunctionLeave(start, this.index)\n    }\n\n    // https://www.ecma-international.org/ecma-262/8.0/#prod-Alternative\n    private alternative(i: number): void {\n        const start = this.index\n\n        this.onAlternativeEnter(start, i)\n        while (this.currentCodePoint !== -1 && this.eatTerm()) {\n            // do nothing.\n        }\n        this.onAlternativeLeave(start, this.index, i)\n    }\n\n    // https://www.ecma-international.org/ecma-262/8.0/#prod-strict-Term\n    private eatTerm(): boolean {\n        if (this.eatAssertion()) {\n            // Handle `QuantifiableAssertion Quantifier` alternative.\n            // `this.lastAssertionIsQuantifiable` is true if the last eaten\n            // Assertion is a QuantifiableAssertion.\n            if (this._lastAssertionIsQuantifiable) {\n                this.eatQuantifier()\n            }\n            return true\n        }\n\n        if (this.strict ? this.eatAtom() : this.eatExtendedAtom()) {\n            this.eatQuantifier()\n            return true\n        }\n\n        return false\n    }\n\n    // https://www.ecma-international.org/ecma-262/8.0/#prod-strict-Assertion\n    private eatAssertion(): boolean {\n        const start = this.index\n        this._lastAssertionIsQuantifiable = false\n\n        // ^, $, \\B \\b\n        if (this.eat(CircumflexAccent)) {\n            this.onEdgeAssertion(start, this.index, \"start\")\n            return true\n        }\n        if (this.eat(DollarSign)) {\n            this.onEdgeAssertion(start, this.index, \"end\")\n            return true\n        }\n        if (this.eat2(ReverseSolidus, LatinCapitalLetterB)) {\n            this.onWordBoundaryAssertion(start, this.index, \"word\", true)\n            return true\n        }\n        if (this.eat2(ReverseSolidus, LatinSmallLetterB)) {\n            this.onWordBoundaryAssertion(start, this.index, \"word\", false)\n            return true\n        }\n\n        // Lookahead / Lookbehind\n        if (this.eat2(LeftParenthesis, QuestionMark)) {\n            const lookbehind =\n                this.ecmaVersion >= 2018 && this.eat(LessThanSign)\n            let negate = false\n            if (this.eat(EqualsSign) || (negate = this.eat(ExclamationMark))) {\n                const kind = lookbehind ? \"lookbehind\" : \"lookahead\"\n                this.onLookaroundAssertionEnter(start, kind, negate)\n                this.disjunction()\n                if (!this.eat(RightParenthesis)) {\n                    this.raise(\"Unterminated group\")\n                }\n                this._lastAssertionIsQuantifiable = !lookbehind && !this.strict\n                this.onLookaroundAssertionLeave(start, this.index, kind, negate)\n                return true\n            }\n            this.rewind(start)\n        }\n\n        return false\n    }\n\n    // https://www.ecma-international.org/ecma-262/8.0/#prod-Quantifier\n    // https://www.ecma-international.org/ecma-262/8.0/#prod-QuantifierPrefix\n    private eatQuantifier(noError = false): boolean {\n        const start = this.index\n        let min = 0\n        let max = 0\n        let greedy = false\n\n        if (this.eat(Asterisk)) {\n            min = 0\n            max = Number.POSITIVE_INFINITY\n        } else if (this.eat(PlusSign)) {\n            min = 1\n            max = Number.POSITIVE_INFINITY\n        } else if (this.eat(QuestionMark)) {\n            min = 0\n            max = 1\n        } else if (this.eatBracedQuantifier(noError)) {\n            min = this._lastMinValue\n            max = this._lastMaxValue\n        } else {\n            return false\n        }\n        greedy = !this.eat(QuestionMark)\n\n        if (!noError) {\n            this.onQuantifier(start, this.index, min, max, greedy)\n        }\n        return true\n    }\n\n    private eatBracedQuantifier(noError: boolean): boolean {\n        const start = this.index\n        if (this.eat(LeftCurlyBracket)) {\n            this._lastMinValue = 0\n            this._lastMaxValue = Number.POSITIVE_INFINITY\n            if (this.eatDecimalDigits()) {\n                this._lastMinValue = this._lastMaxValue = this._lastIntValue\n                if (this.eat(Comma)) {\n                    this._lastMaxValue = this.eatDecimalDigits()\n                        ? this._lastIntValue\n                        : Number.POSITIVE_INFINITY\n                }\n                if (this.eat(RightCurlyBracket)) {\n                    if (!noError && this._lastMaxValue < this._lastMinValue) {\n                        this.raise(\"numbers out of order in {} quantifier\")\n                    }\n                    return true\n                }\n            }\n            if (!noError && this.strict) {\n                this.raise(\"Incomplete quantifier\")\n            }\n            this.rewind(start)\n        }\n        return false\n    }\n\n    // https://www.ecma-international.org/ecma-262/8.0/#prod-Atom\n    private eatAtom(): boolean {\n        return (\n            this.eatPatternCharacter() ||\n            this.eatDot() ||\n            this.eatReverseSolidusAtomEscape() ||\n            this.eatCharacterClass() ||\n            this.eatUncapturingGroup() ||\n            this.eatCapturingGroup()\n        )\n    }\n\n    private eatDot(): boolean {\n        if (this.eat(FullStop)) {\n            this.onAnyCharacterSet(this.index - 1, this.index, \"any\")\n            return true\n        }\n        return false\n    }\n\n    private eatReverseSolidusAtomEscape(): boolean {\n        const start = this.index\n        if (this.eat(ReverseSolidus)) {\n            if (this.eatAtomEscape()) {\n                return true\n            }\n            this.rewind(start)\n        }\n        return false\n    }\n\n    private eatUncapturingGroup(): boolean {\n        const start = this.index\n        if (this.eat3(LeftParenthesis, QuestionMark, Colon)) {\n            this.onGroupEnter(start)\n            this.disjunction()\n            if (!this.eat(RightParenthesis)) {\n                this.raise(\"Unterminated group\")\n            }\n            this.onGroupLeave(start, this.index)\n            return true\n        }\n        return false\n    }\n\n    private eatCapturingGroup(): boolean {\n        const start = this.index\n        if (this.eat(LeftParenthesis)) {\n            this._lastStrValue = \"\"\n            if (this.ecmaVersion >= 2018) {\n                this.groupSpecifier()\n            } else if (this.currentCodePoint === QuestionMark) {\n                this.raise(\"Invalid group\")\n            }\n            const name = this._lastStrValue || null\n\n            this.onCapturingGroupEnter(start, name)\n            this.disjunction()\n            if (!this.eat(RightParenthesis)) {\n                this.raise(\"Unterminated group\")\n            }\n            this.onCapturingGroupLeave(start, this.index, name)\n\n            return true\n        }\n        return false\n    }\n\n    // https://www.ecma-international.org/ecma-262/8.0/#prod-strict-ExtendedAtom\n    private eatExtendedAtom(): boolean {\n        return (\n            this.eatDot() ||\n            this.eatReverseSolidusAtomEscape() ||\n            this.eatReverseSolidusFollowedByC() ||\n            this.eatCharacterClass() ||\n            this.eatUncapturingGroup() ||\n            this.eatCapturingGroup() ||\n            this.eatInvalidBracedQuantifier() ||\n            this.eatExtendedPatternCharacter()\n        )\n    }\n\n    // \\ [lookahead = c]\n    private eatReverseSolidusFollowedByC(): boolean {\n        if (\n            this.currentCodePoint === ReverseSolidus &&\n            this.nextCodePoint === LatinSmallLetterC\n        ) {\n            this._lastIntValue = this.currentCodePoint\n            this.advance()\n            this.onCharacter(this.index - 1, this.index, ReverseSolidus)\n            return true\n        }\n        return false\n    }\n\n    // https://www.ecma-international.org/ecma-262/8.0/#prod-strict-InvalidBracedQuantifier\n    private eatInvalidBracedQuantifier(): boolean {\n        if (this.eatBracedQuantifier(true)) {\n            this.raise(\"Nothing to repeat\")\n        }\n        return false\n    }\n\n    // https://www.ecma-international.org/ecma-262/8.0/#prod-SyntaxCharacter\n    private eatSyntaxCharacter(): boolean {\n        if (isSyntaxCharacter(this.currentCodePoint)) {\n            this._lastIntValue = this.currentCodePoint\n            this.advance()\n            return true\n        }\n        return false\n    }\n\n    // https://www.ecma-international.org/ecma-262/8.0/#prod-PatternCharacter\n    private eatPatternCharacter(): boolean {\n        const start = this.index\n        const cp = this.currentCodePoint\n        if (cp !== -1 && !isSyntaxCharacter(cp)) {\n            this.advance()\n            this.onCharacter(start, this.index, cp)\n            return true\n        }\n        return false\n    }\n\n    // https://www.ecma-international.org/ecma-262/8.0/#prod-strict-ExtendedPatternCharacter\n    private eatExtendedPatternCharacter(): boolean {\n        const start = this.index\n        const cp = this.currentCodePoint\n        if (\n            cp !== -1 &&\n            cp !== CircumflexAccent &&\n            cp !== DollarSign &&\n            cp !== ReverseSolidus &&\n            cp !== FullStop &&\n            cp !== Asterisk &&\n            cp !== PlusSign &&\n            cp !== QuestionMark &&\n            cp !== LeftParenthesis &&\n            cp !== RightParenthesis &&\n            cp !== LeftSquareBracket &&\n            cp !== VerticalLine\n        ) {\n            this.advance()\n            this.onCharacter(start, this.index, cp)\n            return true\n        }\n        return false\n    }\n\n    // GroupSpecifier[U] ::\n    //   [empty]\n    //   `?` GroupName[?U]\n    private groupSpecifier(): void {\n        this._lastStrValue = \"\"\n        if (this.eat(QuestionMark)) {\n            if (this.eatGroupName()) {\n                if (!this._groupNames.has(this._lastStrValue)) {\n                    this._groupNames.add(this._lastStrValue)\n                    return\n                }\n                this.raise(\"Duplicate capture group name\")\n            }\n            this.raise(\"Invalid group\")\n        }\n    }\n\n    // GroupName[U] ::\n    //   `<` RegExpIdentifierName[?U] `>`\n    private eatGroupName(): boolean {\n        this._lastStrValue = \"\"\n        if (this.eat(LessThanSign)) {\n            if (this.eatRegExpIdentifierName() && this.eat(GreaterThanSign)) {\n                return true\n            }\n            this.raise(\"Invalid capture group name\")\n        }\n        return false\n    }\n\n    // RegExpIdentifierName[U] ::\n    //   RegExpIdentifierStart[?U]\n    //   RegExpIdentifierName[?U] RegExpIdentifierPart[?U]\n    private eatRegExpIdentifierName(): boolean {\n        this._lastStrValue = \"\"\n        if (this.eatRegExpIdentifierStart()) {\n            this._lastStrValue += String.fromCodePoint(this._lastIntValue)\n            while (this.eatRegExpIdentifierPart()) {\n                this._lastStrValue += String.fromCodePoint(this._lastIntValue)\n            }\n            return true\n        }\n        return false\n    }\n\n    // RegExpIdentifierStart[U] ::\n    //   UnicodeIDStart\n    //   `$`\n    //   `_`\n    //   `\\` RegExpUnicodeEscapeSequence[?U]\n    private eatRegExpIdentifierStart(): boolean {\n        const start = this.index\n        let cp = this.currentCodePoint\n        this.advance()\n\n        if (cp === ReverseSolidus && this.eatRegExpUnicodeEscapeSequence()) {\n            cp = this._lastIntValue\n        }\n        if (isRegExpIdentifierStart(cp)) {\n            this._lastIntValue = cp\n            return true\n        }\n\n        if (this.index !== start) {\n            this.rewind(start)\n        }\n        return false\n    }\n\n    // RegExpIdentifierPart[U] ::\n    //   UnicodeIDContinue\n    //   `$`\n    //   `_`\n    //   `\\` RegExpUnicodeEscapeSequence[?U]\n    //   <Zwnj>\n    //   <Zwj>\n    private eatRegExpIdentifierPart(): boolean {\n        const start = this.index\n        let cp = this.currentCodePoint\n        this.advance()\n\n        if (cp === ReverseSolidus && this.eatRegExpUnicodeEscapeSequence()) {\n            cp = this._lastIntValue\n        }\n        if (isRegExpIdentifierPart(cp)) {\n            this._lastIntValue = cp\n            return true\n        }\n\n        if (this.index !== start) {\n            this.rewind(start)\n        }\n        return false\n    }\n\n    // https://www.ecma-international.org/ecma-262/8.0/#prod-strict-AtomEscape\n    private eatAtomEscape(): boolean {\n        if (\n            this.eatBackreference() ||\n            this.eatCharacterClassEscape() ||\n            this.eatCharacterEscape() ||\n            (this._nFlag && this.eatKGroupName())\n        ) {\n            return true\n        }\n        if (this.strict || this._uFlag) {\n            this.raise(\"Invalid escape\")\n        }\n        return false\n    }\n\n    private eatBackreference(): boolean {\n        const start = this.index\n        if (this.eatDecimalEscape()) {\n            const n = this._lastIntValue\n            if (n <= this._numCapturingParens) {\n                this.onBackreference(start - 1, this.index, n)\n                return true\n            }\n            if (this.strict) {\n                this.raise(\"Invalid escape\")\n            }\n            this.rewind(start)\n        }\n        return false\n    }\n\n    private eatKGroupName(): boolean {\n        const start = this.index\n        if (this.eat(LatinSmallLetterK)) {\n            if (this.eatGroupName()) {\n                const groupName = this._lastStrValue\n                this._backreferenceNames.add(groupName)\n                this.onBackreference(start - 1, this.index, groupName)\n                return true\n            }\n            this.raise(\"Invalid named reference\")\n        }\n        return false\n    }\n\n    // https://www.ecma-international.org/ecma-262/8.0/#prod-strict-CharacterEscape\n    private eatCharacterEscape(): boolean {\n        const start = this.index\n        if (\n            this.eatControlEscape() ||\n            this.eatCControlLetter() ||\n            this.eatZero() ||\n            this.eatHexEscapeSequence() ||\n            this.eatRegExpUnicodeEscapeSequence() ||\n            (!this.strict && this.eatLegacyOctalEscapeSequence()) ||\n            this.eatIdentityEscape()\n        ) {\n            this.onCharacter(start - 1, this.index, this._lastIntValue)\n            return true\n        }\n        return false\n    }\n\n    private eatCControlLetter(): boolean {\n        const start = this.index\n        if (this.eat(LatinSmallLetterC)) {\n            if (this.eatControlLetter()) {\n                return true\n            }\n            this.rewind(start)\n        }\n        return false\n    }\n\n    private eatZero(): boolean {\n        if (\n            this.currentCodePoint === DigitZero &&\n            !isDecimalDigit(this.nextCodePoint)\n        ) {\n            this._lastIntValue = 0\n            this.advance()\n            return true\n        }\n        return false\n    }\n\n    // https://www.ecma-international.org/ecma-262/8.0/#prod-ControlEscape\n    private eatControlEscape(): boolean {\n        if (this.eat(LatinSmallLetterT)) {\n            this._lastIntValue = CharacterTabulation\n            return true\n        }\n        if (this.eat(LatinSmallLetterN)) {\n            this._lastIntValue = LineFeed\n            return true\n        }\n        if (this.eat(LatinSmallLetterV)) {\n            this._lastIntValue = LineTabulation\n            return true\n        }\n        if (this.eat(LatinSmallLetterF)) {\n            this._lastIntValue = FormFeed\n            return true\n        }\n        if (this.eat(LatinSmallLetterR)) {\n            this._lastIntValue = CarriageReturn\n            return true\n        }\n        return false\n    }\n\n    // https://www.ecma-international.org/ecma-262/8.0/#prod-ControlLetter\n    private eatControlLetter(): boolean {\n        const cp = this.currentCodePoint\n        if (isLatinLetter(cp)) {\n            this.advance()\n            this._lastIntValue = cp % 0x20\n            return true\n        }\n        return false\n    }\n\n    // https://www.ecma-international.org/ecma-262/8.0/#prod-RegExpUnicodeEscapeSequence\n    //eslint-disable-next-line complexity\n    private eatRegExpUnicodeEscapeSequence(): boolean {\n        const start = this.index\n\n        if (this.eat(LatinSmallLetterU)) {\n            if (this.eatFixedHexDigits(4)) {\n                const lead = this._lastIntValue\n                if (this._uFlag && lead >= 0xd800 && lead <= 0xdbff) {\n                    const leadSurrogateEnd = this.index\n                    if (\n                        this.eat(ReverseSolidus) &&\n                        this.eat(LatinSmallLetterU) &&\n                        this.eatFixedHexDigits(4)\n                    ) {\n                        const trail = this._lastIntValue\n                        if (trail >= 0xdc00 && trail <= 0xdfff) {\n                            this._lastIntValue =\n                                (lead - 0xd800) * 0x400 +\n                                (trail - 0xdc00) +\n                                0x10000\n                            return true\n                        }\n                    }\n                    this.rewind(leadSurrogateEnd)\n                    this._lastIntValue = lead\n                }\n                return true\n            }\n            if (\n                this._uFlag &&\n                this.eat(LeftCurlyBracket) &&\n                this.eatHexDigits() &&\n                this.eat(RightCurlyBracket) &&\n                isValidUnicode(this._lastIntValue)\n            ) {\n                return true\n            }\n            if (this.strict || this._uFlag) {\n                this.raise(\"Invalid unicode escape\")\n            }\n            this.rewind(start)\n        }\n\n        return false\n    }\n\n    // https://www.ecma-international.org/ecma-262/8.0/#prod-strict-IdentityEscape\n    private eatIdentityEscape(): boolean {\n        if (this._uFlag) {\n            if (this.eatSyntaxCharacter()) {\n                return true\n            }\n            if (this.eat(Solidus)) {\n                this._lastIntValue = Solidus\n                return true\n            }\n            return false\n        }\n\n        if (this.isValidIdentityEscape(this.currentCodePoint)) {\n            this._lastIntValue = this.currentCodePoint\n            this.advance()\n            return true\n        }\n\n        return false\n    }\n    private isValidIdentityEscape(cp: number): boolean {\n        if (cp === -1) {\n            return false\n        }\n        if (this.strict) {\n            return !isIdContinue(cp)\n        }\n        return (\n            cp !== LatinSmallLetterC &&\n            (!this._nFlag || cp !== LatinSmallLetterK)\n        )\n    }\n\n    // https://www.ecma-international.org/ecma-262/8.0/#prod-DecimalEscape\n    private eatDecimalEscape(): boolean {\n        this._lastIntValue = 0\n        let cp = this.currentCodePoint\n        if (cp >= DigitOne && cp <= DigitNine) {\n            do {\n                this._lastIntValue = 10 * this._lastIntValue + (cp - DigitZero)\n                this.advance()\n            } while (\n                (cp = this.currentCodePoint) >= DigitZero &&\n                cp <= DigitNine\n            )\n            return true\n        }\n        return false\n    }\n\n    // https://www.ecma-international.org/ecma-262/8.0/#prod-CharacterClassEscape\n    private eatCharacterClassEscape(): boolean {\n        const start = this.index\n\n        if (this.eat(LatinSmallLetterD)) {\n            this._lastIntValue = -1\n            this.onEscapeCharacterSet(start - 1, this.index, \"digit\", false)\n            return true\n        }\n        if (this.eat(LatinCapitalLetterD)) {\n            this._lastIntValue = -1\n            this.onEscapeCharacterSet(start - 1, this.index, \"digit\", true)\n            return true\n        }\n        if (this.eat(LatinSmallLetterS)) {\n            this._lastIntValue = -1\n            this.onEscapeCharacterSet(start - 1, this.index, \"space\", false)\n            return true\n        }\n        if (this.eat(LatinCapitalLetterS)) {\n            this._lastIntValue = -1\n            this.onEscapeCharacterSet(start - 1, this.index, \"space\", true)\n            return true\n        }\n        if (this.eat(LatinSmallLetterW)) {\n            this._lastIntValue = -1\n            this.onEscapeCharacterSet(start - 1, this.index, \"word\", false)\n            return true\n        }\n        if (this.eat(LatinCapitalLetterW)) {\n            this._lastIntValue = -1\n            this.onEscapeCharacterSet(start - 1, this.index, \"word\", true)\n            return true\n        }\n\n        let negate = false\n        if (\n            this._uFlag &&\n            this.ecmaVersion >= 2018 &&\n            (this.eat(LatinSmallLetterP) ||\n                (negate = this.eat(LatinCapitalLetterP)))\n        ) {\n            this._lastIntValue = -1\n            if (\n                this.eat(LeftCurlyBracket) &&\n                this.eatUnicodePropertyValueExpression() &&\n                this.eat(RightCurlyBracket)\n            ) {\n                this.onUnicodePropertyCharacterSet(\n                    start - 1,\n                    this.index,\n                    \"property\",\n                    this._lastKeyValue,\n                    this._lastValValue || null,\n                    negate,\n                )\n                return true\n            }\n            this.raise(\"Invalid property name\")\n        }\n\n        return false\n    }\n\n    // UnicodePropertyValueExpression ::\n    //   UnicodePropertyName `=` UnicodePropertyValue\n    //   LoneUnicodePropertyNameOrValue\n    private eatUnicodePropertyValueExpression(): boolean {\n        const start = this.index\n\n        // UnicodePropertyName `=` UnicodePropertyValue\n        if (this.eatUnicodePropertyName() && this.eat(EqualsSign)) {\n            this._lastKeyValue = this._lastStrValue\n            if (this.eatUnicodePropertyValue()) {\n                this._lastValValue = this._lastStrValue\n                if (\n                    isValidUnicodeProperty(\n                        this._lastKeyValue,\n                        this._lastValValue,\n                    )\n                ) {\n                    return true\n                }\n                this.raise(\"Invalid property name\")\n            }\n        }\n        this.rewind(start)\n\n        // LoneUnicodePropertyNameOrValue\n        if (this.eatLoneUnicodePropertyNameOrValue()) {\n            const nameOrValue = this._lastStrValue\n            if (isValidUnicodeProperty(\"General_Category\", nameOrValue)) {\n                this._lastKeyValue = \"General_Category\"\n                this._lastValValue = nameOrValue\n                return true\n            }\n            if (isValidUnicodePropertyName(nameOrValue)) {\n                this._lastKeyValue = nameOrValue\n                this._lastValValue = \"\"\n                return true\n            }\n            this.raise(\"Invalid property name\")\n        }\n        return false\n    }\n\n    // UnicodePropertyName ::\n    //   UnicodePropertyNameCharacters\n    private eatUnicodePropertyName(): boolean {\n        this._lastStrValue = \"\"\n        while (isUnicodePropertyNameCharacter(this.currentCodePoint)) {\n            this._lastStrValue += String.fromCodePoint(this.currentCodePoint)\n            this.advance()\n        }\n        return this._lastStrValue !== \"\"\n    }\n\n    // UnicodePropertyValue ::\n    //   UnicodePropertyValueCharacters\n    private eatUnicodePropertyValue(): boolean {\n        this._lastStrValue = \"\"\n        while (isUnicodePropertyValueCharacter(this.currentCodePoint)) {\n            this._lastStrValue += String.fromCodePoint(this.currentCodePoint)\n            this.advance()\n        }\n        return this._lastStrValue !== \"\"\n    }\n\n    // LoneUnicodePropertyNameOrValue ::\n    //   UnicodePropertyValueCharacters\n    private eatLoneUnicodePropertyNameOrValue(): boolean {\n        return this.eatUnicodePropertyValue()\n    }\n\n    // https://www.ecma-international.org/ecma-262/8.0/#prod-CharacterClass\n    private eatCharacterClass(): boolean {\n        const start = this.index\n        if (this.eat(LeftSquareBracket)) {\n            const negate = this.eat(CircumflexAccent)\n            this.onCharacterClassEnter(start, negate)\n            this.classRanges()\n            if (!this.eat(RightSquareBracket)) {\n                this.raise(\"Unterminated character class\")\n            }\n            this.onCharacterClassLeave(start, this.index, negate)\n            return true\n        }\n        return false\n    }\n\n    // https://www.ecma-international.org/ecma-262/8.0/#prod-ClassRanges\n    // https://www.ecma-international.org/ecma-262/8.0/#prod-NonemptyClassRanges\n    // https://www.ecma-international.org/ecma-262/8.0/#prod-NonemptyClassRangesNoDash\n    private classRanges(): void {\n        let start = this.index\n        while (this.eatClassAtom()) {\n            const left = this._lastIntValue\n            const hyphenStart = this.index\n            if (this.eat(HyphenMinus)) {\n                this.onCharacter(hyphenStart, this.index, HyphenMinus)\n\n                if (this.eatClassAtom()) {\n                    const right = this._lastIntValue\n\n                    if (left === -1 || right === -1) {\n                        if (this.strict) {\n                            this.raise(\"Invalid character class\")\n                        }\n                    } else if (!this._options.disableChkCharacterClassRange && left > right) {\n                        this.raise(\"Range out of order in character class\")\n                    } else {\n                        this.onCharacterClassRange(\n                            start,\n                            this.index,\n                            left,\n                            right,\n                        )\n                    }\n                }\n            }\n\n            start = this.index\n        }\n    }\n\n    // https://www.ecma-international.org/ecma-262/8.0/#prod-ClassAtom\n    // https://www.ecma-international.org/ecma-262/8.0/#prod-ClassAtomNoDash\n    private eatClassAtom(): boolean {\n        const start = this.index\n\n        if (this.eat(ReverseSolidus)) {\n            if (this.eatClassEscape()) {\n                return true\n            }\n            if (this._uFlag) {\n                this.raise(\"Invalid escape\")\n            }\n            this.rewind(start)\n        }\n\n        const cp = this.currentCodePoint\n        if (cp !== -1 && cp !== RightSquareBracket) {\n            this.advance()\n            this._lastIntValue = cp\n            this.onCharacter(start, this.index, cp)\n            return true\n        }\n\n        return false\n    }\n\n    // https://www.ecma-international.org/ecma-262/8.0/#prod-strict-ClassEscape\n    private eatClassEscape(): boolean {\n        const start = this.index\n\n        if (this.eat(LatinSmallLetterB)) {\n            this._lastIntValue = Backspace\n            this.onCharacter(start - 1, this.index, Backspace)\n            return true\n        }\n\n        if (this._uFlag && this.eat(HyphenMinus)) {\n            this._lastIntValue = HyphenMinus\n            this.onCharacter(start - 1, this.index, HyphenMinus)\n            return true\n        }\n\n        if (!this._uFlag && this.eat(LatinSmallLetterC)) {\n            if (this.eatClassControlLetter()) {\n                this.onCharacter(start - 1, this.index, this._lastIntValue)\n                return true\n            }\n            this.rewind(start)\n        }\n\n        return this.eatCharacterClassEscape() || this.eatCharacterEscape()\n    }\n\n    // https://www.ecma-international.org/ecma-262/8.0/#prod-strict-ClassControlLetter\n    private eatClassControlLetter(): boolean {\n        const cp = this.currentCodePoint\n        if (isDecimalDigit(cp) || cp === LowLine) {\n            this.advance()\n            this._lastIntValue = cp % 0x20\n            return true\n        }\n        return false\n    }\n\n    // https://www.ecma-international.org/ecma-262/8.0/#prod-HexEscapeSequence\n    private eatHexEscapeSequence(): boolean {\n        const start = this.index\n        if (this.eat(LatinSmallLetterX)) {\n            if (this.eatFixedHexDigits(2)) {\n                return true\n            }\n            if (this._uFlag) {\n                this.raise(\"Invalid escape\")\n            }\n            this.rewind(start)\n        }\n        return false\n    }\n\n    // https://www.ecma-international.org/ecma-262/8.0/#prod-DecimalDigits\n    private eatDecimalDigits(): boolean {\n        const start = this.index\n\n        this._lastIntValue = 0\n        while (isDecimalDigit(this.currentCodePoint)) {\n            this._lastIntValue =\n                10 * this._lastIntValue + digitToInt(this.currentCodePoint)\n            this.advance()\n        }\n\n        return this.index !== start\n    }\n\n    // https://www.ecma-international.org/ecma-262/8.0/#prod-HexDigits\n    private eatHexDigits(): boolean {\n        const start = this.index\n        this._lastIntValue = 0\n        while (isHexDigit(this.currentCodePoint)) {\n            this._lastIntValue =\n                16 * this._lastIntValue + digitToInt(this.currentCodePoint)\n            this.advance()\n        }\n        return this.index !== start\n    }\n\n    // https://www.ecma-international.org/ecma-262/8.0/#prod-strict-LegacyOctalEscapeSequence\n    // Allows only 0-377(octal) i.e. 0-255(decimal).\n    private eatLegacyOctalEscapeSequence(): boolean {\n        if (this.eatOctalDigit()) {\n            const n1 = this._lastIntValue\n            if (this.eatOctalDigit()) {\n                const n2 = this._lastIntValue\n                if (n1 <= 3 && this.eatOctalDigit()) {\n                    this._lastIntValue = n1 * 64 + n2 * 8 + this._lastIntValue\n                } else {\n                    this._lastIntValue = n1 * 8 + n2\n                }\n            } else {\n                this._lastIntValue = n1\n            }\n            return true\n        }\n        return false\n    }\n\n    // https://www.ecma-international.org/ecma-262/8.0/#prod-OctalDigit\n    private eatOctalDigit(): boolean {\n        const cp = this.currentCodePoint\n        if (isOctalDigit(cp)) {\n            this.advance()\n            this._lastIntValue = cp - DigitZero\n            return true\n        }\n        this._lastIntValue = 0\n        return false\n    }\n\n    // https://www.ecma-international.org/ecma-262/8.0/#prod-Hex4Digits\n    // https://www.ecma-international.org/ecma-262/8.0/#prod-HexDigit\n    // And HexDigit HexDigit in https://www.ecma-international.org/ecma-262/8.0/#prod-HexEscapeSequence\n    private eatFixedHexDigits(length: number): boolean {\n        const start = this.index\n        this._lastIntValue = 0\n        for (let i = 0; i < length; ++i) {\n            const cp = this.currentCodePoint\n            if (!isHexDigit(cp)) {\n                this.rewind(start)\n                return false\n            }\n            this._lastIntValue = 16 * this._lastIntValue + digitToInt(cp)\n            this.advance()\n        }\n        return true\n    }\n}\n"]}