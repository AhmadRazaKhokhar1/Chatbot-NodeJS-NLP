{"version":3,"file":"visitor.js","sourceRoot":"","sources":["visitor.ts"],"names":[],"mappings":";;;AAiBA;;;GAGG;AACH,MAAa,aAAa;IAGtB;;;OAGG;IACH,YAAmB,QAAgC;QAC/C,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAA;IAC7B,CAAC;IAED;;;OAGG;IACI,KAAK,CAAC,IAAU;QACnB,QAAQ,IAAI,CAAC,IAAI,EAAE;YACf,aAAa;YACb,KAAK,aAAa;gBACd,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAA;gBAC3B,MAAK;YACT,KAAK,WAAW;gBACZ,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAA;gBACzB,MAAK;YACT,KAAK,eAAe;gBAChB,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAA;gBAC7B,MAAK;YACT,KAAK,gBAAgB;gBACjB,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAA;gBAC9B,MAAK;YACT,KAAK,WAAW;gBACZ,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAA;gBACzB,MAAK;YACT,KAAK,gBAAgB;gBACjB,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAA;gBAC9B,MAAK;YACT,KAAK,qBAAqB;gBACtB,IAAI,CAAC,wBAAwB,CAAC,IAAI,CAAC,CAAA;gBACnC,MAAK;YACT,KAAK,cAAc;gBACf,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAA;gBAC5B,MAAK;YACT,KAAK,OAAO;gBACR,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAA;gBACrB,MAAK;YACT,KAAK,OAAO;gBACR,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAA;gBACrB,MAAK;YACT,KAAK,SAAS;gBACV,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAA;gBACvB,MAAK;YACT,KAAK,YAAY;gBACb,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,CAAA;gBAC1B,MAAK;YACT,KAAK,eAAe;gBAChB,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAA;gBAC7B,MAAK;YACT;gBACI,MAAM,IAAI,KAAK,CAAC,iBAAkB,IAAY,CAAC,IAAI,EAAE,CAAC,CAAA;SAC7D;IACL,CAAC;IAED,aAAa;IACL,gBAAgB,CAAC,IAAiB;QACtC,IAAI,IAAI,CAAC,SAAS,CAAC,kBAAkB,EAAE;YACnC,IAAI,CAAC,SAAS,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAA;SAC1C;QACD,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,CAAA;QACvC,IAAI,IAAI,CAAC,SAAS,CAAC,kBAAkB,EAAE;YACnC,IAAI,CAAC,SAAS,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAA;SAC1C;IACL,CAAC;IACO,cAAc,CAAC,IAAe;QAClC,IAAI,IAAI,CAAC,SAAS,CAAC,gBAAgB,EAAE;YACjC,IAAI,CAAC,SAAS,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAA;SACxC;QACD,IAAI,IAAI,CAAC,IAAI,KAAK,WAAW,IAAI,IAAI,CAAC,IAAI,KAAK,YAAY,EAAE;YACzD,aAAa;YACb,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,CAAA;SAC9C;QACD,IAAI,IAAI,CAAC,SAAS,CAAC,gBAAgB,EAAE;YACjC,IAAI,CAAC,SAAS,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAA;SACxC;IACL,CAAC;IACO,kBAAkB,CAAC,IAAmB;QAC1C,IAAI,IAAI,CAAC,SAAS,CAAC,oBAAoB,EAAE;YACrC,IAAI,CAAC,SAAS,CAAC,oBAAoB,CAAC,IAAI,CAAC,CAAA;SAC5C;QACD,IAAI,IAAI,CAAC,SAAS,CAAC,oBAAoB,EAAE;YACrC,IAAI,CAAC,SAAS,CAAC,oBAAoB,CAAC,IAAI,CAAC,CAAA;SAC5C;IACL,CAAC;IACO,mBAAmB,CAAC,IAAoB;QAC5C,IAAI,IAAI,CAAC,SAAS,CAAC,qBAAqB,EAAE;YACtC,IAAI,CAAC,SAAS,CAAC,qBAAqB,CAAC,IAAI,CAAC,CAAA;SAC7C;QACD,aAAa;QACb,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,CAAA;QAC3C,IAAI,IAAI,CAAC,SAAS,CAAC,qBAAqB,EAAE;YACtC,IAAI,CAAC,SAAS,CAAC,qBAAqB,CAAC,IAAI,CAAC,CAAA;SAC7C;IACL,CAAC;IACO,cAAc,CAAC,IAAe;QAClC,IAAI,IAAI,CAAC,SAAS,CAAC,gBAAgB,EAAE;YACjC,IAAI,CAAC,SAAS,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAA;SACxC;QACD,IAAI,IAAI,CAAC,SAAS,CAAC,gBAAgB,EAAE;YACjC,IAAI,CAAC,SAAS,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAA;SACxC;IACL,CAAC;IACO,mBAAmB,CAAC,IAAoB;QAC5C,IAAI,IAAI,CAAC,SAAS,CAAC,qBAAqB,EAAE;YACtC,IAAI,CAAC,SAAS,CAAC,qBAAqB,CAAC,IAAI,CAAC,CAAA;SAC7C;QACD,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,CAAA;QACvC,IAAI,IAAI,CAAC,SAAS,CAAC,qBAAqB,EAAE;YACtC,IAAI,CAAC,SAAS,CAAC,qBAAqB,CAAC,IAAI,CAAC,CAAA;SAC7C;IACL,CAAC;IACO,wBAAwB,CAAC,IAAyB;QACtD,IAAI,IAAI,CAAC,SAAS,CAAC,0BAA0B,EAAE;YAC3C,IAAI,CAAC,SAAS,CAAC,0BAA0B,CAAC,IAAI,CAAC,CAAA;SAClD;QACD,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;QAC7B,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;QAC7B,IAAI,IAAI,CAAC,SAAS,CAAC,0BAA0B,EAAE;YAC3C,IAAI,CAAC,SAAS,CAAC,0BAA0B,CAAC,IAAI,CAAC,CAAA;SAClD;IACL,CAAC;IACO,iBAAiB,CAAC,IAAkB;QACxC,IAAI,IAAI,CAAC,SAAS,CAAC,mBAAmB,EAAE;YACpC,IAAI,CAAC,SAAS,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAA;SAC3C;QACD,IAAI,IAAI,CAAC,SAAS,CAAC,mBAAmB,EAAE;YACpC,IAAI,CAAC,SAAS,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAA;SAC3C;IACL,CAAC;IACO,UAAU,CAAC,IAAW;QAC1B,IAAI,IAAI,CAAC,SAAS,CAAC,YAAY,EAAE;YAC7B,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,IAAI,CAAC,CAAA;SACpC;QACD,IAAI,IAAI,CAAC,SAAS,CAAC,YAAY,EAAE;YAC7B,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,IAAI,CAAC,CAAA;SACpC;IACL,CAAC;IACO,UAAU,CAAC,IAAW;QAC1B,IAAI,IAAI,CAAC,SAAS,CAAC,YAAY,EAAE;YAC7B,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,IAAI,CAAC,CAAA;SACpC;QACD,aAAa;QACb,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,CAAA;QAC3C,IAAI,IAAI,CAAC,SAAS,CAAC,YAAY,EAAE;YAC7B,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,IAAI,CAAC,CAAA;SACpC;IACL,CAAC;IACO,YAAY,CAAC,IAAa;QAC9B,IAAI,IAAI,CAAC,SAAS,CAAC,cAAc,EAAE;YAC/B,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,CAAA;SACtC;QACD,aAAa;QACb,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,CAAA;QAC3C,IAAI,IAAI,CAAC,SAAS,CAAC,cAAc,EAAE;YAC/B,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,CAAA;SACtC;IACL,CAAC;IACO,eAAe,CAAC,IAAgB;QACpC,IAAI,IAAI,CAAC,SAAS,CAAC,iBAAiB,EAAE;YAClC,IAAI,CAAC,SAAS,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAA;SACzC;QACD,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAA;QACxB,IAAI,IAAI,CAAC,SAAS,CAAC,iBAAiB,EAAE;YAClC,IAAI,CAAC,SAAS,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAA;SACzC;IACL,CAAC;IACO,kBAAkB,CAAC,IAAmB;QAC1C,IAAI,IAAI,CAAC,SAAS,CAAC,oBAAoB,EAAE;YACrC,IAAI,CAAC,SAAS,CAAC,oBAAoB,CAAC,IAAI,CAAC,CAAA;SAC5C;QACD,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,CAAA;QAC/B,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;QAC3B,IAAI,IAAI,CAAC,SAAS,CAAC,oBAAoB,EAAE;YACrC,IAAI,CAAC,SAAS,CAAC,oBAAoB,CAAC,IAAI,CAAC,CAAA;SAC5C;IACL,CAAC;CACJ;AAxLD,sCAwLC","sourcesContent":["import {\n    //Alternative,\n    Assertion,\n    Backreference,\n    CapturingGroup,\n    Character,\n    CharacterClass,\n    CharacterClassRange,\n    CharacterSet,\n    Flags,\n    Group,\n    Node,\n    Pattern,\n    Quantifier,\n    RegExpLiteral,\n} from \"./ast\"\n\n/**\n * @deprecated merge not done, don't use\n * The visitor to walk on AST.\n */\nexport class RegExpVisitor {\n    private readonly _handlers: RegExpVisitor.Handlers\n\n    /**\n     * Initialize this visitor.\n     * @param handlers Callbacks for each node.\n     */\n    public constructor(handlers: RegExpVisitor.Handlers) {\n        this._handlers = handlers\n    }\n\n    /**\n     * Visit a given node and descendant nodes.\n     * @param node The root node to visit tree.\n     */\n    public visit(node: Node): void {\n        switch (node.type) {\n            // @ts-ignore\n            case \"Alternative\":\n                this.visitAlternative(node)\n                break\n            case \"Assertion\":\n                this.visitAssertion(node)\n                break\n            case \"Backreference\":\n                this.visitBackreference(node)\n                break\n            case \"CapturingGroup\":\n                this.visitCapturingGroup(node)\n                break\n            case \"Character\":\n                this.visitCharacter(node)\n                break\n            case \"CharacterClass\":\n                this.visitCharacterClass(node)\n                break\n            case \"CharacterClassRange\":\n                this.visitCharacterClassRange(node)\n                break\n            case \"CharacterSet\":\n                this.visitCharacterSet(node)\n                break\n            case \"Flags\":\n                this.visitFlags(node)\n                break\n            case \"Group\":\n                this.visitGroup(node)\n                break\n            case \"Pattern\":\n                this.visitPattern(node)\n                break\n            case \"Quantifier\":\n                this.visitQuantifier(node)\n                break\n            case \"RegExpLiteral\":\n                this.visitRegExpLiteral(node)\n                break\n            default:\n                throw new Error(`Unknown type: ${(node as any).type}`)\n        }\n    }\n\n    // @ts-ignore\n    private visitAlternative(node: Alternative): void {\n        if (this._handlers.onAlternativeEnter) {\n            this._handlers.onAlternativeEnter(node)\n        }\n        node.elements.forEach(this.visit, this)\n        if (this._handlers.onAlternativeLeave) {\n            this._handlers.onAlternativeLeave(node)\n        }\n    }\n    private visitAssertion(node: Assertion): void {\n        if (this._handlers.onAssertionEnter) {\n            this._handlers.onAssertionEnter(node)\n        }\n        if (node.kind === \"lookahead\" || node.kind === \"lookbehind\") {\n            // @ts-ignore\n            node.alternatives.forEach(this.visit, this)\n        }\n        if (this._handlers.onAssertionLeave) {\n            this._handlers.onAssertionLeave(node)\n        }\n    }\n    private visitBackreference(node: Backreference): void {\n        if (this._handlers.onBackreferenceEnter) {\n            this._handlers.onBackreferenceEnter(node)\n        }\n        if (this._handlers.onBackreferenceLeave) {\n            this._handlers.onBackreferenceLeave(node)\n        }\n    }\n    private visitCapturingGroup(node: CapturingGroup): void {\n        if (this._handlers.onCapturingGroupEnter) {\n            this._handlers.onCapturingGroupEnter(node)\n        }\n        // @ts-ignore\n        node.alternatives.forEach(this.visit, this)\n        if (this._handlers.onCapturingGroupLeave) {\n            this._handlers.onCapturingGroupLeave(node)\n        }\n    }\n    private visitCharacter(node: Character): void {\n        if (this._handlers.onCharacterEnter) {\n            this._handlers.onCharacterEnter(node)\n        }\n        if (this._handlers.onCharacterLeave) {\n            this._handlers.onCharacterLeave(node)\n        }\n    }\n    private visitCharacterClass(node: CharacterClass): void {\n        if (this._handlers.onCharacterClassEnter) {\n            this._handlers.onCharacterClassEnter(node)\n        }\n        node.elements.forEach(this.visit, this)\n        if (this._handlers.onCharacterClassLeave) {\n            this._handlers.onCharacterClassLeave(node)\n        }\n    }\n    private visitCharacterClassRange(node: CharacterClassRange): void {\n        if (this._handlers.onCharacterClassRangeEnter) {\n            this._handlers.onCharacterClassRangeEnter(node)\n        }\n        this.visitCharacter(node.min)\n        this.visitCharacter(node.max)\n        if (this._handlers.onCharacterClassRangeLeave) {\n            this._handlers.onCharacterClassRangeLeave(node)\n        }\n    }\n    private visitCharacterSet(node: CharacterSet): void {\n        if (this._handlers.onCharacterSetEnter) {\n            this._handlers.onCharacterSetEnter(node)\n        }\n        if (this._handlers.onCharacterSetLeave) {\n            this._handlers.onCharacterSetLeave(node)\n        }\n    }\n    private visitFlags(node: Flags): void {\n        if (this._handlers.onFlagsEnter) {\n            this._handlers.onFlagsEnter(node)\n        }\n        if (this._handlers.onFlagsLeave) {\n            this._handlers.onFlagsLeave(node)\n        }\n    }\n    private visitGroup(node: Group): void {\n        if (this._handlers.onGroupEnter) {\n            this._handlers.onGroupEnter(node)\n        }\n        // @ts-ignore\n        node.alternatives.forEach(this.visit, this)\n        if (this._handlers.onGroupLeave) {\n            this._handlers.onGroupLeave(node)\n        }\n    }\n    private visitPattern(node: Pattern): void {\n        if (this._handlers.onPatternEnter) {\n            this._handlers.onPatternEnter(node)\n        }\n        // @ts-ignore\n        node.alternatives.forEach(this.visit, this)\n        if (this._handlers.onPatternLeave) {\n            this._handlers.onPatternLeave(node)\n        }\n    }\n    private visitQuantifier(node: Quantifier): void {\n        if (this._handlers.onQuantifierEnter) {\n            this._handlers.onQuantifierEnter(node)\n        }\n        this.visit(node.element)\n        if (this._handlers.onQuantifierLeave) {\n            this._handlers.onQuantifierLeave(node)\n        }\n    }\n    private visitRegExpLiteral(node: RegExpLiteral): void {\n        if (this._handlers.onRegExpLiteralEnter) {\n            this._handlers.onRegExpLiteralEnter(node)\n        }\n        this.visitPattern(node.pattern)\n        this.visitFlags(node.flags)\n        if (this._handlers.onRegExpLiteralLeave) {\n            this._handlers.onRegExpLiteralLeave(node)\n        }\n    }\n}\n\nexport namespace RegExpVisitor {\n    export interface Handlers {\n        // @ts-ignore\n        onAlternativeEnter?(node: Alternative): void\n        // @ts-ignore\n        onAlternativeLeave?(node: Alternative): void\n        onAssertionEnter?(node: Assertion): void\n        onAssertionLeave?(node: Assertion): void\n        onBackreferenceEnter?(node: Backreference): void\n        onBackreferenceLeave?(node: Backreference): void\n        onCapturingGroupEnter?(node: CapturingGroup): void\n        onCapturingGroupLeave?(node: CapturingGroup): void\n        onCharacterEnter?(node: Character): void\n        onCharacterLeave?(node: Character): void\n        onCharacterClassEnter?(node: CharacterClass): void\n        onCharacterClassLeave?(node: CharacterClass): void\n        onCharacterClassRangeEnter?(node: CharacterClassRange): void\n        onCharacterClassRangeLeave?(node: CharacterClassRange): void\n        onCharacterSetEnter?(node: CharacterSet): void\n        onCharacterSetLeave?(node: CharacterSet): void\n        onFlagsEnter?(node: Flags): void\n        onFlagsLeave?(node: Flags): void\n        onGroupEnter?(node: Group): void\n        onGroupLeave?(node: Group): void\n        onPatternEnter?(node: Pattern): void\n        onPatternLeave?(node: Pattern): void\n        onQuantifierEnter?(node: Quantifier): void\n        onQuantifierLeave?(node: Quantifier): void\n        onRegExpLiteralEnter?(node: RegExpLiteral): void\n        onRegExpLiteralLeave?(node: RegExpLiteral): void\n    }\n}\n"]}