{"version":3,"file":"update-fixtures.js","sourceRoot":"","sources":["update-fixtures.ts"],"names":[],"mappings":"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","sourcesContent":["// @ts-ignore\nimport { AST, parseRegExpLiteral, visitRegExpAST } from \"../src/index\"\nimport Parser = require(\"../test/fixtures/parser/literal\")\nimport Visitor = require(\"../test/fixtures/visitor\")\nimport { cloneWithoutCircular } from \"./clone-without-circular\"\n\nfor (const filename of Object.keys(Parser.Fixtures)) {\n    const fixture = Parser.Fixtures[filename]\n    const options = fixture.options\n\n    for (const pattern of Object.keys(fixture.patterns)) {\n        try {\n            const ast = parseRegExpLiteral(pattern, options)\n            fixture.patterns[pattern] = { ast: cloneWithoutCircular(ast) }\n        } catch (err) {\n            fixture.patterns[pattern] = {\n                error: { message: err.message, index: err.index },\n            }\n        }\n    }\n\n    Parser.save()\n}\n\nprocess.exit();\n\nfor (const filename of Object.keys(Visitor.Fixtures)) {\n    const fixture = Visitor.Fixtures[filename]\n    const options = fixture.options\n\n    for (const pattern of Object.keys(fixture.patterns)) {\n        const ast = parseRegExpLiteral(pattern, options)\n        const history = [] as string[]\n        const enter = (node: AST.Node): void => {\n            history.push(`enter:${node.type}:${node.raw}`)\n        }\n        const leave = (node: AST.Node): void => {\n            history.push(`leave:${node.type}:${node.raw}`)\n        }\n\n        visitRegExpAST(ast, {\n            onAlternativeEnter: enter,\n            onAssertionEnter: enter,\n            onBackreferenceEnter: enter,\n            onCapturingGroupEnter: enter,\n            onCharacterEnter: enter,\n            onCharacterClassEnter: enter,\n            onCharacterClassRangeEnter: enter,\n            onCharacterSetEnter: enter,\n            onFlagsEnter: enter,\n            onGroupEnter: enter,\n            onPatternEnter: enter,\n            onQuantifierEnter: enter,\n            onRegExpLiteralEnter: enter,\n            onAlternativeLeave: leave,\n            onAssertionLeave: leave,\n            onBackreferenceLeave: leave,\n            onCapturingGroupLeave: leave,\n            onCharacterLeave: leave,\n            onCharacterClassLeave: leave,\n            onCharacterClassRangeLeave: leave,\n            onCharacterSetLeave: leave,\n            onFlagsLeave: leave,\n            onGroupLeave: leave,\n            onPatternLeave: leave,\n            onQuantifierLeave: leave,\n            onRegExpLiteralLeave: leave,\n        })\n\n        fixture.patterns[pattern] = history\n    }\n\n    Visitor.save()\n}\n"]}