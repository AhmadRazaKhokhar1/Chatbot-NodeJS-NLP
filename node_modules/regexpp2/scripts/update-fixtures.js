"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// @ts-ignore
const index_1 = require("../src/index");
const Parser = require("../test/fixtures/parser/literal");
const Visitor = require("../test/fixtures/visitor");
const clone_without_circular_1 = require("./clone-without-circular");
for (const filename of Object.keys(Parser.Fixtures)) {
    const fixture = Parser.Fixtures[filename];
    const options = fixture.options;
    for (const pattern of Object.keys(fixture.patterns)) {
        try {
            const ast = (0, index_1.parseRegExpLiteral)(pattern, options);
            fixture.patterns[pattern] = { ast: (0, clone_without_circular_1.cloneWithoutCircular)(ast) };
        }
        catch (err) {
            fixture.patterns[pattern] = {
                error: { message: err.message, index: err.index },
            };
        }
    }
    Parser.save();
}
process.exit();
for (const filename of Object.keys(Visitor.Fixtures)) {
    const fixture = Visitor.Fixtures[filename];
    const options = fixture.options;
    for (const pattern of Object.keys(fixture.patterns)) {
        const ast = (0, index_1.parseRegExpLiteral)(pattern, options);
        const history = [];
        const enter = (node) => {
            history.push(`enter:${node.type}:${node.raw}`);
        };
        const leave = (node) => {
            history.push(`leave:${node.type}:${node.raw}`);
        };
        (0, index_1.visitRegExpAST)(ast, {
            onAlternativeEnter: enter,
            onAssertionEnter: enter,
            onBackreferenceEnter: enter,
            onCapturingGroupEnter: enter,
            onCharacterEnter: enter,
            onCharacterClassEnter: enter,
            onCharacterClassRangeEnter: enter,
            onCharacterSetEnter: enter,
            onFlagsEnter: enter,
            onGroupEnter: enter,
            onPatternEnter: enter,
            onQuantifierEnter: enter,
            onRegExpLiteralEnter: enter,
            onAlternativeLeave: leave,
            onAssertionLeave: leave,
            onBackreferenceLeave: leave,
            onCapturingGroupLeave: leave,
            onCharacterLeave: leave,
            onCharacterClassLeave: leave,
            onCharacterClassRangeLeave: leave,
            onCharacterSetLeave: leave,
            onFlagsLeave: leave,
            onGroupLeave: leave,
            onPatternLeave: leave,
            onQuantifierLeave: leave,
            onRegExpLiteralLeave: leave,
        });
        fixture.patterns[pattern] = history;
    }
    Visitor.save();
}
//# sourceMappingURL=update-fixtures.js.map