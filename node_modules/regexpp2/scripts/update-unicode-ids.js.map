{"version":3,"file":"update-unicode-ids.js","sourceRoot":"","sources":["update-unicode-ids.ts"],"names":[],"mappings":"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","sourcesContent":["import fs = require(\"fs\")\nimport http = require(\"http\")\nimport path = require(\"path\")\n// @ts-ignore\nimport { CLIEngine } from \"eslint\"\n\nconst DB_URL = \"http://unicode.org/Public/UNIDATA/DerivedCoreProperties.txt\"\nconst FILE_PATH = path.join(__dirname, '..', \"src/unicode/ids.ts\")\nconst ID_START = /^([0-9a-z]+)(?:\\.\\.([0-9a-z]+))?[^;]*; ID_Start /i\nconst ID_CONTINUE = /^([0-9a-z]+)(?:\\.\\.([0-9a-z]+))?[^;]*; ID_Continue /i\nconst BORDER = 0x7f\nconst logger = console\n\nenum Mode {\n    Small,\n    Former,\n    Latter,\n}\n\n// Main\n;(async () => {\n    let banner = \"\"\n    const idStartSet: Set<string> = new Set()\n    const idStartSmall: Array<[number, number]> = []\n    const idStartLarge: Array<[number, number]> = []\n    const idContinueSmall: Array<[number, number]> = []\n    const idContinueLarge: Array<[number, number]> = []\n\n    logger.log(\"Fetching data... (%s)\", DB_URL)\n    await processEachLine(line => {\n        let m: RegExpExecArray | null = null\n        if (banner === \"\") {\n            logger.log(\"Processing data... (%s)\", line.slice(2))\n            banner = `/* Generated from ${line.slice(2)} */\\n// @formatter:off`\n        } else if ((m = ID_START.exec(line)) != null) {\n            const min = parseInt(m[1], 16)\n            const max = m[2] ? parseInt(m[2], 16) : min\n            if (max <= BORDER) {\n                idStartSmall.push([min, max])\n            } else {\n                idStartSet.add(`${min}..${max}`)\n                idStartLarge.push([min, max])\n            }\n        } else if ((m = ID_CONTINUE.exec(line)) != null) {\n            const min = parseInt(m[1], 16)\n            const max = m[2] ? parseInt(m[2], 16) : min\n            if (max <= BORDER) {\n                idContinueSmall.push([min, max])\n            } else if (!idStartSet.has(`${min}..${max}`)) {\n                idContinueLarge.push([min, max])\n            }\n        }\n    })\n\n    logger.log(\"Generating code...\")\n    let code = `${banner}\nexport function isIdStart(cp: number): boolean {\n${makeSmallCondtion(idStartSmall, Mode.Small)}\nreturn isLargeIdStart(cp)\n}\nexport function isIdContinue(cp: number): boolean {\n${makeSmallCondtion(idContinueSmall, Mode.Small)}\nreturn isLargeIdStart(cp) || isLargeIdContinue(cp)\n}\nfunction isLargeIdStart(cp: number): boolean {\n${makeCondition(idStartLarge, Mode.Former)}\n}\nfunction isLargeIdContinue(cp: number): boolean {\n${makeCondition(idContinueLarge, Mode.Former)}\n}`\n\n    logger.log(\"Formatting code...\")\n    const engine = new CLIEngine({\n        fix: true,\n        rules: { curly: \"off\" },\n    })\n    const result = engine.executeOnText(code, \"ids.ts\").results[0]\n    code = result.output || code\n\n    logger.log(\"Writing '%s'...\", FILE_PATH)\n    await save(code)\n\n    logger.log(\"Completed!\")\n})().catch(error => {\n    logger.error(error.stack)\n    process.exitCode = 1\n})\n\nfunction processEachLine(cb: (line: string) => void): Promise<void> {\n    return new Promise((resolve, reject) => {\n        http\n            .get(DB_URL, res => {\n                let buffer = \"\"\n                res.setEncoding(\"utf8\")\n                res.on(\"data\", chunk => {\n                    const lines = (buffer + chunk).split(\"\\n\")\n                    if (lines.length === 1) {\n                        buffer = lines[0]\n                    } else {\n                        buffer = lines.pop()!\n                        for (const line of lines) {\n                            cb(line)\n                        }\n                    }\n                })\n                res.on(\"end\", () => {\n                    if (buffer) {\n                        cb(buffer)\n                    }\n                    resolve()\n                })\n                res.on(\"error\", reject)\n            })\n            .on(\"error\", reject)\n    })\n}\n\nfunction makeCondition(ranges: [number, number][], mode: Mode): string {\n    if (ranges.length < 10) {\n        return makeSmallCondtion(ranges, mode)\n    }\n\n    const middle = ranges.length >> 1\n    const ranges1 = ranges.slice(0, middle)\n    const ranges2 = ranges.slice(middle)\n    const pivot = ranges2[0][0]\n    return `if (cp < 0x${pivot.toString(16)}) {\n${makeCondition(ranges1, Mode.Former)}\n}\n${makeCondition(ranges2, Mode.Latter)}`\n}\n\nfunction makeSmallCondtion(ranges: [number, number][], mode: Mode): string {\n    const conditions: string[] = []\n    for (const [min, max] of ranges) {\n        if (min === max) {\n            conditions.push(`if (cp === 0x${min.toString(16)}) return true`)\n        } else {\n            if (mode !== Mode.Latter || conditions.length !== 0) {\n                conditions.push(`if (cp < 0x${min.toString(16)}) return false`)\n            }\n            conditions.push(`if (cp < 0x${(max + 1).toString(16)}) return true`)\n        }\n    }\n    if (mode === Mode.Former || mode === Mode.Latter) {\n        conditions.push(\"return false\")\n    }\n    return conditions.join(\"\\n\")\n}\n\nfunction save(content: string): Promise<void> {\n    return new Promise((resolve, reject) => {\n        fs.writeFile(\n            FILE_PATH,\n            content,\n            error => (error ? reject(error) : resolve()),\n        )\n    })\n}\n"]}