{"version":3,"file":"publish-after.js","sourceRoot":"","sources":["publish-after.ts"],"names":[],"mappings":";AAAA;;GAEG;;;AAEH,wDAAwB;AACxB,2EAA0C;AAC1C,kFAA2C;AAC3C,kEAAwC;AAExC,kBAAe,CAAC,KAAK,IAAI,EAAE;IAE1B,MAAM,YAAY,GAAG,cAAI,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;IAEhD,IAAI,OAAe,CAAC;IAEpB,OAAO,GAAG,IAAA,cAAU,EAAC,SAAS,CAAC,CAAC;IAEhC,IAAI,CAAC,OAAO,IAAI,cAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,YAAY,CAAC,EACpD,CAAC;QACA,IAAI,SAAS,GAAG,MAAM,0DAAO,oBAAoB,IAC/C,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC;aACtB,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,CACjB;QAED,IAAI,CAAC,SAAS,IAAI,cAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,SAAS,CAAC,EACnD,CAAC;YACA,OAAO,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;YAC9B,OAAO,CAAC,IAAI,CAAC,WAAW,EAAE,SAAS,CAAC,CAAC;YACrC,OAAO,CAAC,IAAI,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;YACjC,OAAO,CAAC,IAAI,CAAC,eAAe,EAAE,cAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,YAAY,CAAC,CAAC,CAAC;YACpE,OAAO;QACR,CAAC;IACF,CAAC;IAED,IAAI,OAAO,GAAG;QACb,GAAG,EAAE,cAAI,CAAC,IAAI,CAAC,YAAY,EAAE,OAAO,CAAC;QACrC,KAAK,EAAE,SAAS;KAChB,CAAC;IAEF,IAAI,GAAG,GAAG,8BAA8B,sBAAW,CAAC,OAAO,EAAE,CAAC;IAE9D,MAAM,2BAAU,CAAC,KAAK,CAAC,KAAK,EAAE;QAC7B,QAAQ;QACR,GAAG;QACH,IAAI;QACJ,GAAG;KACH,EAAE,OAAO,CAAC,CAAC;IAEZ;;;;;;;;;;;;;OAaG;AAEJ,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC","sourcesContent":["/**\n * Created by user on 2018/7/24/024.\n */\n\nimport path from 'path';\nimport PackageJson from '../package.json';\nimport CrossSpawn from 'cross-spawn-extra';\nimport getGitRoot from 'git-root2/core';\n\nexport default (async () =>\n{\n\tconst project_root = path.join(__dirname, '..');\n\n\tlet gitroot: string;\n\n\tgitroot = getGitRoot(__dirname);\n\n\tif (!gitroot || path.relative(gitroot, project_root))\n\t{\n\t\tlet __root_ws = await import('../../../__root_ws')\n\t\t\t.then(m => m.__root_ws)\n\t\t\t.catch(e => null)\n\t\t;\n\n\t\tif (!__root_ws || path.relative(gitroot, __root_ws))\n\t\t{\n\t\t\tconsole.warn(`no git exists`);\n\t\t\tconsole.warn(`__root_ws`, __root_ws);\n\t\t\tconsole.warn(`gitroot`, gitroot);\n\t\t\tconsole.warn(`path.relative`, path.relative(gitroot, project_root));\n\t\t\treturn;\n\t\t}\n\t}\n\n\tlet options = {\n\t\tcwd: path.join(project_root, 'build'),\n\t\tstdio: 'inherit',\n\t};\n\n\tlet msg = `build(cache): build cache v${PackageJson.version}`;\n\n\tawait CrossSpawn.async('git', [\n\t\t'commit',\n\t\t'.',\n\t\t'-m',\n\t\tmsg,\n\t], options);\n\n\t/*\n\tawait new Promise(function (done)\n\t{\n\t\tsetTimeout(done, 500);\n\t});\n\n\tawait crossSpawn('git', [\n\t\t'tag',\n\t\t'-a',\n\t\tPackageJson.version,\n\t\t'-m',\n\t\tmsg,\n\t], options);\n\t */\n\n})().catch(e => console.error(e));\n"]}