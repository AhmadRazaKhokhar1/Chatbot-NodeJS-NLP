"use strict";

const e = {}, r = [];

function isNumberCode(e) {
  return e >= 48 && e <= 57;
}

function naturalCompare(e, t, a) {
  const n = _strLength(e, "a"), o = _strLength(t, "b");
  let u = 0, l = 0, d = r, p = 0;
  for (a && (a.caseInsensitive && (e = e.toLowerCase(), t = t.toLowerCase()), a.alphabet && (d = buildAlphabetIndexMap(a.alphabet))); u < n && l < o; ) {
    let r, a = e.charCodeAt(u), i = t.charCodeAt(l);
    if (isNumberCode(a)) {
      if (!isNumberCode(i)) return a - i;
      let d = u, f = l;
      for (;48 === a && ++d < n; ) a = e.charCodeAt(d);
      for (;48 === i && ++f < o; ) i = t.charCodeAt(f);
      d !== f && 0 === p && (p = d - f);
      let C = _indexOfNumEnd(e, n, d), h = _indexOfNumEnd(t, o, f);
      if (r = C - d - h + f, 0 !== r) return r;
      for (;d < C; ) if (r = e.charCodeAt(d++) - t.charCodeAt(f++), 0 !== r) return r;
      u = C, l = h;
    } else {
      if (0 !== (r = _alphabetCompare(a, i, d))) return r;
      ++u, ++l;
    }
  }
  return u < n ? 1 : l < o ? -1 : p;
}

function buildAlphabetIndexMap(r) {
  const t = e[r];
  if (void 0 !== t) return t;
  const a = [], n = r.split("").reduce(((e, r) => Math.max(e, r.charCodeAt(0))), 0);
  for (let e = 0; e <= n; e++) a.push(-1);
  for (let e = 0; e < r.length; e++) a[r.charCodeAt(e)] = e;
  return e[r] = a;
}

function _indexOfNumEnd(e, r, t) {
  for (;t < r && isNumberCode(e.charCodeAt(t)); ) ++t;
  return t;
}

function _alphabetCompare(e, r, t) {
  return e !== r ? e < t.length && r < t.length && -1 !== t[e] && -1 !== t[r] ? t[e] - t[r] : e - r : 0;
}

function _strLength(e, r) {
  if ("string" != typeof e) throw new TypeError(`The ${r} argument must be a string. Received type '${typeof e}'`);
  return e.length;
}

Object.defineProperty(naturalCompare, "__esModule", {
  value: !0
}), Object.defineProperty(naturalCompare, "naturalCompare", {
  value: naturalCompare
}), Object.defineProperty(naturalCompare, "default", {
  value: naturalCompare
}), Object.defineProperty(naturalCompare, "isNumberCode", {
  value: isNumberCode
}), Object.defineProperty(naturalCompare, "buildAlphabetIndexMap", {
  value: buildAlphabetIndexMap
}), Object.defineProperty(naturalCompare, "_indexOfNumEnd", {
  value: _indexOfNumEnd
}), Object.defineProperty(naturalCompare, "_alphabetCompare", {
  value: _alphabetCompare
}), Object.defineProperty(naturalCompare, "_strLength", {
  value: _strLength
}), module.exports = naturalCompare;
//# sourceMappingURL=index.cjs.production.min.cjs.map
