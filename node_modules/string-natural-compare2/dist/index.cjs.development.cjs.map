{"version":3,"file":"index.cjs.development.cjs","sources":["../src/index.ts","../src/index.cts"],"sourcesContent":["export interface IOptions\n{\n  /**\n   * Set to `true` to compare strings case-insensitively. Default: `false`.\n   * @default false\n   */\n  caseInsensitive?: boolean,\n  /**\n   * A string of characters that define a custom character ordering. Default: `undefined`.\n   */\n  alphabet?: string,\n}\n\nexport type IAlphabetIndexMap = number[];\n\nconst alphabetIndexMapCache: Record<string, IAlphabetIndexMap> = {};\nconst defaultAlphabetIndexMap: IAlphabetIndexMap = [];\n\nexport function isNumberCode(code: number) {\n  return code >= 48/* '0' */ && code <= 57/* '9' */;\n}\n\nexport function naturalCompare(a: string, b: string, opts?: IOptions) {\n  const lengthA = _strLength(a, 'a');\n  const lengthB = _strLength(b, 'b');\n  let indexA = 0;\n  let indexB = 0;\n  let alphabetIndexMap = defaultAlphabetIndexMap;\n  let firstDifferenceInLeadingZeros = 0;\n\n  if (opts) {\n    if (opts.caseInsensitive) {\n      a = a.toLowerCase();\n      b = b.toLowerCase();\n    }\n\n    if (opts.alphabet) {\n      alphabetIndexMap = buildAlphabetIndexMap(opts.alphabet);\n    }\n  }\n\n  while (indexA < lengthA && indexB < lengthB) {\n    let charCodeA = a.charCodeAt(indexA);\n    let charCodeB = b.charCodeAt(indexB);\n    let difference: number;\n\n    if (isNumberCode(charCodeA)) {\n      if (!isNumberCode(charCodeB)) {\n        return charCodeA - charCodeB;\n      }\n\n      let numStartA = indexA;\n      let numStartB = indexB;\n\n      while (charCodeA === 48/* '0' */ && ++numStartA < lengthA) {\n        charCodeA = a.charCodeAt(numStartA);\n      }\n      while (charCodeB === 48/* '0' */ && ++numStartB < lengthB) {\n        charCodeB = b.charCodeAt(numStartB);\n      }\n\n      if (numStartA !== numStartB && firstDifferenceInLeadingZeros === 0) {\n        firstDifferenceInLeadingZeros = numStartA - numStartB;\n      }\n\n      let numEndA = _indexOfNumEnd(a, lengthA, numStartA);\n      let numEndB = _indexOfNumEnd(b, lengthB, numStartB);\n\n      difference = numEndA - numStartA - numEndB + numStartB; // numA length - numB length\n      if (difference !== 0) {\n        return difference;\n      }\n\n      while (numStartA < numEndA) {\n        difference = a.charCodeAt(numStartA++) - b.charCodeAt(numStartB++);\n        if (difference !== 0) {\n          return difference;\n        }\n      }\n\n      indexA = numEndA;\n      indexB = numEndB;\n      continue;\n    }\n\n    if (0 !== (difference = _alphabetCompare(charCodeA, charCodeB, alphabetIndexMap)))\n    {\n      return difference;\n    }\n\n    ++indexA;\n    ++indexB;\n  }\n\n  if (indexA < lengthA) { // `b` is a substring of `a`\n    return 1 as const;\n  }\n\n  if (indexB < lengthB) { // `a` is a substring of `b`\n    return -1 as const;\n  }\n\n  return firstDifferenceInLeadingZeros;\n}\n\nexport function buildAlphabetIndexMap(alphabet: string): IAlphabetIndexMap {\n  const existingMap = alphabetIndexMapCache[alphabet];\n  if (existingMap !== undefined) {\n    return existingMap;\n  }\n\n  const indexMap: IAlphabetIndexMap = [];\n  const maxCharCode = alphabet.split('').reduce((maxCode, char) => {\n    return Math.max(maxCode, char.charCodeAt(0));\n  }, 0);\n\n  for (let i = 0; i <= maxCharCode; i++) {\n    indexMap.push(-1);\n  }\n\n  for (let i = 0; i < alphabet.length; i++) {\n    indexMap[alphabet.charCodeAt(i)] = i;\n  }\n\n  return alphabetIndexMapCache[alphabet] = indexMap;\n}\n\nexport function _indexOfNumEnd(a: string, lengthA: number, numStartA: number)\n{\n  while (numStartA < lengthA && isNumberCode(a.charCodeAt(numStartA)))\n  {\n    ++numStartA;\n  }\n  return numStartA\n}\n\nexport function _alphabetCompare(charCodeA: number, charCodeB: number, alphabetIndexMap: IAlphabetIndexMap)\n{\n  if (charCodeA !== charCodeB) {\n    if (\n      charCodeA < alphabetIndexMap.length &&\n      charCodeB < alphabetIndexMap.length &&\n      alphabetIndexMap[charCodeA] !== -1 &&\n      alphabetIndexMap[charCodeB] !== -1\n    ) {\n      return alphabetIndexMap[charCodeA] - alphabetIndexMap[charCodeB];\n    }\n\n    return charCodeA - charCodeB;\n  }\n\n  return 0 as const\n}\n\nexport function _strLength(a: string, name: string)\n{\n  if (typeof a !== 'string')\n  {\n    throw new TypeError(`The ${name} argument must be a string. Received type '${typeof a}'`);\n  }\n\n  return a.length;\n}\n\nexport default naturalCompare;\n\n// @ts-ignore\nif (process.env.TSDX_FORMAT !== 'esm')\n{\n  Object.defineProperty(naturalCompare, \"__esModule\", { value: true });\n\n  Object.defineProperty(naturalCompare, 'naturalCompare', { value: naturalCompare });\n  Object.defineProperty(naturalCompare, 'default', { value: naturalCompare });\n\n  Object.defineProperty(naturalCompare, 'isNumberCode', { value: isNumberCode });\n  Object.defineProperty(naturalCompare, 'buildAlphabetIndexMap', { value: buildAlphabetIndexMap });\n\n  Object.defineProperty(naturalCompare, '_indexOfNumEnd', { value: _indexOfNumEnd });\n  Object.defineProperty(naturalCompare, '_alphabetCompare', { value: _alphabetCompare });\n  Object.defineProperty(naturalCompare, '_strLength', { value: _strLength });\n}\n","import naturalCompare from './index';\n\n// @ts-ignore\nexport = naturalCompare\n"],"names":["alphabetIndexMapCache","defaultAlphabetIndexMap","isNumberCode","code","naturalCompare","a","b","opts","lengthA","_strLength","lengthB","indexA","indexB","alphabetIndexMap","firstDifferenceInLeadingZeros","caseInsensitive","toLowerCase","alphabet","buildAlphabetIndexMap","charCodeA","charCodeAt","charCodeB","difference","numStartA","numStartB","numEndA","_indexOfNumEnd","numEndB","_alphabetCompare","existingMap","undefined","indexMap","maxCharCode","split","reduce","maxCode","char","Math","max","i","push","length","name","TypeError","Object","defineProperty","value"],"mappings":"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"}