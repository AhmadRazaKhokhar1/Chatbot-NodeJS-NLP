{"version":3,"file":"sort_list_synonym.js","sourceRoot":"","sources":["sort_list_synonym.ts"],"names":[],"mappings":";;;AACA,+CAAuC;AACvC,uCAAkD;AAClD,4DAA0B;AAC1B,4DAAuD;AACvD,+EAA8C;AAE9C,iCAA6D;AAC7D,8DAMqC;AACrC,8DAAqF;AAErF,IAAI,GAAG,GAAG,gBAAI,CAAC,IAAI,CAAC,wBAAa,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;AAExD,IAAI,YAAY,GAAG,CAAC,CAAC;AAErB,IAAI,UAAU,GAAG;IAChB,IAAI,EAAE,EAA0B;CAChC,CAAC;AAEF,IAAA,eAAQ,EAAC,GAAG,EAAE;IACb,aAAa;IACb,iBAAiB;IACjB,eAAe;CACf,CAAC;KACA,GAAG,CAAC,UAAU,EAAY;IAE1B,IAAI,CAAC,GAAG,EAAE,CAAC,MAAM,CAAC,UAAU,CAAC,EAAE,CAAC;QAE/B,IAAI,CAAC,GAAG,gBAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;QAE9B,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QAEV,OAAO,CAAC,CAAC;IACV,CAAC,EAAE,EAAE,CAAC,CAAC;IAEP,sBAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IAEjB,iBAAiB;AAClB,CAAC,CAAC;KACD,SAAS,CAAC,KAAK,WAAW,IAAY;IAEtC,IAAI,SAAS,GAAG,gBAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;IAEzC,sBAAO,CAAC,KAAK,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;IAEpC,sBAAO,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IAExB,IAAI,IAAI,GAAG,MAAM,IAAA,uBAAQ,EAAC,IAAI,CAAC,CAAC;IAEhC,IAAI,QAAQ,GAAG,IAAA,2CAA4B,EAAC,IAAI,CAAC,CAAC;IAElD,oBAAoB;IAEpB,IAAI,QAAQ,GAAG,IAAI,CAAC;IAEpB,IAAI,CAAC,EACL,CAAC;QACA,QAAQ,GAAG,gBAAI,CAAC,IAAI,CAAC,wBAAa,CAAC,SAAS,EAAE,gBAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC;IACzE,CAAC;IAED,IAAI,QAAQ,GAAG,IAAA,uBAAS,EAAC,QAAQ,CAAC,GAAG,QAAQ,CAAC;IAE9C,MAAM,IAAA,qBAAU,EAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;IAErC,sBAAO,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;AAC5B,CAAC,CAAC;KACD,GAAG,CAAC,KAAK;IAET,IAAI,UAAU,CAAC,IAAI,CAAC,MAAM,EAC1B,CAAC;QACA,IAAI,IAAI,GAAG,IAAA,uBAAQ,EAAC,UAAU,CAAC,IAAI,CAAC,CAAC;QACrC,IAAI,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;QAErC,IAAI,QAAQ,GAAG,gBAAI,CAAC,IAAI,CAAC,wBAAa,CAAC,SAAS,EAAE,WAAW,CAAC,CAAC;QAE/D,MAAM,IAAA,qBAAU,EAAC,QAAQ,EAAE,MAAM,GAAG,IAAA,uBAAS,EAAC,QAAQ,CAAC,GAAG,MAAM,CAAC,CAAC;IACnE,CAAC;AACF,CAAC,CAAC,CACF","sourcesContent":["import { array_unique } from 'array-hyper-unique';\nimport { console } from \"debug-color2\";\nimport { appendFile, outputFile } from \"fs-extra\";\nimport path from \"upath2\";\nimport { serialize } from '@novel-segment/loader-line';\nimport ProjectConfig from \"../project.config\";\n\nimport { getCjkName, globDict, zhDictCompare } from './util';\nimport {\n\tchkLineType,\n\tEnumLineType,\n\tILoadDictFileRow2,\n\tloadDictFile,\n\tstringifyHandleDictLinesList,\n} from '@novel-segment/util-compare';\nimport { IHandleDictSynonym, loadFile, SortList } from '@novel-segment/sort-synonym';\n\nlet CWD = path.join(ProjectConfig.dict_root, 'synonym');\n\nlet USE_CJK_MODE = 2;\n\nlet CACHE_LIST = {\n\tskip: [] as IHandleDictSynonym[],\n};\n\nglobDict(CWD, [\n\t'synonym.txt',\n\t'zht.synonym.txt',\n\t'*.synonym.txt',\n])\n\t.tap(function (ls: string[])\n\t{\n\t\tlet a = ls.reduce(function (a, v)\n\t\t{\n\t\t\tlet p = path.relative(CWD, v);\n\n\t\t\ta.push(p);\n\n\t\t\treturn a;\n\t\t}, []);\n\n\t\tconsole.debug(a);\n\n\t\t//process.exit();\n\t})\n\t.mapSeries(async function (file: string)\n\t{\n\t\tlet _basepath = path.relative(CWD, file);\n\n\t\tconsole.debug(`[START]`, _basepath);\n\n\t\tconsole.time(_basepath);\n\n\t\tlet list = await loadFile(file);\n\n\t\tlet out_list = stringifyHandleDictLinesList(list);\n\n\t\t//console.log(list);\n\n\t\tlet out_file = file;\n\n\t\tif (0)\n\t\t{\n\t\t\tout_file = path.join(ProjectConfig.temp_root, path.basename(_basepath));\n\t\t}\n\n\t\tlet out_data = serialize(out_list) + \"\\n\\n\\n\";\n\n\t\tawait outputFile(out_file, out_data);\n\n\t\tconsole.timeEnd(_basepath);\n\t})\n\t.tap(async function ()\n\t{\n\t\tif (CACHE_LIST.skip.length)\n\t\t{\n\t\t\tlet list = SortList(CACHE_LIST.skip);\n\t\t\tlet out_list = list.map(v => v.line);\n\n\t\t\tlet out_file = path.join(ProjectConfig.temp_root, 'skip2.txt');\n\n\t\t\tawait appendFile(out_file, \"\\n\\n\" + serialize(out_list) + \"\\n\\n\");\n\t\t}\n\t})\n;\n\n"]}