{"version":3,"file":"util.js","sourceRoot":"","sources":["util.ts"],"names":[],"mappings":";;;;AAAA,8EAA6C;AAC7C,wGAAgE;AAEhE,8CAAgE;AAIxC,2FAJf,iBAAU,OAIe;AAAzB,8FAJY,oBAAa,OAIZ;AAHtB,gEAAuC;AAK1B,QAAA,cAAc,GAAG;IAC7B,UAAU;IACV,SAAS;IACT,UAAU;IACV,SAAS;IACT,YAAY;IACZ,UAAU;CACV,CAAC;AAEF,SAAgB,QAAQ,CAAC,GAAW,EAAE,OAAkB,EAAE,MAAM,GAAG,sBAAc;IAEhF,OAAO,kBAAe;SACpB,OAAO,CAAW,IAAA,mBAAQ,EAAC,OAAO,EAAE;QACpC,GAAG;QACH,QAAQ,EAAE,IAAI;QACd,MAAM;QACN,eAAe,EAAE,IAAI;KACrB,CAAC,CAAC,CACF;AACH,CAAC;AAVD,4BAUC;AAED,SAAgB,YAAY,CAAwB,EAAO,EAAE,IAAc;IAE1E,OAAO,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE,CAAC;QAE5B,aAAa;QACb,OAAO,gCAAc,CAAC,eAAe,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC,MAAM,CAAC;YACxD,aAAa;eACV,gCAAc,CAAC,eAAe,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACvD,aAAa;eACV,gCAAc,CAAC,eAAe,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACvD,aAAa;eACV,gCAAc,CAAC,eAAe,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CACtD;IACH,CAAC,CAAC,CAAC;AACJ,CAAC;AAdD,oCAcC;AAED,SAAgB,qBAAqB;IAEpC,OAAO;QACN,oBAAoB;QACpB,aAAa;QACb,YAAY;QACZ,WAAW;QACX,eAAe;QACf,aAAa;QACb,UAAU;KACD,CAAC;AACZ,CAAC;AAXD,sDAWC;AAED,SAAgB,cAAc;IAE7B,OAAO;QACN,qBAAqB;KACZ,CAAC;AACZ,CAAC;AALD,wCAKC;AAED;;;;;;;;;;;;;;;;;;;;;;;;EAwBE;AAEF,mEAAmE","sourcesContent":["import FastGlob from '@bluelovers/fast-glob';\nimport naturalCompare from '@bluelovers/string-natural-compare';\n\nimport { getCjkName, zhDictCompare } from '@novel-segment/util';\nimport BluebirdPromise from 'bluebird';\nimport { ILoadDictFileRow2 } from '@novel-segment/util-compare';\n\nexport { zhDictCompare, getCjkName }\n\nexport const DEFAULT_IGNORE = [\n\t//'char*',\n\t'**/skip',\n\t'**/jieba',\n\t'**/lazy',\n\t'**/synonym',\n\t'**/names',\n];\n\nexport function globDict(cwd: string, pattern?: string[], ignore = DEFAULT_IGNORE)\n{\n\treturn BluebirdPromise\n\t\t.resolve<string[]>(FastGlob(pattern, {\n\t\t\tcwd,\n\t\t\tabsolute: true,\n\t\t\tignore,\n\t\t\tmarkDirectories: true,\n\t\t}))\n\t\t;\n}\n\nexport function baseSortList<T = ILoadDictFileRow2>(ls: T[], bool?: boolean)\n{\n\treturn ls.sort(function (a, b)\n\t{\n\t\t// @ts-ignore\n\t\treturn naturalCompare.caseInsensitive(a.cjk_id, b.cjk_id)\n\t\t\t// @ts-ignore\n\t\t\t|| naturalCompare.caseInsensitive(a.data[1], b.data[1])\n\t\t\t// @ts-ignore\n\t\t\t|| naturalCompare.caseInsensitive(a.data[0], b.data[0])\n\t\t\t// @ts-ignore\n\t\t\t|| naturalCompare.caseInsensitive(a.data[2], b.data[2])\n\t\t\t;\n\t});\n}\n\nexport function all_default_load_dict()\n{\n\treturn [\n\t\t'dict_synonym/*.txt',\n\t\t'names/*.txt',\n\t\t'lazy/*.txt',\n\t\t'dict*.txt',\n\t\t'phrases/*.txt',\n\t\t'pangu/*.txt',\n\t\t'char.txt',\n\t] as const;\n}\n\nexport function all_extra_dict()\n{\n\treturn [\n\t\t'infrequent/**/*.txt',\n\t] as const;\n}\n\n/*\nexport function getCjkName(w: string, USE_CJK_MODE: number)\n{\n\tlet cjk_id = w;\n\n\tif (1)\n\t{\n\t\tcjk_id = slugify(w, true);\n\t}\n\telse if (USE_CJK_MODE > 1)\n\t{\n\t\tlet cjk_list = textList(w);\n\t\tcjk_list.sort();\n\t\tcjk_id = cjk_list[0];\n\t}\n\telse if (USE_CJK_MODE)\n\t{\n\t\tlet cjk_list = libTable.auto(w);\n\t\tcjk_list.sort();\n\t\tcjk_id = cjk_list[0];\n\t}\n\n\treturn StrUtil.toHalfWidth(cjk_id);\n}\n*/\n\n//console.log(['第', '一', 'Ｔ', '网开一面', '三街六市'].sort(zhDictCompare));\n"]}