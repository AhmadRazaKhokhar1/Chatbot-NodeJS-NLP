{"version":3,"file":"extract-char.js","sourceRoot":"","sources":["extract-char.ts"],"names":[],"mappings":";;;AAAA,+CAAuC;AACvC,uCAAkD;AAClD,4DAA0B;AAC1B,4DAAuD;AACvD,+EAA8C;AAE9C,iCAKgB;AAChB,2DAAkD;AAClD,uEAA0C;AAC1C,8DAAyG;AAEzG,IAAI,GAAG,GAAG,gBAAI,CAAC,IAAI,CAAC,wBAAa,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;AAExD,IAAI,YAAY,GAAG,CAAC,CAAC;AAErB,IAAI,UAAU,GAAG;IAChB,IAAI,EAAE,EAAyB;CAC/B,CAAC;AAEF,IAAA,eAAQ,EAAC,GAAG,EAAE;IACb,GAAG,IAAA,4BAAqB,GAAE;CAC1B,EAAE;IACF,OAAO;CACP,CAAC;KACA,GAAG,CAAC,UAAU,EAAY;IAE1B,IAAI,CAAC,GAAG,EAAE,CAAC,MAAM,CAAC,UAAU,CAAC,EAAE,CAAC;QAE/B,IAAI,CAAC,GAAG,gBAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;QAE9B,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QAEV,OAAO,CAAC,CAAC;IACV,CAAC,EAAE,EAAE,CAAC,CAAC;IAEP,sBAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IAEjB,iBAAiB;AAClB,CAAC,CAAC;KACD,SAAS,CAAC,KAAK,WAAW,IAAI;IAE9B,IAAI,SAAS,GAAG,gBAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;IAEzC,IAAI,IAAI,GAAY,IAAI,CAAC;IAEzB,IAAI,IAAI,GAAG,MAAM,IAAA,2BAAY,EAAoB,IAAI,EAAE,UAAU,IAAI,EAAE,GAAG;QAEzE,GAAG,CAAC,IAAI,GAAG,IAAI,CAAC;QAEhB,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,GAAG,GAAG,CAAC,IAAI,CAAC;QAEzB,IAAI,CAAC,IAAI,cAAO,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,EAC9B,CAAC;YACA,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YAC1B,IAAI,GAAG,KAAK,CAAC;YAEb,OAAO,KAAK,CAAC;QACd,CAAC;QAED,OAAO,IAAI,CAAC;IACb,CAAC,CAAC,CAAC;IAEH,IAAI,IAAI,EACR,CAAC;QACA,OAAM;IACP,CAAC;IAED,sBAAO,CAAC,KAAK,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;IAEpC,IAAI,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;IAErC,QAAQ,GAAG,IAAA,iCAAY,EAAC,QAAQ,CAAC,CAAC;IAElC,IAAI,QAAQ,GAAG,IAAI,CAAC;IACpB,IAAI,QAAQ,GAAG,IAAA,uBAAS,EAAC,QAAQ,CAAC,GAAG,MAAM,CAAC;IAE5C,MAAM,IAAA,qBAAU,EAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;AACtC,CAAC,CAAC;KACD,GAAG,CAAC,KAAK;IAET,IAAI,UAAU,CAAC,IAAI,CAAC,MAAM,EAC1B,CAAC;QACA,IAAI,IAAI,GAAG,UAAU,CAAC,IAAI,CAAC;QAC3B,IAAI,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;QAErC,IAAI,QAAQ,GAAG,gBAAI,CAAC,IAAI,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC;QAE1C,MAAM,IAAA,qBAAU,EAAC,QAAQ,EAAE,MAAM,GAAG,IAAA,uBAAS,EAAC,QAAQ,CAAC,GAAG,MAAM,CAAC,CAAC;IACnE,CAAC;AACF,CAAC,CAAC,CACF","sourcesContent":["import { console } from \"debug-color2\";\nimport { appendFile, outputFile } from \"fs-extra\";\nimport path from \"upath2\";\nimport { serialize } from '@novel-segment/loader-line';\nimport ProjectConfig from \"../project.config\";\n\nimport {\n\tall_default_load_dict,\n\tgetCjkName,\n\tglobDict,\n\tzhDictCompare,\n} from './util';\nimport { array_unique } from 'array-hyper-unique';\nimport UString from 'uni-string/src/core';\nimport { chkLineType, EnumLineType, ILoadDictFileRow2, loadDictFile } from '@novel-segment/util-compare';\n\nlet CWD = path.join(ProjectConfig.dict_root, 'segment');\n\nlet USE_CJK_MODE = 2;\n\nlet CACHE_LIST = {\n\tskip: [] as ILoadDictFileRow2[],\n};\n\nglobDict(CWD, [\n\t...all_default_load_dict()\n], [\n\t'char*',\n])\n\t.tap(function (ls: string[])\n\t{\n\t\tlet a = ls.reduce(function (a, v)\n\t\t{\n\t\t\tlet p = path.relative(CWD, v);\n\n\t\t\ta.push(p);\n\n\t\t\treturn a;\n\t\t}, []);\n\n\t\tconsole.debug(a);\n\n\t\t//process.exit();\n\t})\n\t.mapSeries(async function (file)\n\t{\n\t\tlet _basepath = path.relative(CWD, file);\n\n\t\tlet bool: boolean = true;\n\n\t\tlet list = await loadDictFile<ILoadDictFileRow2>(file, function (list, cur)\n\t\t{\n\t\t\tcur.file = file;\n\n\t\t\tlet [w, p, f] = cur.data;\n\n\t\t\tif (w && UString.size(w) === 1)\n\t\t\t{\n\t\t\t\tCACHE_LIST.skip.push(cur);\n\t\t\t\tbool = false;\n\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\treturn true;\n\t\t});\n\n\t\tif (bool)\n\t\t{\n\t\t\treturn\n\t\t}\n\n\t\tconsole.debug(`[START]`, _basepath);\n\n\t\tlet out_list = list.map(v => v.line);\n\n\t\tout_list = array_unique(out_list);\n\n\t\tlet out_file = file;\n\t\tlet out_data = serialize(out_list) + \"\\n\\n\";\n\n\t\tawait outputFile(out_file, out_data);\n\t})\n\t.tap(async function ()\n\t{\n\t\tif (CACHE_LIST.skip.length)\n\t\t{\n\t\t\tlet list = CACHE_LIST.skip;\n\t\t\tlet out_list = list.map(v => v.line);\n\n\t\t\tlet out_file = path.join(CWD, 'char.txt');\n\n\t\t\tawait appendFile(out_file, \"\\n\\n\" + serialize(out_list) + \"\\n\\n\");\n\t\t}\n\t})\n;\n"]}