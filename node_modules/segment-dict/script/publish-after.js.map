{"version":3,"file":"publish-after.js","sourceRoot":"","sources":["publish-after.ts"],"names":[],"mappings":";AAAA;;GAEG;;;AAEH,wDAAwB;AACxB,+EAA8C;AAC9C,qEAA+C;AAE/C,+BAA4B;AAC5B,qCAAqC;AAErC,CAAC,KAAK,IAAI,EAAE;IAEX,IAAI,UAA6B,CAAC;IAClC,aAAa;IACb,UAAU,GAAG,gEAAa,mBAAmB,GAAC,CAAC;IAE/C,IAAI,OAAe,CAAC;IAEpB,aAAa;IACb,OAAO,GAAG,MAAM,0DAAO,WAAW,IAAE,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;IACtD,aAAa;IACb,OAAO,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC;IAE7B,IAAI,CAAC,OAAO,IAAI,cAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,wBAAa,CAAC,YAAY,CAAC,EAClE,CAAC;QACA,IAAI,SAAS,GAAG,MAAM,0DAAO,oBAAoB,IAC/C,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC;aACtB,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,CACjB;QAED,IAAI,CAAC,SAAS,IAAI,cAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,SAAS,CAAC,EACnD,CAAC;YACA,OAAO,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;YAC9B,OAAO,CAAC,IAAI,CAAC,WAAW,EAAE,SAAS,CAAC,CAAC;YACrC,OAAO,CAAC,IAAI,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;YACjC,OAAO,CAAC,IAAI,CAAC,eAAe,EAAE,cAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,wBAAa,CAAC,YAAY,CAAC,CAAC,CAAC;YAClF,OAAO;QACR,CAAC;IACF,CAAC;IAED,IAAI,GAAG,GAAG,IAAA,WAAI,EAAC,wBAAa,CAAC,YAAY,EAAE,MAAM,CAAC,CAAC;IAEnD,IAAI,OAAO,GAAG;QACb,GAAG;QACH,KAAK,EAAE,SAAS;KAChB,CAAC;IAEF,IAAI,GAAG,GAAG,eAAe,WAAW,CAAC,OAAO,EAAE,CAAC;IAE/C,MAAM,UAAU,CAAC,KAAK,EAAE;QACvB,QAAQ;QACR,OAAO;QACP,IAAI;QACJ,GAAG;QACH,GAAG;QACH,aAAa;KACb,EAAE,OAAO,CAAC,CAAC;IAEZ;;;;;;;;;;;;;;OAcG;AAEJ,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC","sourcesContent":["/**\n * Created by user on 2018/7/24/024.\n */\n\nimport path from 'path';\nimport ProjectConfig from '../project.config';\nimport * as PackageJson from '../package.json';\nimport CrossSpawn = require('cross-spawn-extra');\nimport { join } from 'path';\n/// <reference types=\"cross-spawn\" />\n\n(async () =>\n{\n\tlet crossSpawn: typeof CrossSpawn;\n\t// @ts-ignore\n\tcrossSpawn = await import('cross-spawn-extra');\n\n\tlet gitroot: string;\n\n\t// @ts-ignore\n\tgitroot = await import('git-root2').then(m => m.sync);\n\t// @ts-ignore\n\tgitroot = gitroot(__dirname);\n\n\tif (!gitroot || path.relative(gitroot, ProjectConfig.project_root))\n\t{\n\t\tlet __root_ws = await import('../../../__root_ws')\n\t\t\t.then(m => m.__root_ws)\n\t\t\t.catch(e => null)\n\t\t;\n\n\t\tif (!__root_ws || path.relative(gitroot, __root_ws))\n\t\t{\n\t\t\tconsole.warn(`no git exists`);\n\t\t\tconsole.warn(`__root_ws`, __root_ws);\n\t\t\tconsole.warn(`gitroot`, gitroot);\n\t\t\tconsole.warn(`path.relative`, path.relative(gitroot, ProjectConfig.project_root));\n\t\t\treturn;\n\t\t}\n\t}\n\n\tlet cwd = join(ProjectConfig.project_root, 'dict');\n\n\tlet options = {\n\t\tcwd,\n\t\tstdio: 'inherit',\n\t};\n\n\tlet msg = `npm publish ${PackageJson.version}`;\n\n\tawait crossSpawn('git', [\n\t\t'commit',\n\t\t//'-a',\n\t\t'-m',\n\t\tmsg,\n\t\t'.',\n\t\t// @ts-ignore\n\t], options);\n\n\t/*\n\tawait new Promise(function (done)\n\t{\n\t\tsetTimeout(done, 500);\n\t});\n\n\tawait crossSpawn('git', [\n\t\t'tag',\n\t\t'-a',\n\t\tPackageJson.version,\n\t\t'-m',\n\t\tmsg,\n\t\t// @ts-ignore\n\t], options);\n\t */\n\n})().catch(e => console.error(e));\n"]}