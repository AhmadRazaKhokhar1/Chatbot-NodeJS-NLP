{"version":3,"file":"index.umd.development.cjs","sources":["../src/index.ts"],"sourcesContent":["/*!\n * to-regex-range <https://github.com/micromatch/to-regex-range>\n *\n * Copyright (c) 2015-present, Jon Schlinkert.\n * Released under the MIT License.\n */\n\n'use strict';\n\nimport { isUnSafeNumLike as isNumber } from '@lazy-assert/check-basic';\n\nexport interface IOptions\n{\n\t/**\n\t * Wrap the returned value in parentheses when there is more than one regex condition. Useful when you're dynamically generating ranges.\n\t *\n\t * @example\n\t * console.log(toRegexRange('-10', '10'));\n\t * //=> -[1-9]|-?10|[0-9]\n\t *\n\t * console.log(toRegexRange('-10', '10', { capture: true }));\n\t * //=> (-[1-9]|-?10|[0-9])\n\t */\n\tcapture?: boolean,\n\t/**\n\t * Use the regex shorthand for [0-9]:\n\t *\n\t * @example\n\t * console.log(toRegexRange('0', '999999'));\n\t * //=> [0-9]|[1-9][0-9]{1,5}\n\t *\n\t * console.log(toRegexRange('0', '999999', { shorthand: true }));\n\t * //=> \\d|[1-9]\\d{1,5}\n\t */\n\tshorthand?: boolean,\n\t/**\n\t * @default true\n\t * This option relaxes matching for leading zeros when when ranges are zero-padded.\n\t * @example\n\t * const source = toRegexRange('-0010', '0010');\n\t * const regex = new RegExp(`^${source}$`);\n\t * console.log(regex.test('-10')); //=> true\n\t * console.log(regex.test('-010')); //=> true\n\t * console.log(regex.test('-0010')); //=> true\n\t * console.log(regex.test('10')); //=> true\n\t * console.log(regex.test('010')); //=> true\n\t * console.log(regex.test('0010')); //=> true\n\t * @example When `relaxZeros` is false, matching is strict:\n\t * const source = toRegexRange('-0010', '0010', { relaxZeros: false });\n\t * const regex = new RegExp(`^${source}$`);\n\t * console.log(regex.test('-10')); //=> false\n\t * console.log(regex.test('-010')); //=> false\n\t * console.log(regex.test('-0010')); //=> true\n\t * console.log(regex.test('10')); //=> false\n\t * console.log(regex.test('010')); //=> false\n\t * console.log(regex.test('0010')); //=> true\n\t */\n\trelaxZeros?: boolean,\n\n\tstrictZeros?: boolean,\n\twrap?: boolean,\n}\n\nexport const SymCache = Symbol.for('SymCache');\n\nfunction isAllowedValue(value: unknown)\n{\n\tif (isNumber(value) === true)\n\t{\n\t\tif (typeof value === 'string')\n\t\t{\n\t\t\treturn /^-?\\d+$/.test(value);\n\t\t}\n\n\t\treturn true\n\t}\n\n\treturn false\n}\n\nexport function toRegexRange(min: number | string, max?: number | string, options?: IOptions): string\n{\n\tif (!isAllowedValue(min))\n\t{\n\t\tthrow new TypeError(`toRegexRange: expected the first argument '${min}' to be a number like.`);\n\t}\n\n\tif (max === void 0 || min === max)\n\t{\n\t\treturn String(min);\n\t}\n\n\tif (!isAllowedValue(max))\n\t{\n\t\tthrow new TypeError(`toRegexRange: expected the second argument '${max}' to be a number like.`);\n\t}\n\n\tmin = String(min);\n\tmax = String(max);\n\n\tlet opts: IOptions = { relaxZeros: true, ...options };\n\tif (typeof opts.strictZeros === 'boolean')\n\t{\n\t\topts.relaxZeros = opts.strictZeros === false;\n\t}\n\n\tlet relax = String(opts.relaxZeros);\n\tlet shorthand = String(opts.shorthand);\n\tlet capture = String(opts.capture);\n\tlet wrap = String(opts.wrap);\n\tlet cacheKey = min + ':' + max + '=' + relax + shorthand + capture + wrap;\n\n\tif (toRegexRange[SymCache].hasOwnProperty(cacheKey))\n\t{\n\t\t// @ts-ignore\n\t\treturn toRegexRange[SymCache][cacheKey].result;\n\t}\n\n\t// @ts-ignore\n\tlet a = Math.min(min, max);\n\t// @ts-ignore\n\tlet b = Math.max(min, max);\n\n\tif (Math.abs(a - b) === 1)\n\t{\n\t\tlet result = min + '|' + max;\n\t\tif (opts.capture)\n\t\t{\n\t\t\treturn `(${result})`;\n\t\t}\n\t\tif (opts.wrap === false)\n\t\t{\n\t\t\treturn result;\n\t\t}\n\t\treturn `(?:${result})`;\n\t}\n\n\tlet isPadded = hasPadding(min) || hasPadding(max);\n\tlet state: any = { min, max, a, b };\n\tlet positives = [];\n\tlet negatives = [];\n\n\tif (isPadded)\n\t{\n\t\tstate.isPadded = isPadded;\n\t\tstate.maxLen = String(state.max).length;\n\t}\n\n\tif (a < 0)\n\t{\n\t\tlet newMin = b < 0 ? Math.abs(b) : 1;\n\t\tnegatives = splitToPatterns(newMin, Math.abs(a), state, opts);\n\t\ta = state.a = 0;\n\t}\n\n\tif (b >= 0)\n\t{\n\t\tpositives = splitToPatterns(a, b, state, opts);\n\t}\n\n\tstate.negatives = negatives;\n\tstate.positives = positives;\n\tstate.result = collatePatterns(negatives, positives, opts);\n\n\tif (opts.capture === true)\n\t{\n\t\tstate.result = `(${state.result})`;\n\t}\n\telse if (opts.wrap !== false && (positives.length + negatives.length) > 1)\n\t{\n\t\tstate.result = `(?:${state.result})`;\n\t}\n\n\ttoRegexRange[SymCache][cacheKey] = state;\n\treturn state.result;\n}\n\nfunction collatePatterns(neg, pos, options)\n{\n\tlet onlyNegative = filterPatterns(neg, pos, '-', false, options) || [];\n\tlet onlyPositive = filterPatterns(pos, neg, '', false, options) || [];\n\tlet intersected = filterPatterns(neg, pos, '-?', true, options) || [];\n\tlet subpatterns = onlyNegative.concat(intersected).concat(onlyPositive);\n\treturn subpatterns.join('|');\n}\n\nfunction splitToRanges(min, max)\n{\n\tlet nines = 1;\n\tlet zeros = 1;\n\n\tlet stop = countNines(min, nines);\n\tlet stops: any = new Set([max]);\n\n\twhile (min <= stop && stop <= max)\n\t{\n\t\tstops.add(stop);\n\t\tnines += 1;\n\t\tstop = countNines(min, nines);\n\t}\n\n\tstop = countZeros(max + 1, zeros) - 1;\n\n\twhile (min < stop && stop <= max)\n\t{\n\t\tstops.add(stop);\n\t\tzeros += 1;\n\t\tstop = countZeros(max + 1, zeros) - 1;\n\t}\n\n\tstops = [...stops];\n\tstops.sort(compare);\n\treturn stops;\n}\n\n/**\n * Convert a range to a regex pattern\n * @param {Number} `start`\n * @param {Number} `stop`\n * @return {String}\n */\n\nfunction rangeToPattern(start, stop, options)\n{\n\tif (start === stop)\n\t{\n\t\treturn { pattern: start, count: [], digits: 0 };\n\t}\n\n\tlet zipped = zip(start, stop);\n\tlet digits = zipped.length;\n\tlet pattern = '';\n\tlet count = 0;\n\n\tfor (let i = 0; i < digits; i++)\n\t{\n\t\tlet [startDigit, stopDigit] = zipped[i];\n\n\t\tif (startDigit === stopDigit)\n\t\t{\n\t\t\tpattern += startDigit;\n\n\t\t}\n\t\telse if (startDigit !== '0' || stopDigit !== '9')\n\t\t{\n\t\t\tpattern += toCharacterClass(startDigit, stopDigit, options);\n\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\n\tif (count)\n\t{\n\t\tpattern += options.shorthand === true ? '\\\\d' : '[0-9]';\n\t}\n\n\treturn { pattern, count: [count], digits };\n}\n\nfunction splitToPatterns(min, max, tok, options)\n{\n\tlet ranges = splitToRanges(min, max) as any as any[];\n\tlet tokens = [];\n\tlet start = min;\n\tlet prev;\n\n\tfor (let i = 0; i < ranges.length; i++)\n\t{\n\t\tlet max = ranges[i];\n\t\tlet obj = rangeToPattern(String(start), String(max), options) as any;\n\t\tlet zeros = '';\n\n\t\tif (!tok.isPadded && prev && prev.pattern === obj.pattern)\n\t\t{\n\t\t\tif (prev.count.length > 1)\n\t\t\t{\n\t\t\t\tprev.count.pop();\n\t\t\t}\n\n\t\t\tprev.count.push(obj.count[0]);\n\t\t\tprev.string = prev.pattern + toQuantifier(prev.count);\n\t\t\tstart = max + 1;\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (tok.isPadded)\n\t\t{\n\t\t\tzeros = padZeros(max, tok, options);\n\t\t}\n\n\t\tobj.string = zeros + obj.pattern + toQuantifier(obj.count);\n\t\ttokens.push(obj);\n\t\tstart = max + 1;\n\t\tprev = obj;\n\t}\n\n\treturn tokens;\n}\n\nfunction filterPatterns(arr, comparison, prefix, intersection, options)\n{\n\tlet result = [];\n\n\tfor (let ele of arr)\n\t{\n\t\tlet { string } = ele;\n\n\t\t// only push if _both_ are negative...\n\t\tif (!intersection && !contains(comparison, 'string', string))\n\t\t{\n\t\t\tresult.push(prefix + string);\n\t\t}\n\n\t\t// or _both_ are positive\n\t\tif (intersection && contains(comparison, 'string', string))\n\t\t{\n\t\t\tresult.push(prefix + string);\n\t\t}\n\t}\n\treturn result;\n}\n\n/**\n * Zip strings\n */\n\nfunction zip(a, b)\n{\n\tlet arr = [];\n\tfor (let i = 0; i < a.length; i++) arr.push([a[i], b[i]]);\n\treturn arr;\n}\n\nfunction compare(a, b)\n{\n\treturn a > b ? 1 : b > a ? -1 : 0;\n}\n\nfunction contains(arr, key, val)\n{\n\treturn arr.some(ele => ele[key] === val);\n}\n\nfunction countNines(min, len)\n{\n\treturn Number(String(min).slice(0, -len) + '9'.repeat(len));\n}\n\nfunction countZeros(integer, zeros)\n{\n\treturn integer - (integer % Math.pow(10, zeros));\n}\n\nfunction toQuantifier(digits)\n{\n\tlet [start = 0, stop = ''] = digits;\n\tif (stop || start > 1)\n\t{\n\t\treturn `{${start + (stop ? ',' + stop : '')}}`;\n\t}\n\treturn '';\n}\n\nfunction toCharacterClass(a, b, options)\n{\n\treturn `[${a}${(b - a === 1) ? '' : '-'}${b}]`;\n}\n\nfunction hasPadding(str)\n{\n\treturn /^-?(0+)\\d/.test(str);\n}\n\nfunction padZeros(value, tok, options)\n{\n\tif (!tok.isPadded)\n\t{\n\t\treturn value;\n\t}\n\n\tlet diff = Math.abs(tok.maxLen - String(value).length);\n\tlet relax = options.relaxZeros !== false;\n\n\tswitch (diff)\n\t{\n\t\tcase 0:\n\t\t\treturn '';\n\t\tcase 1:\n\t\t\treturn relax ? '0?' : '0';\n\t\tcase 2:\n\t\t\treturn relax ? '0{0,2}' : '00';\n\t\tdefault:\n\t\t{\n\t\t\treturn relax ? `0{0,${diff}}` : `0{${diff}}`;\n\t\t}\n\t}\n}\n\n/**\n * Cache\n */\n\ntoRegexRange[SymCache] = {};\ntoRegexRange.clearCache = () => (toRegexRange[SymCache] = {});\n\nObject.defineProperty(toRegexRange, 'toRegexRange', { value: toRegexRange });\nObject.defineProperty(toRegexRange, 'default', { value: toRegexRange });\nObject.defineProperty(toRegexRange, 'SymCache', { value: SymCache });\n\n/**\n * Expose `toRegexRange`\n */\nexport default toRegexRange;\n"],"names":["SymCache","Symbol","for","isAllowedValue","value","isNumber","test","toRegexRange","min","max","options","TypeError","String","opts","relaxZeros","strictZeros","relax","shorthand","capture","wrap","cacheKey","hasOwnProperty","result","a","Math","b","abs","isPadded","hasPadding","state","positives","negatives","maxLen","length","newMin","splitToPatterns","collatePatterns","neg","pos","onlyNegative","filterPatterns","onlyPositive","intersected","subpatterns","concat","join","splitToRanges","nines","zeros","stop","countNines","stops","Set","add","countZeros","sort","compare","rangeToPattern","start","pattern","count","digits","zipped","zip","i","startDigit","stopDigit","toCharacterClass","tok","ranges","tokens","prev","obj","pop","push","string","toQuantifier","padZeros","arr","comparison","prefix","intersection","ele","contains","key","val","some","len","Number","slice","repeat","integer","pow","str","diff","clearCache","Object","defineProperty"],"mappings":"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"}