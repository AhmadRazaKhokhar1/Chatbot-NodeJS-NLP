{"version":3,"file":"index.umd.development.cjs","sources":["../src/index.ts"],"sourcesContent":["import { naturalCompare as _naturalCompare, IOptions as IOptionsStringNaturalCompare } from 'string-natural-compare2';\n\nexport type { IOptionsStringNaturalCompare }\n\nexport interface IOptionsNaturalCompare extends IOptionsStringNaturalCompare\n{\n\tdesc?: boolean,\n}\n\n/**\n * Compare alphanumeric strings the same way a human would,\n * using a natural order algorithm\n * (originally known as the alphanum algorithm)\n * where numeric characters are sorted\n * based on their numeric values rather than their ASCII values.\n */\nexport function naturalCompare(a: string | number, b: string | number, opts?: IOptionsNaturalCompare)\n{\n\tlet i: number;\n\tconst typeA = typeof a === 'number';\n\tconst typeB = typeof b === 'number';\n\n\tif (typeA && typeB)\n\t{\n\t\t// @ts-ignore\n\t\ti = a - b\n\t}\n\telse\n\t{\n\t\tif (typeA)\n\t\t{\n\t\t\ta = String(a);\n\t\t}\n\t\tif (typeB)\n\t\t{\n\t\t\tb = String(b);\n\t\t}\n\n\t\tif (a === b)\n\t\t{\n\t\t\treturn 0\n\t\t}\n\n\t\ti = _naturalCompare(a as any, b as any, opts)\n\t}\n\n\tif (i !== 0 && opts?.desc)\n\t{\n\t\ti = 0 - i;\n\t}\n\n\treturn i\n}\n\nexport type ICompareFn = (a: string | number, b: string | number) => number;\n\n/**\n * create compare with preset options\n */\nexport function createNew(opts?: IOptionsNaturalCompare): ICompareFn\n{\n\treturn (a: string | number, b: string | number) => naturalCompare(a, b, opts)\n}\n\n/**\n * compare strings case-insensitively\n */\nexport const compareCaseInsensitive = createNew({\n\tcaseInsensitive: true,\n})\n\nexport { compareCaseInsensitive as caseInsensitive }\n\n// @ts-ignore\nif (process.env.TSDX_FORMAT !== 'esm')\n{\n\tObject.defineProperty(naturalCompare, \"__esModule\", { value: true });\n\n\tObject.defineProperty(naturalCompare, \"default\", { value: naturalCompare });\n\tObject.defineProperty(naturalCompare, \"naturalCompare\", { value: naturalCompare });\n\n\tObject.defineProperty(naturalCompare, \"createNew\", { value: createNew });\n\tObject.defineProperty(naturalCompare, \"compareCaseInsensitive\", { value: compareCaseInsensitive });\n\tObject.defineProperty(naturalCompare, \"caseInsensitive\", { value: compareCaseInsensitive });\n}\n\nexport default naturalCompare\n"],"names":["naturalCompare","a","b","opts","i","typeA","typeB","String","_naturalCompare","desc","createNew","compareCaseInsensitive","caseInsensitive","Object","defineProperty","value"],"mappings":";;;;;;UAgBgBA,cAAc,CAACC,CAAkB,EAAEC,CAAkB,EAAEC,IAA6B,EAAA;CAEnG,EAAA,IAAIC,CAAS,CAAA;CACb,EAAA,MAAMC,KAAK,GAAG,OAAOJ,CAAC,KAAK,QAAQ,CAAA;CACnC,EAAA,MAAMK,KAAK,GAAG,OAAOJ,CAAC,KAAK,QAAQ,CAAA;GAEnC,IAAIG,KAAK,IAAIC,KAAK,EAClB;KAECF,CAAC,GAAGH,CAAC,GAAGC,CAAC,CAAA;CACT,GAAA,MAED;CACC,IAAA,IAAIG,KAAK,EACT;CACCJ,MAAAA,CAAC,GAAGM,MAAM,CAACN,CAAC,CAAC,CAAA;CACb,KAAA;CACD,IAAA,IAAIK,KAAK,EACT;CACCJ,MAAAA,CAAC,GAAGK,MAAM,CAACL,CAAC,CAAC,CAAA;CACb,KAAA;KAED,IAAID,CAAC,KAAKC,CAAC,EACX;CACC,MAAA,OAAO,CAAC,CAAA;CACR,KAAA;KAEDE,CAAC,GAAGI,oCAAe,CAACP,CAAQ,EAAEC,CAAQ,EAAEC,IAAI,CAAC,CAAA;CAC7C,GAAA;GAED,IAAIC,CAAC,KAAK,CAAC,IAAID,IAAI,KAAJA,IAAAA,IAAAA,IAAI,KAAJA,KAAAA,CAAAA,IAAAA,IAAI,CAAEM,IAAI,EACzB;KACCL,CAAC,GAAG,CAAC,GAAGA,CAAC,CAAA;CACT,GAAA;CAED,EAAA,OAAOA,CAAC,CAAA;CACT,CAAA;CAOM,SAAUM,SAAS,CAACP,IAA6B,EAAA;CAEtD,EAAA,OAAO,CAACF,CAAkB,EAAEC,CAAkB,KAAKF,cAAc,CAACC,CAAC,EAAEC,CAAC,EAAEC,IAAI,CAAC,CAAA;CAC9E,CAAA;AAKaQ,OAAAA,sBAAsB,gBAAGD,SAAS,CAAC;CAC/CE,EAAAA,eAAe,EAAE,IAAA;CACjB,CAAA,EAAC;CAMF;CACCC,EAAAA,MAAM,CAACC,cAAc,CAACd,cAAc,EAAE,YAAY,EAAE;CAAEe,IAAAA,KAAK,EAAE,IAAA;CAAI,GAAE,CAAC,CAAA;CAEpEF,EAAAA,MAAM,CAACC,cAAc,CAACd,cAAc,EAAE,SAAS,EAAE;CAAEe,IAAAA,KAAK,EAAEf,cAAAA;CAAc,GAAE,CAAC,CAAA;CAC3Ea,EAAAA,MAAM,CAACC,cAAc,CAACd,cAAc,EAAE,gBAAgB,EAAE;CAAEe,IAAAA,KAAK,EAAEf,cAAAA;CAAc,GAAE,CAAC,CAAA;CAElFa,EAAAA,MAAM,CAACC,cAAc,CAACd,cAAc,EAAE,WAAW,EAAE;CAAEe,IAAAA,KAAK,EAAEL,SAAAA;CAAS,GAAE,CAAC,CAAA;CACxEG,EAAAA,MAAM,CAACC,cAAc,CAACd,cAAc,EAAE,wBAAwB,EAAE;CAAEe,IAAAA,KAAK,EAAEJ,sBAAAA;CAAsB,GAAE,CAAC,CAAA;CAClGE,EAAAA,MAAM,CAACC,cAAc,CAACd,cAAc,EAAE,iBAAiB,EAAE;CAAEe,IAAAA,KAAK,EAAEJ,sBAAAA;CAAsB,GAAE,CAAC,CAAA;CAC3F;;;;;;;;;;;;;;"}