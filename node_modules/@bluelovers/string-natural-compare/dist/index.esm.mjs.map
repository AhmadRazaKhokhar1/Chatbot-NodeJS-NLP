{"version":3,"file":"index.esm.mjs","sources":["../src/index.ts"],"sourcesContent":["import { naturalCompare as _naturalCompare, IOptions as IOptionsStringNaturalCompare } from 'string-natural-compare2';\n\nexport type { IOptionsStringNaturalCompare }\n\nexport interface IOptionsNaturalCompare extends IOptionsStringNaturalCompare\n{\n\tdesc?: boolean,\n}\n\n/**\n * Compare alphanumeric strings the same way a human would,\n * using a natural order algorithm\n * (originally known as the alphanum algorithm)\n * where numeric characters are sorted\n * based on their numeric values rather than their ASCII values.\n */\nexport function naturalCompare(a: string | number, b: string | number, opts?: IOptionsNaturalCompare)\n{\n\tlet i: number;\n\tconst typeA = typeof a === 'number';\n\tconst typeB = typeof b === 'number';\n\n\tif (typeA && typeB)\n\t{\n\t\t// @ts-ignore\n\t\ti = a - b\n\t}\n\telse\n\t{\n\t\tif (typeA)\n\t\t{\n\t\t\ta = String(a);\n\t\t}\n\t\tif (typeB)\n\t\t{\n\t\t\tb = String(b);\n\t\t}\n\n\t\tif (a === b)\n\t\t{\n\t\t\treturn 0\n\t\t}\n\n\t\ti = _naturalCompare(a as any, b as any, opts)\n\t}\n\n\tif (i !== 0 && opts?.desc)\n\t{\n\t\ti = 0 - i;\n\t}\n\n\treturn i\n}\n\nexport type ICompareFn = (a: string | number, b: string | number) => number;\n\n/**\n * create compare with preset options\n */\nexport function createNew(opts?: IOptionsNaturalCompare): ICompareFn\n{\n\treturn (a: string | number, b: string | number) => naturalCompare(a, b, opts)\n}\n\n/**\n * compare strings case-insensitively\n */\nexport const compareCaseInsensitive = createNew({\n\tcaseInsensitive: true,\n})\n\nexport { compareCaseInsensitive as caseInsensitive }\n\n// @ts-ignore\nif (process.env.TSDX_FORMAT !== 'esm')\n{\n\tObject.defineProperty(naturalCompare, \"__esModule\", { value: true });\n\n\tObject.defineProperty(naturalCompare, \"default\", { value: naturalCompare });\n\tObject.defineProperty(naturalCompare, \"naturalCompare\", { value: naturalCompare });\n\n\tObject.defineProperty(naturalCompare, \"createNew\", { value: createNew });\n\tObject.defineProperty(naturalCompare, \"compareCaseInsensitive\", { value: compareCaseInsensitive });\n\tObject.defineProperty(naturalCompare, \"caseInsensitive\", { value: compareCaseInsensitive });\n}\n\nexport default naturalCompare\n"],"names":["naturalCompare","a","b","opts","i","typeA","typeB","String","_naturalCompare","desc","createNew","compareCaseInsensitive","caseInsensitive"],"mappings":";;SAgBgBA,eAAeC,GAAoBC,GAAoBC;EAEtE,IAAIC;EACJ,MAAMC,IAAqB,mBAANJ,GACfK,IAAqB,mBAANJ;EAErB,IAAIG,KAASC,GAGZF,IAAIH,IAAIC,QAGT;IAUC,IATIG,MAEHJ,IAAIM,OAAON,KAERK,MAEHJ,IAAIK,OAAOL,KAGRD,MAAMC,GAET,OAAO;IAGRE,IAAII,EAAgBP,GAAUC,GAAUC;AACxC;EAOD,OALU,MAANC,aAAWD,KAAAA,EAAMM,SAEpBL,IAAI,IAAIA,IAGFA;AACR;;AAOM,SAAUM,UAAUP;EAEzB,OAAO,CAACF,GAAoBC,MAAuBF,eAAeC,GAAGC,GAAGC;AACzE;;AAKaQ,MAAAA,IAAyBD,UAAU;EAC/CE,kBAAiB;;;"}