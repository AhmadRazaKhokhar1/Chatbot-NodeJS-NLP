!function(i, n) {
  "object" == typeof exports && "undefined" != typeof module ? n(exports) : "function" == typeof define && define.amd ? define([ "exports" ], n) : n((i = "undefined" != typeof globalThis ? globalThis : i || self).LazyAssertCheckBasic = {});
}(this, (function(i) {
  "use strict";
  function isNum(i) {
    return "number" == typeof i && i === +i;
  }
  function isInt(i) {
    return i === Math.floor(i);
  }
  function isFloat(i) {
    return isNum(i) && !isInt(i);
  }
  function isFiniteNum(i) {
    return isNum(i) && isFinite(i);
  }
  function isUnSafeNumString(i) {
    return "string" == typeof i && "" !== (i = i.trim()) && isFinite(+i);
  }
  i.isFiniteFloat = function isFiniteFloat(i) {
    return isFiniteNum(i) && isFloat(i);
  }, i.isFiniteInt = function isFiniteInt(i) {
    return isFiniteNum(i) && isInt(i);
  }, i.isFiniteNum = isFiniteNum, i.isFloat = isFloat, i.isInfinity = function isInfinity(i) {
    return Infinity === i || -Infinity === i;
  }, i.isInt = isInt, i.isNaN = function isNaN(i) {
    return Number.isNaN(i);
  }, i.isNegative = function isNegative(i) {
    return isNum(i) && (i < 0 || -Infinity === i);
  }, i.isNum = isNum, i.isPositive = function isPositive(i) {
    return isNum(i) && (i > 0 || Infinity === i);
  }, i.isUnSafeNumLike = function isUnSafeNumLike(i) {
    return isFiniteNum(i) || isUnSafeNumString(i);
  }, i.isUnSafeNumString = isUnSafeNumString, i.isZero = function isZero(i) {
    return 0 === i || -0 === i;
  }, Object.defineProperty(i, "__esModule", {
    value: !0
  });
}));
//# sourceMappingURL=index.umd.production.min.cjs.map
