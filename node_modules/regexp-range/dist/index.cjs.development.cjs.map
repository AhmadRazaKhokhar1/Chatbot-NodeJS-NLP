{"version":3,"file":"index.cjs.development.cjs","sources":["../src/index.ts","../src/index.cts"],"sourcesContent":["/**\n * Created by user on 2018/5/7/007.\n */\n\nimport { fill as _fillRange } from '@bluelovers/fill-range';\nimport { TABLE_RANGE } from '@lazy-cjk/regexp-range-table';\nimport { array_unique_overwrite } from 'array-hyper-unique';\n\nexport { TABLE_RANGE }\n\nexport type IOptions = {\n\n\t/**\n\t * 字元範圍表\n\t */\n\tdataTables?: typeof TABLE_RANGE,\n\n\t/**\n\t * 回傳 陣列\n\t */\n\tarrayMode?: boolean,\n\n\t/**\n\t * 回傳 字串\n\t */\n\tcreateRegExpString?: boolean,\n\t/**\n\t * 回傳由 [] 包覆的字串\n\t */\n\tcreateRegExpClass?: boolean,\n\n\t/**\n\t * 找到第一個就停止\n\t */\n\tfindFirstOne?: boolean,\n}\n\nexport function matchRange(from: string | number, to: string | number, options: IOptions & {\n\tcreateRegExpString: true,\n}): string\nexport function matchRange(from: string | number, to: string | number, options?: IOptions): string[]\nexport function matchRange(from: string | number, to: string | number, options: IOptions = {}): string[] | string\n{\n\toptions = getOptions(options);\n\n\tlet s = from as string;\n\tlet e = to as string;\n\n\tlet ret: string[] = [];\n\n\tlet findFirstOne = !!options.findFirstOne;\n\n\tObject\n\t\t.keys(options.dataTables)\n\t\t// @ts-ignore\n\t\t.some(function (key: keyof typeof options.dataTables): boolean\n\t\t{\n\t\t\tlet bool: boolean;\n\n\t\t\toptions.dataTables[key].some(function (arr): boolean\n\t\t\t{\n\t\t\t\tlet i = arr.indexOf(s);\n\t\t\t\tlet j = arr.indexOf(e, i);\n\n\t\t\t\tif (i !== -1 && j !== -1)\n\t\t\t\t{\n\t\t\t\t\tret.push(...arr.slice(i, j + 1));\n\n\t\t\t\t\tbool = true;\n\t\t\t\t\treturn findFirstOne;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (bool)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t})\n\t;\n\n\tif (!ret || !ret.length)\n\t{\n\t\treturn null;\n\t}\n\n\tarray_unique_overwrite(ret);\n\n\tif (options.createRegExpString)\n\t{\n\t\treturn toRegExpString(ret, options.createRegExpClass);\n\t}\n\n\treturn ret;\n}\n\nexport function toRegExpString(arr: string[], warpClass?: boolean)\n{\n\tif (arr.length === 1)\n\t{\n\t\treturn arr[0];\n\t}\n\n\tlet s = arr.join('');\n\n\treturn warpClass ? '[' + s + ']' : s;\n}\n\nexport function fillRange(from: string | number, to: string | number, options: IOptions = {}): string[]\n{\n\toptions = getOptions(options);\n\n\tlet s = from;\n\tlet e = to;\n\n\tlet ret: string[] = null;\n\n\tret = matchRange(from, to, options);\n\n\tif (!ret && (options.arrayMode || String(s).length === 1 && String(e).length === 1))\n\t{\n\t\tlet _ok: boolean;\n\n\t\tif (typeof s === 'string' && typeof e === 'string')\n\t\t{\n\t\t\tlet a = s.charCodeAt(0);\n\t\t\tlet b = e.charCodeAt(0);\n\n\t\t\t_ok = a <= b;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t_ok = true;\n\t\t}\n\n\t\tif (_ok)\n\t\t{\n\t\t\tret = _fillRange(s, e);\n\t\t}\n\n\t\tif (!ret?.length)\n\t\t{\n\t\t\tret = null;\n\t\t}\n\t}\n\n\tif (Array.isArray(ret))\n\t{\n\t\tret = ret.map(v => String(v));\n\t}\n\n\treturn ret;\n}\n\nexport function getOptions(options: IOptions): IOptions\n{\n\tlet opts = Object.assign({} as IOptions, options);\n\n\topts.dataTables = opts.dataTables || TABLE_RANGE;\n\n\treturn opts;\n}\n\n// @ts-ignore\nif (process.env.TSDX_FORMAT !== 'esm')\n{\n\tObject.defineProperty(matchRange, \"__esModule\", { value: true });\n\n\tObject.defineProperty(matchRange, 'matchRange', { value: matchRange });\n\tObject.defineProperty(matchRange, 'default', { value: matchRange });\n\n\tObject.defineProperty(matchRange, 'getOptions', {\n\t\tvalue: getOptions,\n\t});\n\tObject.defineProperty(matchRange, 'toRegExpString', {\n\t\tvalue: toRegExpString,\n\t});\n\tObject.defineProperty(matchRange, 'TABLE_RANGE', {\n\t\tvalue: TABLE_RANGE,\n\t});\n\tObject.defineProperty(matchRange, 'fillRange', {\n\t\tvalue: fillRange,\n\t});\n}\n\nexport default matchRange;\n","import { matchRange } from './index';\n\n// @ts-ignore\nexport = matchRange\n"],"names":["s","from","e","to","ret","keys","options","dataTables","some","key","bool","arr","indexOf","j","push","slice","i","findFirstOne","length","array_unique_overwrite","createRegExpString","toRegExpString","createRegExpClass","warpClass","join","fillRange","_ok","module","exports","matchRange"],"mappings":";;;;;;;;EAyCA,IAAAA,CAAA,GAAAC,IAAA,CAAA;EAEC,IAAAC,CAAA,GAAAC,EAAA,CAAA;AAKI,EAAA,IAAAC,GAAA,GAAA,EAAA,CAAA;;QAsDQ,CAGZC,IAAA,CAAAC,OAAA,CAAAC,UAAA,CAAA;AAIA;GAEIC,IAAC,CAAQ,UAAAC,GAAA,EAAA;AAGT,IAAA,IAAAC,IAAqB,CAAA;AAIrBJ,IAAAA,OAAA,CAAAC,UAAS,CAAAE,GAAA,CAAQD,CAAAA,IAAA,WAAaG,GAAA,EAAA;;iBAM5B,CAAAC,OAAA;gBACA,CAAA,CAAA,IAAAC,CAAA,KAAA,CAAA,CAAA,EAAA;QAEJT,GAAA,CAAAU,IAAM,CAAOH,GAAAA,GAAA,CAAAI,KAAA,CAAAC,CAAA,EAAAH,CAAA,GAAA,CAAA,CAAA,CAAA,CAAA;QAGbH,IAAA,GAAA,IAAA,CAAA;AAEA,QAAA,OAAAO,YAAA,CAAA;AAIA,OAAA;;;aAOD,IAAA,CAAA;;;cAOD,CAAAb,GAAA,CAAAc,MAAA,EAAA;IACA,OAAA,IAAA,CAAA;;AAQY,EAAAC,uCAAA,CAAAf,GAAA,CAAA,CAAA;AACZ,EAAA,IAAA,OAAA,CAAAgB,kBAAA,EAAA;AAGG,IAAA,OAAAC,cAAA,CAAAjB,GAAA,EAAAE,OAAA,CAAAgB,iBAAA,CAAA,CAAA;AAIH,GAAA;SAGAlB,GAAA,CAAA;;AAGA,SAAAiB,cAAAA,CAAAV,GAAA,EAAAY,SAAA,EAAA;EAEC,IAAAZ,GAAA,CAAAO,MAAE,KAAA,CAAA,EAAA;AAEF,IAAA,OAAAP,GAAA,CAAA,CAAA,CAAA,CAAA;;AAGA,EAAA,IAAAX,CAAA,GAAAW,GAAA,CAAAa,IAAA,CAAA,EAAA,CAAA,CAAA;AACA,EAAA,OAAAD,SAAA,GAAA,GAAA,GAAAvB,CAAA,GAAA,GAAA,GAAAA,CAAA,CAAA;;AAGF,kBAA0ByB,CAAAxB,IAAA,EAAAE,EAAA,EAAAG,OAAA,GAAA,EAAA,EAAA;;;;;;;;AAA1B,IAAA,IAAAoB,GAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtLA;AAAAC,MAAA,CAAAC,OAAA,GACSC,UAAU;;"}