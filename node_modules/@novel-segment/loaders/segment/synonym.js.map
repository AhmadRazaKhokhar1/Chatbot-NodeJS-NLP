{"version":3,"file":"synonym.js","sourceRoot":"","sources":["synonym.ts"],"names":[],"mappings":";AAAA;;GAEG;;;AAMH,sEAA8D;AAM9D,MAAM,SAAS,GAAG,IAAI,8BAAW,CAAkB;IAClD,SAAS,CAAC,KAAa;QAEtB,IAAI,GAAG,GAAG,KAAK;aACb,OAAO,CAAC,WAAW,EAAE,EAAE,CAAC;aACxB,KAAK,CAAC,GAAG,CAAC,CACX;QAED,IAAI,GAAG,CAAC,MAAM,GAAG,CAAC,EAClB,CAAC;YACA,MAAM,IAAI,cAAc,CAAC,GAAG,KAAK,EAAE,CAAC,CAAC;QACtC,CAAC;QAED,OAAO,GAAG,CAAC,GAAG,CAAC,UAAU,CAAS;YAEjC,CAAC,GAAG,CAAC;iBACH,OAAO,CAAC,WAAW,EAAE,EAAE,CAAC;iBACxB,IAAI,EAAE,CACP;YAED,IAAI,CAAC,IAAI,EAAE,EACX,CAAC;gBACA,MAAM,IAAI,cAAc,CAAC,GAAG,KAAK,EAAE,CAAC,CAAC;YACtC,CAAC;YAED,OAAO,CAAC,CAAC;QACV,CAAC,CAAQ,CAAC;IACX,CAAC;IAED,MAAM,CAAC,IAAY;QAElB,IAAI,GAAG,IAAI;aACT,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC;aACtB,IAAI,EAAE;aACN,OAAO,CAAC,WAAW,EAAE,EAAE,CAAC,CACzB;QAED,IAAI,IAAI,IAAI,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,EACrC,CAAC;YACA,OAAO,IAAI,CAAC;QACb,CAAC;IACF,CAAC;CAED,CAAC,CAAC;AAEU,QAAA,IAAI,GAAG,SAAS,CAAC,IAA6B,CAAC;AAC/C,QAAA,QAAQ,GAAG,SAAS,CAAC,QAAqC,CAAC;AAE3D,QAAA,UAAU,GAAG,SAAS,CAAC,UAAyC,CAAC;AACjE,QAAA,cAAc,GAAG,SAAS,CAAC,cAAiD,CAAC;AAE7E,QAAA,SAAS,GAAG,SAAS,CAAC,SAAuC,CAAC;AAC9D,QAAA,aAAa,GAAG,SAAS,CAAC,aAA+C,CAAC;AAE1E,QAAA,SAAS,GAAG,SAAS,CAAC,SAAuC,CAAC;AAE9D,QAAA,MAAM,GAAG,SAAS,CAAC;AAEhC,kBAAe,SAAS,CAAC,IAAI,CAAC","sourcesContent":["/**\n * Created by user on 2018/3/14/014.\n */\n\nimport { wrapStreamToPromise, IStreamLineWithValue } from '@novel-segment/stream-loader-core/line';\nimport Promise = require('bluebird');\nimport createLoadStream, { ICallback } from '@novel-segment/stream-loader-core/stream';\nimport createLoadStreamSync from '@novel-segment/stream-loader-core/sync';\nimport { LoaderClass } from '@novel-segment/dict-loader-core';\nimport { ArrayTwoOrMore } from '@novel-segment/types';\n\nexport type IDictRow = ArrayTwoOrMore<string>;\nexport type IDict = IDictRow[];\n\nconst libLoader = new LoaderClass<IDict, IDictRow>({\n\tparseLine(input: string): IDictRow\n\t{\n\t\tlet ret = input\n\t\t\t.replace(/^\\s+|\\s+$/, '')\n\t\t\t.split(',')\n\t\t;\n\n\t\tif (ret.length < 2)\n\t\t{\n\t\t\tthrow new ReferenceError(`${input}`);\n\t\t}\n\n\t\treturn ret.map(function (s: string)\n\t\t{\n\t\t\ts = s\n\t\t\t\t.replace(/^\\s+|\\s+$/, '')\n\t\t\t\t.trim()\n\t\t\t;\n\n\t\t\tif (s == '')\n\t\t\t{\n\t\t\t\tthrow new ReferenceError(`${input}`);\n\t\t\t}\n\n\t\t\treturn s;\n\t\t}) as any;\n\t},\n\n\tfilter(line: string)\n\t{\n\t\tline = line\n\t\t\t.replace(/\\uFEFF/g, '')\n\t\t\t.trim()\n\t\t\t.replace(/^\\s+|\\s+$/, '')\n\t\t;\n\n\t\tif (line && line.indexOf('\\/\\/') != 0)\n\t\t{\n\t\t\treturn line;\n\t\t}\n\t},\n\n});\n\nexport const load = libLoader.load as typeof libLoader.load;\nexport const loadSync = libLoader.loadSync as typeof libLoader.loadSync;\n\nexport const loadStream = libLoader.loadStream as typeof libLoader.loadStream;\nexport const loadStreamSync = libLoader.loadStreamSync as typeof libLoader.loadStreamSync;\n\nexport const parseLine = libLoader.parseLine as typeof libLoader.parseLine;\nexport const stringifyLine = libLoader.stringifyLine as typeof libLoader.stringifyLine;\n\nexport const serialize = libLoader.serialize as typeof libLoader.serialize;\n\nexport const Loader = libLoader;\n\nexport default libLoader.load;\n"]}