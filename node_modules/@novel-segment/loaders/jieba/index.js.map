{"version":3,"file":"index.js","sourceRoot":"","sources":["index.ts"],"names":[],"mappings":";AAAA;;GAEG;;;;AAEH,iEAAmG;AAEnG,8FAAuF;AACvF,0FAA0E;AAK1E;;;;EAIE;AACF,SAAgB,SAAS,CAAC,KAAa;IAEtC,IAAI,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC,GAAG,KAAK;SACrB,OAAO,CAAC,WAAW,EAAE,EAAE,CAAC;SACxB,KAAK,CAAC,MAAM,CAAC,CACd;IAED,IAAI,CAAC,KAAK,EAAE,EACZ,CAAC;QACA,CAAC,GAAG,SAAS,CAAC;IACf,CAAC;IACD,IAAI,CAAC,KAAK,EAAE,EACZ,CAAC;QACA,CAAC,GAAG,SAAS,CAAC;IACf,CAAC;IAED,IAAI,OAAO,CAAC,IAAI,WAAW,IAAI,CAAC,IAAI,EAAE,EACtC,CAAC;QACA,IAAI,OAAO,CAAC,IAAI,QAAQ,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC,CAAC,EACtD,CAAC;YACA,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC;QACzB,CAAC;IACF,CAAC;IAED,IAAI,OAAO,CAAC,IAAI,QAAQ,EACxB,CAAC;QACA,aAAa;QACb,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;IACf,CAAC;IAED,IAAI,CAAC,GAAG,EACR,CAAC;QACA,MAAM,IAAI,cAAc,CAAC,GAAG,KAAK,EAAE,CAAC,CAAC;IACtC,CAAC;IAED,OAAO,CAAC,GAAG,EAAE,CAAkB,EAAE,CAAC,CAAC,CAAC;AACrC,CAAC;AApCD,8BAoCC;AAED,SAAgB,IAAI,CAAC,IAAY;IAEhC,OAAO,IAAA,0BAAmB,EAAC,UAAU,CAAC,IAAI,CAAC,CAAC;SAC1C,IAAI,CAAC,UAAU,MAAmC;QAElD,OAAO,MAAM,CAAC,KAAK,CAAC;IACrB,CAAC,CAAC,CACD;AACH,CAAC;AARD,oBAQC;AAED,SAAgB,QAAQ,CAAC,IAAY;IAEpC,OAAO,cAAc,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC;AACnC,CAAC;AAHD,4BAGC;AAED,SAAgB,aAAa,CAAQ,QAAiC,EAAE,IAAY,EAAE,QAA2B;IAEhH,OAAO,QAAQ,CAAQ,IAAI,EAAE;QAE5B,QAAQ;QAER,MAAM,CAAC,IAAI;YAEV,IAAI,IAAI,EACR,CAAC;gBACA,OAAO,SAAS,CAAC,IAAI,CAAC,CAAC;YACxB,CAAC;QACF,CAAC;KAED,CAAC,CAAC;AACJ,CAAC;AAfD,sCAeC;AAED,SAAgB,UAAU,CAAC,IAAY,EAAE,QAA2B;IAEnE,OAAO,aAAa,CAAC,gBAAgB,EAAE,IAAI,EAAE,QAAQ,CAAC,CAAA;AACvD,CAAC;AAHD,gCAGC;AAED,SAAgB,cAAc,CAAC,IAAY,EAAE,QAA2B;IAEvE,OAAO,aAAa,CAAC,cAAoB,EAAE,IAAI,EAAE,QAAQ,CAAC,CAAA;AAC3D,CAAC;AAHD,wCAGC;AAED,kBAAe,IAAI,CAAC","sourcesContent":["/**\n * Created by user on 2018/3/14/014.\n */\n\nimport { wrapStreamToPromise, IStreamLineWithValue } from '@novel-segment/stream-loader-core/line';\nimport Bluebird from 'bluebird';\nimport createLoadStream, { ICallback } from '@novel-segment/stream-loader-core/stream';\nimport createLoadStreamSync from '@novel-segment/stream-loader-core/sync';\n\nexport type IDictRow = [string, number, string];\nexport type IDict = IDictRow[];\n\n/**\n * 云计算\n * 蓝翔 nz\n * 区块链 10 nz\n*/\nexport function parseLine(input: string): IDictRow\n{\n\tlet [str, n, s] = input\n\t\t.replace(/^\\s+|\\s+$/, '')\n\t\t.split(/\\s+/g)\n\t;\n\n\tif (n === '')\n\t{\n\t\tn = undefined;\n\t}\n\tif (s === '')\n\t{\n\t\ts = undefined;\n\t}\n\n\tif (typeof s == 'undefined' || s == '')\n\t{\n\t\tif (typeof n == 'string' && !/^\\d+(?:\\.\\d+)?$/.test(n))\n\t\t{\n\t\t\t[n, s] = [undefined, n];\n\t\t}\n\t}\n\n\tif (typeof n == 'string')\n\t{\n\t\t// @ts-ignore\n\t\tn = Number(n);\n\t}\n\n\tif (!str)\n\t{\n\t\tthrow new ReferenceError(`${input}`);\n\t}\n\n\treturn [str, n as any as number, s];\n}\n\nexport function load(file: string): Bluebird<IDict>\n{\n\treturn wrapStreamToPromise(loadStream(file))\n\t\t.then(function (stream: IStreamLineWithValue<IDict>)\n\t\t{\n\t\t\treturn stream.value;\n\t\t})\n\t\t;\n}\n\nexport function loadSync(file: string)\n{\n\treturn loadStreamSync(file).value;\n}\n\nexport function _createStream<IDict>(fnStream: typeof createLoadStream, file: string, callback?: ICallback<IDict>)\n{\n\treturn fnStream<IDict>(file, {\n\n\t\tcallback,\n\n\t\tmapper(line)\n\t\t{\n\t\t\tif (line)\n\t\t\t{\n\t\t\t\treturn parseLine(line);\n\t\t\t}\n\t\t},\n\n\t});\n}\n\nexport function loadStream(file: string, callback?: ICallback<IDict>)\n{\n\treturn _createStream(createLoadStream, file, callback)\n}\n\nexport function loadStreamSync(file: string, callback?: ICallback<IDict>)\n{\n\treturn _createStream(createLoadStreamSync, file, callback)\n}\n\nexport default load;\n"]}