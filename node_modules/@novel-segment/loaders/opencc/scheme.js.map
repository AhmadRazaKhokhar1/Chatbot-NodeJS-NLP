{"version":3,"file":"scheme.js","sourceRoot":"","sources":["scheme.ts"],"names":[],"mappings":";AAAA;;GAEG;;;AAOH,sEAA8D;AAK9D,MAAM,SAAS,GAAG,IAAI,8BAAW,CAAkB;IAClD,SAAS,CAAC,KAAa;QAEtB,IAAI,IAAI,GAAG,KAAK;aACd,OAAO,CAAC,WAAW,EAAE,EAAE,CAAC;aACxB,KAAK,CAAC,IAAI,CAAoB,CAC/B;QAED,IAAI,IAAI,CAAC,MAAM,GAAG,CAAC,EACnB,CAAC;YACA,aAAa;YACb,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QAC/C,CAAC;QAED,IAAI,IAAI,CAAC,MAAM,GAAG,CAAC,EACnB,CAAC;YACA,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,QAAQ,EAAE,CAAC,IAAI,EAAE,CAAC;QAC7C,CAAC;QAED,OAAO,IAAI,CAAC;IACb,CAAC;IACD,MAAM,CAAC,KAAa;QAEnB,OAAO,KAAK,CAAC,IAAI,EAAE,CAAC,OAAO,CAAC,WAAW,EAAE,EAAE,CAAC,CAAC;IAC9C,CAAC;CACD,CAAC,CAAC;AAEU,QAAA,IAAI,GAAG,SAAS,CAAC,IAA6B,CAAC;AAC/C,QAAA,QAAQ,GAAG,SAAS,CAAC,QAAqC,CAAC;AAE3D,QAAA,UAAU,GAAG,SAAS,CAAC,UAAyC,CAAC;AACjE,QAAA,cAAc,GAAG,SAAS,CAAC,cAAiD,CAAC;AAE7E,QAAA,SAAS,GAAG,SAAS,CAAC,SAAuC,CAAC;AAC9D,QAAA,aAAa,GAAG,SAAS,CAAC,aAA+C,CAAC;AAE1E,QAAA,SAAS,GAAG,SAAS,CAAC,SAAuC,CAAC;AAE9D,QAAA,MAAM,GAAG,SAAS,CAAC;AAEhC,kBAAe,SAAS,CAAC,IAAI,CAAC","sourcesContent":["/**\n * Created by user on 2018/4/13/013.\n */\n\nimport Promise = require('bluebird');\nimport { wrapStreamToPromise, IStreamLineWithValue } from '@novel-segment/stream-loader-core/line';\nimport createLoadStream, { ICallback } from '@novel-segment/stream-loader-core/stream';\nimport createLoadStreamSync from '@novel-segment/stream-loader-core/sync';\nimport { autobind } from 'core-decorators';\nimport { LoaderClass } from '@novel-segment/dict-loader-core';\n\nexport type IDictRow = [string, string[], string] | [string, string[]];\nexport type IDict = IDictRow[];\n\nconst libLoader = new LoaderClass<IDict, IDictRow>({\n\tparseLine(input: string): IDictRow\n\t{\n\t\tlet data = input\n\t\t\t.replace(/^\\s+|\\s+$/, '')\n\t\t\t.split(/\\t/) as any as IDictRow\n\t\t;\n\n\t\tif (data.length > 1)\n\t\t{\n\t\t\t// @ts-ignore\n\t\t\tdata[1] = (data[1] || '').trim().split(/\\s+/);\n\t\t}\n\n\t\tif (data.length > 2)\n\t\t{\n\t\t\tdata[2] = (data[2] || '').toString().trim();\n\t\t}\n\n\t\treturn data;\n\t},\n\tfilter(input: string)\n\t{\n\t\treturn input.trim().replace(/^\\s+|\\s+$/, '');\n\t},\n});\n\nexport const load = libLoader.load as typeof libLoader.load;\nexport const loadSync = libLoader.loadSync as typeof libLoader.loadSync;\n\nexport const loadStream = libLoader.loadStream as typeof libLoader.loadStream;\nexport const loadStreamSync = libLoader.loadStreamSync as typeof libLoader.loadStreamSync;\n\nexport const parseLine = libLoader.parseLine as typeof libLoader.parseLine;\nexport const stringifyLine = libLoader.stringifyLine as typeof libLoader.stringifyLine;\n\nexport const serialize = libLoader.serialize as typeof libLoader.serialize;\n\nexport const Loader = libLoader;\n\nexport default libLoader.load;\n"]}