{"version":3,"file":"index.js","sourceRoot":"","sources":["index.ts"],"names":[],"mappings":";;;AAAA,4DAAqE;AACrE,4EAAoG;AAEpG;;GAEG;AACH,MAAsB,aAAc,SAAQ,2CAA8B;IAEzD,MAAM,CAAC,IAAI,EAAE,GAAG,IAAI;QAEnC,IAAI,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAE3B,IAAI,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QAEzB,OAAO,OAAO,IAAI,KAAK,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAA;IAC/C,CAAC;IAED,GAAG,CAAC,IAAuB;QAE1B,IAAI,IAAI,GAAG,IAAI,CAAC;QAEhB,IAAI,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EACvB;YACC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAA;SAC/B;aAED;YACC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SAChB;QAED,OAAO,IAAI,CAAC;IACb,CAAC;IAED,IAAI,CAAC,IAAY;QAEhB,IAAI,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC;QAEnB,IAAI,IAAI,EACR;YACC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC;SACxB;IACF,CAAC;IAEQ,MAAM,CAAC,IAAY;QAE3B,IAAI,IAAI,GAAG,IAAI,CAAC;QAChB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAEnB,OAAO,IAAI,CAAC;IACb,CAAC;IAEQ,OAAO,CAAC,IAAY;QAE5B,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAA;IACxB,CAAC;IAEQ,SAAS,CAAC,EAAE,GAAG,IAAI;QAE3B,IAAI,IAAI,GAAG,IAAI,CAAC;QAEhB,OAAO,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC;aAC/B,MAAM,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC,EAAE,IAAI,CAAC;YAE7B,IAAI,IAAI,EACR;gBACC,IAAI,IAAI,GAAG,IAAA,2BAAa,EAAC,CAAC,CAAC,CAAC;gBAC5B,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;aACb;YAED,OAAO,CAAC,CAAA;QACT,CAAC,EAAE,EAAE,CAAC;aACL,IAAI,CAAC,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CACxC;IACH,CAAC;CACD;AApED,sCAoEC;AAED,kBAAe,aAAa,CAAA","sourcesContent":["import { IDictRow, stringifyLine } from '@novel-segment/loader-line';\nimport { AbstractTableDictCore, IDICT, IDICT2, IOptions } from '@novel-segment/table-core-abstract';\n\n/**\n * 原版 node-segment 的格式\n */\nexport abstract class TableDictLine extends AbstractTableDictCore<boolean>\n{\n\tpublic override exists(data, ...argv)\n\t{\n\t\tlet w = this._exists(data);\n\n\t\tlet bool = this.TABLE[w];\n\n\t\treturn typeof bool === 'boolean' ? bool : null\n\t}\n\n\tadd(word: string | string[])\n\t{\n\t\tlet self = this;\n\n\t\tif (Array.isArray(word))\n\t\t{\n\t\t\tword.forEach(v => self._add(v))\n\t\t}\n\t\telse\n\t\t{\n\t\t\tself._add(word);\n\t\t}\n\n\t\treturn this;\n\t}\n\n\t_add(word: string)\n\t{\n\t\tword = word.trim();\n\n\t\tif (word)\n\t\t{\n\t\t\tthis.TABLE[word] = true;\n\t\t}\n\t}\n\n\toverride remove(word: string)\n\t{\n\t\tlet self = this;\n\t\tself._remove(word);\n\n\t\treturn this;\n\t}\n\n\toverride _remove(word: string)\n\t{\n\t\tdelete this.TABLE[word]\n\t}\n\n\toverride stringify(LF = \"\\n\")\n\t{\n\t\tlet self = this;\n\n\t\treturn Object.entries(self.TABLE)\n\t\t\t.reduce(function (a, [w, bool])\n\t\t\t{\n\t\t\t\tif (bool)\n\t\t\t\t{\n\t\t\t\t\tlet line = stringifyLine(w);\n\t\t\t\t\ta.push(line);\n\t\t\t\t}\n\n\t\t\t\treturn a\n\t\t\t}, [])\n\t\t\t.join(typeof LF === 'string' ? LF : \"\\n\")\n\t\t\t;\n\t}\n}\n\nexport default TableDictLine\n"]}