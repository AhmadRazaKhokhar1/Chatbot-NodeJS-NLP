{"version":3,"file":"line.js","sourceRoot":"","sources":["line.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Created by user on 2018/4/11/011.\n */\n\nimport { fstatSync, statSync, Stats } from 'fs';\nimport split2 from 'split2';\nimport { isAbsolute, resolve } from 'path';\nimport Bluebird from 'bluebird';\nimport stream from 'stream';\nimport { createReadStream, IPipe } from 'stream-pipe';\nimport { ReadStream } from 'stream-pipe/fs';\n\nexport type IOptions = {\n\n\tmapper?(data: string),\n\n\tonpipe?(src),\n\tonclose?(...argv),\n\tonfinish?(...argv),\n\tonready?(...argv),\n\tondata?(...argv),\n\n}\n\nexport function byLine(fn?, options: IOptions = {})\n{\n\tif (typeof fn == 'object')\n\t{\n\t\t[options, fn] = [fn, undefined];\n\t}\n\n\tfn = fn || options.mapper;\n\n\t// @ts-ignore\n\tlet wts = split2(fn) as IStreamLine;\n\n\twts.on('pipe', function (src)\n\t{\n\t\t// @ts-ignore\n\t\tconst self = this;\n\n\t\t// @ts-ignore\n\t\tthis.pipeFrom = src;\n\t\tlet pipeStat = null as Stats;\n\n\t\tif (typeof src.bytesTotal == 'number')\n\t\t{\n\t\t\tself.bytesSize = src.bytesTotal;\n\t\t}\n\t\telse if (src.fd)\n\t\t{\n\t\t\tpipeStat = fstatSync(src.fd);\n\n\t\t\tself.bytesSize = pipeStat.size;\n\t\t}\n\t\telse if (src.path)\n\t\t{\n\t\t\tlet p: string = src.path;\n\n\t\t\tif (src.cwd && !isAbsolute(src.path))\n\t\t\t{\n\t\t\t\tp = resolve(src.cwd, src.path);\n\t\t\t}\n\n\t\t\tpipeStat = statSync(p);\n\n\t\t\tself.bytesSize = pipeStat.size;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tself.bytesSize = null;\n\t\t}\n\n\t\t// @ts-ignore\n\t\tthis.pipeStat = pipeStat;\n\n\t\tsrc\n\t\t\t.on('close', function (...argv)\n\t\t\t{\n\t\t\t\tself.emit('close', ...argv);\n\t\t\t})\n\t\t\t.on('ready', function (...argv)\n\t\t\t{\n\t\t\t\tself.emit('ready', ...argv);\n\t\t\t})\n\t\t;\n\t});\n\n\tObject.keys(options)\n\t\t.forEach(function (key)\n\t\t{\n\t\t\tif (key.indexOf('on') == 0 && options[key])\n\t\t\t{\n\t\t\t\twts.on(key.slice(2), options[key]);\n\t\t\t}\n\t\t})\n\t;\n\n\treturn wts;\n}\n\nexport function createStreamLine(file: string, options: IOptions): IStreamLine\nexport function createStreamLine(file: string, fn?: (data: string) => any, options?: IOptions): IStreamLine\nexport function createStreamLine(file: string, fn?, options?: IOptions)\n{\n\treturn createReadStream(file)\n\t\t.pipe(byLine(fn, options))\n\t\t;\n}\n\nexport function readFileLine(file: string, options: IOptions): IPromiseStream<IStreamLine>\nexport function readFileLine(file: string, fn?: (data: string) => any, options?: IOptions): IPromiseStream<IStreamLine>\nexport function readFileLine(file: string, fn?, options?: IOptions)\n{\n\treturn wrapStreamToPromise(createStreamLine(file, fn, options));\n}\n\nexport function wrapStreamToPromise<T extends NodeJS.WritableStream>(stream: T): IPromiseStream<T>\n{\n\tlet resolve, reject;\n\n\tlet promise = new Bluebird(function ()\n\t{\n\t\tresolve = arguments[0];\n\t\treject = arguments[1];\n\t}) as IPromiseStream<T>;\n\n\tstream\n\t\t.on('close', function (...argv)\n\t\t{\n\t\t\t// @ts-ignore\n\t\t\tresolve(this);\n\t\t\t//console.log('d.close', ...argv);\n\t\t})\n\t\t.on('finish', function (...argv)\n\t\t{\n\t\t\t// @ts-ignore\n\t\t\tresolve(this);\n\t\t\t//console.log('d.close', ...argv);\n\t\t})\n\t\t.on('error', function (...argv)\n\t\t{\n\t\t\treject(...argv);\n\t\t})\n\t;\n\n\tpromise.stream = stream;\n\t// @ts-ignore\n\tpromise = promise.bind(stream);\n\tpromise.stream = stream;\n\n\treturn promise;\n}\n\nexport type IStreamLine = IPipe<ReadStream, NodeJS.WritableStream>;\n\nexport type IStreamLineWithValue<T> = IStreamLine & {\n\tvalue?: T,\n};\n\nexport type IPromiseStream<T> = Bluebird<T> & {\n\tstream: T,\n};\n\n/*\nlet p = readFileLine('../.gitignore', {\n\n\tmapper(data: string)\n\t{\n\t\treturn data;\n\t},\n\n});\n\np.stream.on('data', function (data)\n{\n\tconsole.log(data);\n});\n\np.then(function (d: IPipe<ReadStream, NodeJS.WritableStream>)\n{\n\tconsole.log(this === p.stream, d === this);\n});\n*/\n\nexport default exports as typeof import('./line');\n"]}